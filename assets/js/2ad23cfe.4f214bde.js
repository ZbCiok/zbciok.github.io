"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1987],{9739:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var r=i(4848),a=i(8453);const t={sidebar_position:20},s="Average Sensor Readings",o={id:"streams/apache-flink/Examples/AverageSensorReadings",title:"Average Sensor Readings",description:"Description",source:"@site/docs/streams/apache-flink/Examples/AverageSensorReadings.mdx",sourceDirName:"streams/apache-flink/Examples",slug:"/streams/apache-flink/Examples/AverageSensorReadings",permalink:"/docs/streams/apache-flink/Examples/AverageSensorReadings",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Flink Quick Start Java",permalink:"/docs/streams/apache-flink/Examples/flink-quickstart-java"},next:{title:"Fraud Detector",permalink:"/docs/streams/apache-flink/Examples/fraud-detector"}},c={},d=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"AverageSensorReadings.java",id:"averagesensorreadingsjava",level:3},{value:"Run",id:"run",level:2},{value:"main(String[] args) output:",id:"mainstring-args-output",level:3},{value:"Source Code: <br></br> <em><strong>https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/AverageSensorReadings</strong></em>",id:"source-code--httpsgithubcomzbciokzjc-examplestreemainstreamsflinkaveragesensorreadings",level:4}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"average-sensor-readings",children:"Average Sensor Readings"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["Our example application ingests a stream of temperature measurements. The program converts the temperatures from Fahrenheit to Celsius and computes the average temperature every 5 seconds for each sensor.",(0,r.jsx)("br",{}),"\nThe Example is based on ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/streaming-with-flink/examples-java",children:"https://github.com/streaming-with-flink/examples-java"})})})," updated by ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://jreact.com",children:"https://jreact.com"})})}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JDK 11"}),"\n",(0,r.jsx)(n.li,{children:"Maven"}),"\n",(0,r.jsx)(n.li,{children:"IDE"}),"\n",(0,r.jsx)(n.li,{children:"Flink 1.20.0"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:".\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 java\n        \u2502\xa0\xa0 \u2514\u2500\u2500 io\n        \u2502\xa0\xa0     \u2514\u2500\u2500 github\n        \u2502\xa0\xa0         \u2514\u2500\u2500 streamingwithflink\n        \u2502\xa0\xa0             \u251c\u2500\u2500 AverageSensorReadings.java\n        \u2502\xa0\xa0             \u2514\u2500\u2500 util\n        \u2502\xa0\xa0                 \u251c\u2500\u2500 SensorReading.java\n        \u2502\xa0\xa0                 \u251c\u2500\u2500 SensorSource.java\n        \u2502\xa0\xa0                 \u2514\u2500\u2500 SensorTimeAssigner.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 log4j.properties\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>io.github.streamingwithflink</groupId>\n    <artifactId>examples-java</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n\n    <name>Java Examples for Stream Processing with Apache Flink</name>\n    <url>http://streaming-with-flink.github.io/examples</url>\n\n    <description>original version updated by jreact.com</description>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <flink.version>1.20.0</flink.version>\n        <java.version>1.8</java.version>\n        <maven.compiler.source>${java.version}</maven.compiler.source>\n        <maven.compiler.target>${java.version}</maven.compiler.target>\n    </properties>\n\n    <dependencies>\n        \x3c!-- Apache Flink dependencies --\x3e\n        \x3c!-- These dependencies are provided, because they should not be packaged into the JAR file. --\x3e\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-java</artifactId>\n            <version>${flink.version}</version>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-streaming-java</artifactId>\n            <version>${flink.version}</version>\n            <scope>compile</scope>\n        </dependency>\n\n        \x3c!-- runtime-web dependency is need to start web UI from IDE --\x3e\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-runtime-web</artifactId>\n            <version>${flink.version}</version>\n            <scope>compile</scope>\n        </dependency>\n\n        \x3c!-- queryable-state dependencies are needed for respective examples --\x3e\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-queryable-state-runtime</artifactId>\n            <version>${flink.version}</version>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-queryable-state-client-java</artifactId>\n            <version>${flink.version}</version>\n            <scope>compile</scope>\n        </dependency>\n\n        \x3c!--\n        Derby is used for a sink connector example.\n        Example only works in local mode, i.e, it is not possible to submit it to a running cluster.\n        The dependency is set to provided to reduce the size of the JAR file.\n        --\x3e\n        \x3c!--                <dependency>--\x3e\n        \x3c!--                        <groupId>org.apache.derby</groupId>--\x3e\n        \x3c!--                        <artifactId>derby</artifactId>--\x3e\n        \x3c!--                        <version>10.13.1.1</version>--\x3e\n        \x3c!--                        <scope>provided</scope>--\x3e\n        \x3c!--                </dependency>--\x3e\n\n        \x3c!-- Logging --\x3e\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-to-slf4j</artifactId>\n            <version>2.8.2</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            \x3c!-- Java Compiler --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                </configuration>\n            </plugin>\n\n            \x3c!-- We use the maven-shade plugin to create a fat jar that contains all necessary dependencies. --\x3e\n            \x3c!-- Change the value of <mainClass>...</mainClass> if your program entry point changes. --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>3.0.0</version>\n                <executions>\n                    \x3c!-- Run shade goal on package phase --\x3e\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <artifactSet>\n                                <excludes>\n                                    <exclude>org.apache.flink:force-shading</exclude>\n                                    <exlude>org.apache.flink:flink-shaded-netty</exlude>\n                                    <exlude>org.apache.flink:flink-shaded-guava</exlude>\n                                    <exclude>com.google.code.findbugs:jsr305</exclude>\n                                    <exclude>org.slf4j:*</exclude>\n                                    <exclude>log4j:*</exclude>\n                                </excludes>\n                            </artifactSet>\n                            <filters>\n                                <filter>\n                                    \x3c!-- Do not copy the signatures in the META-INF folder.\n                                    Otherwise, this might cause SecurityExceptions when using the JAR. --\x3e\n                                    <artifact>*:*</artifact>\n                                    <excludes>\n                                        <exclude>META-INF/*.SF</exclude>\n                                        <exclude>META-INF/*.DSA</exclude>\n                                        <exclude>META-INF/*.RSA</exclude>\n                                    </excludes>\n                                </filter>\n                            </filters>\n                            <transformers>\n                                <transformer\n                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">\n                                    <mainClass>io.github.streamingwithflink.StreamingJob</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n\n        <pluginManagement>\n            <plugins>\n\n                \x3c!-- This improves the out-of-the-box experience in Eclipse by resolving some warnings. --\x3e\n                <plugin>\n                    <groupId>org.eclipse.m2e</groupId>\n                    <artifactId>lifecycle-mapping</artifactId>\n                    <version>1.0.0</version>\n                    <configuration>\n                        <lifecycleMappingMetadata>\n                            <pluginExecutions>\n                                <pluginExecution>\n                                    <pluginExecutionFilter>\n                                        <groupId>org.apache.maven.plugins</groupId>\n                                        <artifactId>maven-shade-plugin</artifactId>\n                                        <versionRange>[3.0.0,)</versionRange>\n                                        <goals>\n                                            <goal>shade</goal>\n                                        </goals>\n                                    </pluginExecutionFilter>\n                                    <action>\n                                        <ignore/>\n                                    </action>\n                                </pluginExecution>\n                                <pluginExecution>\n                                    <pluginExecutionFilter>\n                                        <groupId>org.apache.maven.plugins</groupId>\n                                        <artifactId>maven-compiler-plugin</artifactId>\n                                        <versionRange>[3.1,)</versionRange>\n                                        <goals>\n                                            <goal>testCompile</goal>\n                                            <goal>compile</goal>\n                                        </goals>\n                                    </pluginExecutionFilter>\n                                    <action>\n                                        <ignore/>\n                                    </action>\n                                </pluginExecution>\n                            </pluginExecutions>\n                        </lifecycleMappingMetadata>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n    \x3c!-- This profile helps to make things run out of the box in IntelliJ --\x3e\n    \x3c!-- Its adds Flink\'s core classes to the runtime class path. --\x3e\n    \x3c!-- Otherwise they are missing in IntelliJ, because the dependency is \'provided\' --\x3e\n    <profiles>\n        <profile>\n            <id>add-dependencies-for-IDEA</id>\n\n            <activation>\n                <property>\n                    <name>idea.version</name>\n                </property>\n            </activation>\n\n            <dependencies>\n                <dependency>\n                    <groupId>org.apache.flink</groupId>\n                    <artifactId>flink-java</artifactId>\n                    <version>${flink.version}</version>\n                    <scope>compile</scope>\n                </dependency>\n                <dependency>\n                    <groupId>org.apache.flink</groupId>\n                    <artifactId>flink-streaming-java</artifactId>\n                    <version>${flink.version}</version>\n                    <scope>compile</scope>\n                </dependency>\n                <dependency>\n                    <groupId>org.apache.flink</groupId>\n                    <artifactId>flink-runtime-web</artifactId>\n                    <version>${flink.version}</version>\n                    <scope>compile</scope>\n                </dependency>\n                <dependency>\n                    <groupId>org.apache.derby</groupId>\n                    <artifactId>derby</artifactId>\n                    <version>10.13.1.1</version>\n                    <scope>compile</scope>\n                </dependency>\n            </dependencies>\n        </profile>\n    </profiles>\n\n</project>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"averagesensorreadingsjava",children:"AverageSensorReadings.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'/*\n * Copyright 2015 Fabian Hueske / Vasia Kalavri\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.github.streamingwithflink;\n\nimport io.github.streamingwithflink.util.SensorReading;\nimport io.github.streamingwithflink.util.SensorSource;\nimport io.github.streamingwithflink.util.SensorTimeAssigner;\nimport org.apache.flink.streaming.api.TimeCharacteristic;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.functions.windowing.WindowFunction;\nimport org.apache.flink.streaming.api.windowing.time.Time;\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow;\nimport org.apache.flink.util.Collector;\n\npublic class AverageSensorReadings {\n\n    /**\n     * main() defines and executes the DataStream program.\n     *\n     * @param args program arguments\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n\n        // set up the streaming execution environment\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        // use event time for the application\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        // configure watermark interval\n        env.getConfig().setAutoWatermarkInterval(1000L);\n\n        // ingest sensor stream\n        DataStream<SensorReading> sensorData = env\n            // SensorSource generates random temperature readings\n            .addSource(new SensorSource())\n            // assign timestamps and watermarks which are required for event time\n            .assignTimestampsAndWatermarks(new SensorTimeAssigner());\n\n        DataStream<SensorReading> avgTemp = sensorData\n            // convert Fahrenheit to Celsius using and inlined map function\n            .map( r -> new SensorReading(r.id, r.timestamp, (r.temperature - 32) * (5.0 / 9.0)))\n            // organize stream by sensor\n            .keyBy(r -> r.id)\n            // group readings in 1 second windows\n            .timeWindow(Time.seconds(1))\n            // compute average temperature using a user-defined function\n            .apply(new TemperatureAverager());\n\n        // print result stream to standard out\n        avgTemp.print();\n\n        // execute application\n        env.execute("Compute average sensor temperature");\n    }\n\n    /**\n     *  User-defined WindowFunction to compute the average temperature of SensorReadings\n     */\n    public static class TemperatureAverager implements WindowFunction<SensorReading, SensorReading, String, TimeWindow> {\n\n        /**\n         * apply() is invoked once for each window.\n         *\n         * @param sensorId the key (sensorId) of the window\n         * @param window meta data for the window\n         * @param input an iterable over the collected sensor readings that were assigned to the window\n         * @param out a collector to emit results from the function\n         */\n        @Override\n        public void apply(String sensorId, TimeWindow window, Iterable<SensorReading> input, Collector<SensorReading> out) {\n\n            // compute the average temperature\n            int cnt = 0;\n            double sum = 0.0;\n            for (SensorReading r : input) {\n                cnt++;\n                sum += r.temperature;\n            }\n            double avgTemp = sum / cnt;\n\n            // emit a SensorReading with the average temperature\n            out.collect(new SensorReading(sensorId, window.getEnd(), avgTemp));\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,r.jsx)(n.h3,{id:"mainstring-args-output",children:"main(String[] args) output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// ...\n\n25> (sensor_19, 1730379578000, 8.133933181102755)\n8> (sensor_100, 1730379578000, 18.222523572953563)\n18> (sensor_5, 1730379578000, 28.826508003545726)\n10> (sensor_8, 1730379578000, 12.114165908495995)\n23> (sensor_4, 1730379578000, 17.567941330477613)\n25> (sensor_42, 1730379578000, 21.287101421027337)\n3> (sensor_55, 1730379578000, 10.962288771915803)\n25> (sensor_81, 1730379578000, 6.455762557079783)\n22> (sensor_7, 1730379578000, 11.564826056832963)\n13> (sensor_12, 1730379578000, 44.793100971361206)\n6> (sensor_2, 1730379578000, 25.253219210952036)\n7> (sensor_26, 1730379578000, 0.5203865386891062)\n\n// ...\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"source-code--httpsgithubcomzbciokzjc-examplestreemainstreamsflinkaveragesensorreadings",children:["Source Code: ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/AverageSensorReadings",children:"https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/AverageSensorReadings"})})})]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var r=i(6540);const a={},t=r.createContext(a);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);