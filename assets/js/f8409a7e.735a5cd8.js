"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[6903],{4505:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=r(4848),i=r(8453);const a={sidebar_position:1},t="Intro",o={id:"intro",title:"Intro",description:"AI Conversation:",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Streams",permalink:"/docs/streams"}},l={},c=[{value:"AI Conversation:",id:"ai-conversation",level:2},{value:"1. <strong>Asynchronous Data Streams</strong>",id:"1-asynchronous-data-streams",level:3},{value:"2. <strong>Observer Pattern</strong>",id:"2-observer-pattern",level:3},{value:"3. <strong>Reactive Streams</strong>",id:"3-reactive-streams",level:3},{value:"4. <strong>Functional Reactive Programming (FRP)</strong>",id:"4-functional-reactive-programming-frp",level:3},{value:"5. <strong>Event-Driven Architecture</strong>",id:"5-event-driven-architecture",level:3},{value:"6. <strong>Operators for Stream Processing</strong>",id:"6-operators-for-stream-processing",level:3},{value:"7. <strong>Reactive Frameworks &amp; Libraries</strong>",id:"7-reactive-frameworks--libraries",level:3},{value:"8. <strong>Backpressure Handling</strong>",id:"8-backpressure-handling",level:3},{value:"9. <strong>Declarative Programming</strong>",id:"9-declarative-programming",level:3},{value:"10. <strong>Use Cases</strong>",id:"10-use-cases",level:3},{value:"<strong>Big Data Frameworks and Reactive Programming</strong>",id:"big-data-frameworks-and-reactive-programming",level:3},{value:"<strong>Big Data Frameworks</strong>",id:"big-data-frameworks",level:2},{value:"<strong>1. Apache Hadoop</strong>",id:"1-apache-hadoop",level:3},{value:"<strong>2. Apache Spark</strong>",id:"2-apache-spark",level:3},{value:"<strong>3. Apache Flink</strong>",id:"3-apache-flink",level:3},{value:"<strong>4. Apache Storm</strong>",id:"4-apache-storm",level:3},{value:"<strong>5. Apache Kafka</strong>",id:"5-apache-kafka",level:3},{value:"<strong>6. Dask</strong>",id:"6-dask",level:3},{value:"<strong>Reactive Programming</strong>",id:"reactive-programming",level:2},{value:"<strong>Key Concepts of Reactive Programming</strong>",id:"key-concepts-of-reactive-programming",level:3},{value:"<strong>Popular Reactive Frameworks</strong>",id:"popular-reactive-frameworks",level:3},{value:"<strong>Intersection of Big Data and Reactive Programming</strong>",id:"intersection-of-big-data-and-reactive-programming",level:2},{value:"Reactive Programming",id:"reactive-programming-1",level:2},{value:"Use Cases for Reactive Programming",id:"use-cases-for-reactive-programming",level:2},{value:"The Reactive Landscape",id:"the-reactive-landscape",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"intro",children:"Intro"})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"2025-02-04"})})}),(0,s.jsx)(n.h2,{id:"ai-conversation",children:"AI Conversation:"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:"/img/ai/android-chrome-192x192.png",width:"21 px",alt:"android-chrome-192x192.png"}),":\nreactive programming concepts in software development"]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:"/img/ai/ai-001.png",width:"24 px",alt:"ai-001.png"}),":\nReactive programming is a programming paradigm focused on asynchronous data streams and the propagation of changes. It is widely used in modern software development for handling complex event-driven applications, real-time data processing, and responsive user interfaces. Here are the key concepts:"]}),(0,s.jsxs)(n.h3,{id:"1-asynchronous-data-streams",children:["1. ",(0,s.jsx)(n.strong,{children:"Asynchronous Data Streams"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In reactive programming, data is treated as a continuous stream rather than a single value."}),"\n",(0,s.jsx)(n.li,{children:"Streams emit values over time and can be observed and processed asynchronously."}),"\n"]}),(0,s.jsxs)(n.h3,{id:"2-observer-pattern",children:["2. ",(0,s.jsx)(n.strong,{children:"Observer Pattern"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A core principle where observers subscribe to a data source (observable)."}),"\n",(0,s.jsx)(n.li,{children:"When the data source emits new values, all subscribers receive updates automatically."}),"\n"]}),(0,s.jsxs)(n.h3,{id:"3-reactive-streams",children:["3. ",(0,s.jsx)(n.strong,{children:"Reactive Streams"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A standard for handling asynchronous data streams with ",(0,s.jsx)(n.strong,{children:"backpressure"})," (controlling data flow to prevent overload)."]}),"\n",(0,s.jsxs)(n.li,{children:["Implementations include ",(0,s.jsx)(n.strong,{children:"Project Reactor"}),", ",(0,s.jsx)(n.strong,{children:"RxJava"}),", and ",(0,s.jsx)(n.strong,{children:"Akka Streams"}),"."]}),"\n"]}),(0,s.jsxs)(n.h3,{id:"4-functional-reactive-programming-frp",children:["4. ",(0,s.jsx)(n.strong,{children:"Functional Reactive Programming (FRP)"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Combines ",(0,s.jsx)(n.strong,{children:"functional programming"})," with reactive principles."]}),"\n",(0,s.jsx)(n.li,{children:"Uses pure functions to transform and combine data streams."}),"\n"]}),(0,s.jsxs)(n.h3,{id:"5-event-driven-architecture",children:["5. ",(0,s.jsx)(n.strong,{children:"Event-Driven Architecture"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Applications react to events instead of polling for changes."}),"\n",(0,s.jsx)(n.li,{children:"Useful in microservices and distributed systems."}),"\n"]}),(0,s.jsxs)(n.h3,{id:"6-operators-for-stream-processing",children:["6. ",(0,s.jsx)(n.strong,{children:"Operators for Stream Processing"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transformation:"})," ",(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"flatMap"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filtering:"})," ",(0,s.jsx)(n.code,{children:"filter"}),", ",(0,s.jsx)(n.code,{children:"distinct"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Combining:"})," ",(0,s.jsx)(n.code,{children:"merge"}),", ",(0,s.jsx)(n.code,{children:"concat"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling:"})," ",(0,s.jsx)(n.code,{children:"catchError"}),", ",(0,s.jsx)(n.code,{children:"retry"})]}),"\n"]}),(0,s.jsxs)(n.h3,{id:"7-reactive-frameworks--libraries",children:["7. ",(0,s.jsx)(n.strong,{children:"Reactive Frameworks & Libraries"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RxJS (JavaScript)"})," \u2013 Used with Angular and frontend applications."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reactor (Java)"})," \u2013 Used in Spring WebFlux for reactive web applications."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RxJava (Java)"})," \u2013 Used for building reactive applications in Android and backend systems."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Akka Streams (Scala)"})," \u2013 Powerful reactive stream processing."]}),"\n"]}),(0,s.jsxs)(n.h3,{id:"8-backpressure-handling",children:["8. ",(0,s.jsx)(n.strong,{children:"Backpressure Handling"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Regulates the flow of data between producers and consumers."}),"\n",(0,s.jsx)(n.li,{children:"Prevents overwhelming consumers by buffering, throttling, or dropping data."}),"\n"]}),(0,s.jsxs)(n.h3,{id:"9-declarative-programming",children:["9. ",(0,s.jsx)(n.strong,{children:"Declarative Programming"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Developers describe what should happen rather than how."}),"\n",(0,s.jsx)(n.li,{children:"Makes code more readable and maintainable."}),"\n"]}),(0,s.jsxs)(n.h3,{id:"10-use-cases",children:["10. ",(0,s.jsx)(n.strong,{children:"Use Cases"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time applications"})," (e.g., stock market updates, chat apps)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Microservices communication"})," (event-driven systems)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"UI frameworks"})," (e.g., React uses a virtual DOM with reactive principles)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Streaming and processing large data sets"})," (e.g., Kafka Streams)."]}),"\n"]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:"/img/ai/android-chrome-192x192.png",width:"21 px",alt:"android-chrome-192x192.png"}),":\nbig data frameworks and reactive programming"]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)("img",{src:"/img/ai/ai-001.png",width:"24 px",alt:"ai-001.png"}),":"]}),(0,s.jsx)(n.h3,{id:"big-data-frameworks-and-reactive-programming",children:(0,s.jsx)(n.strong,{children:"Big Data Frameworks and Reactive Programming"})}),(0,s.jsx)(n.p,{children:"Big data frameworks and reactive programming are two distinct but sometimes overlapping areas of modern computing."}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h2,{id:"big-data-frameworks",children:(0,s.jsx)(n.strong,{children:"Big Data Frameworks"})}),(0,s.jsx)(n.p,{children:"Big data frameworks are tools and platforms designed to process, manage, and analyze large-scale datasets efficiently. Some of the most popular big data frameworks include:"}),(0,s.jsx)(n.h3,{id:"1-apache-hadoop",children:(0,s.jsx)(n.strong,{children:"1. Apache Hadoop"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Distributed storage (HDFS) and processing (MapReduce)"}),"\n",(0,s.jsx)(n.li,{children:"Batch processing model"}),"\n",(0,s.jsx)(n.li,{children:"Scalable and fault-tolerant"}),"\n"]}),(0,s.jsx)(n.h3,{id:"2-apache-spark",children:(0,s.jsx)(n.strong,{children:"2. Apache Spark"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In-memory processing for high-speed data analytics"}),"\n",(0,s.jsx)(n.li,{children:"Supports batch and stream processing"}),"\n",(0,s.jsx)(n.li,{children:"Works with multiple data sources (HDFS, Cassandra, S3, etc.)"}),"\n"]}),(0,s.jsx)(n.h3,{id:"3-apache-flink",children:(0,s.jsx)(n.strong,{children:"3. Apache Flink"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time stream processing with low latency"}),"\n",(0,s.jsx)(n.li,{children:"Stateful computations for complex event processing"}),"\n",(0,s.jsx)(n.li,{children:"High availability and fault tolerance"}),"\n"]}),(0,s.jsx)(n.h3,{id:"4-apache-storm",children:(0,s.jsx)(n.strong,{children:"4. Apache Storm"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Distributed real-time computation"}),"\n",(0,s.jsx)(n.li,{children:"Supports micro-batching and event-driven processing"}),"\n",(0,s.jsx)(n.li,{children:"Low latency and high scalability"}),"\n"]}),(0,s.jsx)(n.h3,{id:"5-apache-kafka",children:(0,s.jsx)(n.strong,{children:"5. Apache Kafka"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Distributed event streaming platform"}),"\n",(0,s.jsx)(n.li,{children:"Used for message brokering and real-time analytics"}),"\n",(0,s.jsx)(n.li,{children:"Integrates with other big data frameworks"}),"\n"]}),(0,s.jsx)(n.h3,{id:"6-dask",children:(0,s.jsx)(n.strong,{children:"6. Dask"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Parallel computing in Python"}),"\n",(0,s.jsx)(n.li,{children:"Scales from single machines to clusters"}),"\n",(0,s.jsx)(n.li,{children:"Works with Pandas, NumPy, and machine learning libraries"}),"\n"]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h2,{id:"reactive-programming",children:(0,s.jsx)(n.strong,{children:"Reactive Programming"})}),(0,s.jsx)(n.p,{children:"Reactive programming is an asynchronous programming paradigm that deals with data streams and event-driven computation. It emphasizes non-blocking, scalable, and responsive applications."}),(0,s.jsx)(n.h3,{id:"key-concepts-of-reactive-programming",children:(0,s.jsx)(n.strong,{children:"Key Concepts of Reactive Programming"})}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event-Driven & Asynchronous"})," \u2013 Responds to data events without blocking the main execution thread."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backpressure"})," \u2013 Controls the flow of data to prevent overwhelming the system."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Observable Streams"})," \u2013 Data is processed as continuous streams."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Functional Composition"})," \u2013 Uses operators like ",(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"filter"}),", ",(0,s.jsx)(n.code,{children:"reduce"})," to transform data streams."]}),"\n"]}),(0,s.jsx)(n.h3,{id:"popular-reactive-frameworks",children:(0,s.jsx)(n.strong,{children:"Popular Reactive Frameworks"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ReactiveX (RxJava, RxJS, RxPython, RxScala)"})," \u2013 Supports event-driven programming across different languages."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Project Reactor (Spring WebFlux)"})," \u2013 Used in Spring Boot for reactive web applications."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vert.x"})," \u2013 High-performance, event-driven framework for Java."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Akka Streams"})," \u2013 Reactive stream processing in Scala and Java."]}),"\n"]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h2,{id:"intersection-of-big-data-and-reactive-programming",children:(0,s.jsx)(n.strong,{children:"Intersection of Big Data and Reactive Programming"})}),(0,s.jsx)(n.p,{children:"Reactive programming principles can be applied to big data frameworks, especially in real-time analytics and stream processing. For example:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Apache Kafka + Reactive Streams"})," for real-time event-driven architectures."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Apache Flink + Akka Streams"})," for reactive data pipelines."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spring WebFlux + Big Data"})," for responsive and scalable web applications."]}),"\n"]})]}),"\n",(0,s.jsx)(n.p,{children:"Reactive programming is an important programming paradigm that is becoming increasingly popular in Java development. Reactive programming is based on the use of asynchronous and non-blocking data streams to handle data and events."}),"\n",(0,s.jsx)(n.h2,{id:"reactive-programming-1",children:"Reactive Programming"}),"\n",(0,s.jsxs)(n.p,{children:["Reactive programming is a programming paradigm that focuses on handling streams of data and events.\nThis programming paradigm uses asynchronous and non-blocking code to handle data streams, making it more efficient and scalable.\nReactive programming is based on the idea of reacting to events instead of blocking and waiting for them.",(0,s.jsx)("br",{}),"\nReactive programming is different from traditional programming paradigms in that it uses streams of data and events instead of objects and methods.\nThis allows developers to write code that is more efficient, responsive, and resilient."]}),"\n",(0,s.jsx)(n.h2,{id:"use-cases-for-reactive-programming",children:"Use Cases for Reactive Programming"}),"\n",(0,s.jsx)(n.p,{children:"Reactive programming is used in a variety of use cases, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time streaming data: Reactive programming is ideal for handling real-time streaming data. It can be used to handle streams of data from sensors, social media, and other sources."}),"\n",(0,s.jsx)(n.li,{children:"Web development: Reactive programming can be used to handle asynchronous and non-blocking web requests. It can be used to build scalable and efficient web applications."}),"\n",(0,s.jsx)(n.li,{children:"Internet of Things: Reactive programming is ideal for handling streams of data from IoT devices. It can be used to handle large volumes of data and events in real-time."}),"\n",(0,s.jsx)(n.li,{children:"Big Data: Reactive programming can be used to handle large volumes of data in real-time. It can be used to process and analyze data in real-time."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"the-reactive-landscape",children:"The Reactive Landscape"}),"\n",(0,s.jsxs)(n.p,{children:["Reactive Landscape refers to the various tools, frameworks, and patterns that are used for building reactive systems. Reactive systems are designed to be responsive, resilient, elastic, and message-driven.\nThey are highly scalable and can handle a large number of requests with minimal resources.",(0,s.jsx)("br",{}),"\nThe Reactive Landscape includes several frameworks and tools, such as Reactive Streams, RxJava, Reactor, Spring Framework, Akka, and Ratpack.\nThese frameworks and tools provide developers with the necessary building blocks for building reactive systems."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Reactive Stream"})})})," is a low-level specification that defines the interaction between asynchronous stream processing with non-blocking backpressure.\nIt is a standard for building reactive systems in Java and has been incorporated into the JDK as java.util.concurrent.Flow in version 9."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"SmallRye Mutiny"})})}),"  defines two reactive types:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Multi"})})})," - represents streams of 0..* items (potentially unbounded)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Uni"})})})," - represents streams receiving either an item or a failure",(0,s.jsx)("br",{}),"\nMutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course\u2026 reactive applications!"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Project Reactor"})})})," is a Java framework for building reactive systems.\nIt builds directly on Reactive Streams and provides a complete set of building blocks for building reactive systems, including an event-driven programming model, backpressure handling, and support for multiple data sources."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"RxJava"})})})," is a library for composing asynchronous and event-based programs using observable sequences.\nIt allows developers to work with complex asynchronous data flows, with the ability to apply operations such as filtering, mapping, and combining to these flows."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Spring Framework 5.0"})})})," includes reactive features for building HTTP servers and clients.\nIt builds on Reactor and provides a familiar programming model for developers who are already familiar with Spring.\nSpring Framework 5.0 includes support for several network stacks, including Tomcat, Jetty, Netty, and Undertow."]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://vertx.io/",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Vert.x"})})})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://quarkus.io/",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"Quarkus"})})})})}),"\n",(0,s.jsx)(n.li,{children:"..."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);