"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[3391],{738:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=t(4848),s=t(8453);const a={sidebar_position:10},o="Hibernate Reactive",r={id:"smallrye-mutiny/implementations/hibernate-reactive",title:"Hibernate Reactive",description:"Hibernate Reactive 2.3.1.Final Reference Documentation",source:"@site/docs/smallrye-mutiny/implementations/hibernate-reactive.mdx",sourceDirName:"smallrye-mutiny/implementations",slug:"/smallrye-mutiny/implementations/hibernate-reactive",permalink:"/docs/smallrye-mutiny/implementations/hibernate-reactive",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Implementations",permalink:"/docs/smallrye-mutiny/implementations"},next:{title:"Auxiliary Software",permalink:"/docs/auxiliary-software"}},c={},l=[{value:"Introduction to Hibernate Reactive",id:"introduction-to-hibernate-reactive",level:2},{value:"Obtaining a reactive session factory",id:"obtaining-a-reactive-session-factory",level:3},{value:"CompletionStages",id:"completionstages",level:3},{value:"Mutiny",id:"mutiny",level:3},{value:"Obtaining a reactive session",id:"obtaining-a-reactive-session",level:3},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"hibernate-reactive",children:"Hibernate Reactive"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://hibernate.org/reactive/documentation/2.3/reference/html_single/",children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Hibernate Reactive 2.3.1.Final Reference Documentation"})})})}),"\n",(0,i.jsx)(n.p,{children:"Hibernate Reactive is a reactive API for Hibernate ORM, supporting non-blocking database drivers and a reactive style of interaction with the database."}),"\n",(0,i.jsxs)(n.p,{children:["The reactive stream is represented using a chain of Java ",(0,i.jsx)(n.a,{href:"/docs/smallrye-mutiny/guides",children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"CompletionStages"})})})," or Mutiny Unis and Multis."]}),"\n",(0,i.jsx)(n.p,{children:"Java persistence frameworks like JDBC, JPA and Hibernate ORM were designed to use blocking IO for interaction with the database, and are therefore not appropriate for use in a reactive environment. As far as we know, Hibernate Reactive is the first true ORM implementation designed to take advantage of non-blocking database clients. Out of the box, the Vert.x clients for PostgreSQL, MySQL, DB2, SQL Server, Oracle, and CockroachDB are supported, though the architecture is not limited to these drivers."}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-hibernate-reactive",children:"Introduction to Hibernate Reactive"}),"\n",(0,i.jsx)(n.h3,{id:"obtaining-a-reactive-session-factory",children:"Obtaining a reactive session factory"}),"\n",(0,i.jsx)(n.p,{children:"The first step to getting a reactive session is to obtain a JPA EntityManagerFactory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'EntityManagerFactory emf = Persistence.createEntityManagerFactory("example");\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now, unwrap() the reactive SessionFactory. If you want to use CompletionStages for chaining reactive operations, ask for a Stage.SessionFactory:"}),"\n",(0,i.jsx)(n.h3,{id:"completionstages",children:"CompletionStages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Stage.SessionFactory sessionFactory = emf.unwrap(Stage.SessionFactory.class);\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you prefer to use the Mutiny-based API, unwrap() the type Mutiny.SessionFactory:"}),"\n",(0,i.jsx)(n.h3,{id:"mutiny",children:"Mutiny"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Mutiny.SessionFactory sessionFactory = emf.unwrap(Mutiny.SessionFactory.class);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"obtaining-a-reactive-session",children:"Obtaining a reactive session"}),"\n",(0,i.jsxs)(n.p,{children:["Persistence operations are exposed via a reactive Session object.",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.strong,{children:"It\u2019s very important to understand that most operations of this interface are non-blocking, and execution of SQL against the database is never performed synchronously."})})}),"\n",(0,i.jsx)("br",{}),"Persistence operations that belong to a single unit of work must be chained by composition within a single reactive stream."]}),"\n",(0,i.jsx)(n.p,{children:"To obtain a reactive Session from the SessionFactory, use withSession():"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"sessionFactory.withSession(\n        session -> session.find(Book.class, id)\n                .invoke(\n                    book -> ... //do something with the book\n                )\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:"The resulting Session object is automatically associated with the current reactive stream, and so nested calls to withSession() in a given stream automatically obtain the same shared session."}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, you may use openSession(), but you must remember to close() the session when you\u2019re done. And you must take great care to only access each session from within exactly one Vert.x context. (See Sessions and Vert.x contexts more on this)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Uni<Session> sessionUni = sessionFactory.openSession();\nsessionUni.chain(\n        session -> session.find(Book.class, id)\n                .invoke(\n\t\t    book -> ... //do something with the book\n                )\n                .eventually(session::close)\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"http://jreact.com/index.php/2023/11/16/hibernate-reactive-completionstage-and-mutiny-example/",children:"http://jreact.com/index.php/2023/11/16/hibernate-reactive-completionstage-and-mutiny-example/"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);