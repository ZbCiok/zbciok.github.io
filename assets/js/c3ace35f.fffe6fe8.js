"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[5504],{8522:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var n=r(4848),a=r(8453);const s={sidebar_position:2},c="Asynchronicity",o={id:"streams/reactive-streams/asynchronicity",title:"Asynchronicity",description:"Approaches for Asynchronous Programming",source:"@site/docs/streams/reactive-streams/asynchronicity.mdx",sourceDirName:"streams/reactive-streams",slug:"/streams/reactive-streams/asynchronicity",permalink:"/docs/streams/reactive-streams/asynchronicity",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Callbacks in Java",permalink:"/docs/streams/reactive-streams/callbacks-in-java"},next:{title:"Backpressure",permalink:"/docs/streams/reactive-streams/backpressure"}},i={},u=[{value:"Approaches for Asynchronous Programming",id:"approaches-for-asynchronous-programming",level:2},{value:"1. Callbacks with CompletableFuture",id:"1-callbacks-with-completablefuture",level:4},{value:"2. Asynchronous Programming with Future and ExecutorService",id:"2-asynchronous-programming-with-future-and-executorservice",level:4},{value:"1. Callbacks with CompletableFuture",id:"1-callbacks-with-completablefuture-1",level:3},{value:"Output",id:"output",level:4},{value:"2. Asynchronous Programming with Future and ExecutorService",id:"2-asynchronous-programming-with-future-and-executorservice-1",level:3},{value:"Output",id:"output-1",level:4}];function l(t){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"asynchronicity",children:"Asynchronicity"}),"\n",(0,n.jsx)(e.h2,{id:"approaches-for-asynchronous-programming",children:"Approaches for Asynchronous Programming"}),"\n",(0,n.jsx)(e.p,{children:"There are two commonly used approaches for Asynchronous Programming as mentioned below:"}),"\n",(0,n.jsx)(e.h4,{id:"1-callbacks-with-completablefuture",children:"1. Callbacks with CompletableFuture"}),"\n",(0,n.jsx)(e.h4,{id:"2-asynchronous-programming-with-future-and-executorservice",children:"2. Asynchronous Programming with Future and ExecutorService"}),"\n",(0,n.jsx)(e.h3,{id:"1-callbacks-with-completablefuture-1",children:"1. Callbacks with CompletableFuture"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"The CompletableFuture is a class introduced in Java 8 that facilitates asynchronous programming using the callback-based approach."}),"\n",(0,n.jsx)(e.li,{children:"It represents a promise that may be asynchronously completed with the value or an exception."}),"\n"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-java",children:'//Java program to demonstrate the use of the CompletableFuture\nimport java.io.*;\nimport java.util.concurrent.CompletableFuture;\n\npublic class CF {\n\n\tpublic static void main(String[] args) {\n\t\tCompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n\t\t\ttry {\n\t\t\t\tThread.sleep(200);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn "Hello, CompletableFuture!";\n\t\t});\n\t\tfuture.thenAccept(result -> System.out.println("The Result: " + result));\n\t\ttry {\n\t\t\tThread.sleep(300);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n'})}),"\n",(0,n.jsx)(e.h4,{id:"output",children:"Output"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-java",children:"The Result: Hello, CompletableFuture!\n"})}),"\n",(0,n.jsx)(e.h3,{id:"2-asynchronous-programming-with-future-and-executorservice-1",children:"2. Asynchronous Programming with Future and ExecutorService"}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"The Future and ExecutorService can be used for the asynchronous programming in a more traditional way."}),"\n",(0,n.jsx)(e.li,{children:"The ExecutorService allows you to submit tasks for the asynchronous execution."}),"\n"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-java",children:'//Java program to demonstrate Asynchronous\n// Programming with Future and ExecutorService\nimport java.io.*;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class FE {\n\n\tpublic static void main(String[] args) {\n\t\tExecutorService executor = Executors.newSingleThreadExecutor();\n\t\tFuture<String> future = executor.submit(() -> {\n\t\t\ttry {\n\t\t\t\tThread.sleep(200);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn "Hello, Future!";\n\t\t});\n\t\ttry {\n\t\t\tString result = future.get();\n\t\t\tSystem.out.println("The Result: " + result);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\texecutor.shutdown();\n\t}\n}\n'})}),"\n",(0,n.jsx)(e.h4,{id:"output-1",children:"Output"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-java",children:"The Result: Hello, Future!\n"})})]})}function h(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},8453:(t,e,r)=>{r.d(e,{R:()=>c,x:()=>o});var n=r(6540);const a={},s=n.createContext(a);function c(t){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:c(t.components),n.createElement(s.Provider,{value:e},t.children)}}}]);