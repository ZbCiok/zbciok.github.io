"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[2194],{6777:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"streams/ksqlDB/Examples/materialized-view","title":"Materialized View","description":"Create stream for your data","source":"@site/docs/streams/ksqlDB/Examples/materialized-view.mdx","sourceDirName":"streams/ksqlDB/Examples","slug":"/streams/ksqlDB/Examples/materialized-view","permalink":"/docs/streams/ksqlDB/Examples/materialized-view","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"sidebar_position":40},"sidebar":"tutorialSidebar","previous":{"title":"ksqlDB Quickstart","permalink":"/docs/streams/ksqlDB/Examples/ksqldb-quickstart"},"next":{"title":"References","permalink":"/docs/streams/ksqlDB/references"}}');var n=a(4848),r=a(8453);const i={sidebar_position:40},o="Materialized View",l={},d=[{value:"Create stream for your data",id:"create-stream-for-your-data",level:2},{value:"See Editor:",id:"see-editor",level:3},{value:"See Streams:",id:"see-streams",level:3},{value:"See Topics:",id:"see-topics",level:3},{value:"Materialized view",id:"materialized-view-1",level:2},{value:"Insert some data and observe the changes:",id:"insert-some-data-and-observe-the-changes",level:3},{value:"Next:",id:"next",level:3}];function m(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"materialized-view",children:"Materialized View"})}),"\n",(0,n.jsx)(s.h2,{id:"create-stream-for-your-data",children:"Create stream for your data"}),"\n",(0,n.jsxs)(s.p,{children:["The first step in creating a materialized view using ksqlDB is to create a stream for pushing data. This can be done by using ",(0,n.jsx)(s.a,{href:"/docs/streams/ksqlDB/confluent-platform",children:(0,n.jsx)(s.em,{children:(0,n.jsx)(s.strong,{children:"Confluent UI"})})}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"CREATE STREAM company_stream (\n  id VARCHAR KEY,\n  name VARCHAR,\n  revenue DOUBLE\n) WITH (\n  kafka_topic = 'company',\n  partitions = 2,\n  value_format = 'json'\n);\n"})}),"\n",(0,n.jsx)(s.h3,{id:"see-editor",children:"See Editor:"}),"\n",(0,n.jsx)("img",{src:"/img/streams/ksqlDB/examples/create-stream-company_stream-01.png",width:"700 px",alt:"create-stream-company_stream-01.png"}),"\n",(0,n.jsx)(s.h3,{id:"see-streams",children:"See Streams:"}),"\n",(0,n.jsx)("img",{src:"/img/streams/ksqlDB/examples/ksqldb1-streams-01.png",width:"700 px",alt:"ksqldb1-streams-01.png"}),"\n",(0,n.jsx)(s.h3,{id:"see-topics",children:"See Topics:"}),"\n",(0,n.jsx)("img",{src:"/img/streams/ksqlDB/examples/topics-01.png",width:"700 px",alt:"topics-01.png"}),"\n",(0,n.jsx)(s.h2,{id:"materialized-view-1",children:"Materialized view"}),"\n",(0,n.jsx)(s.p,{children:"Once the stream is set up, we can move on to creating a materialized view. This will consume events from the stream and use them to construct and maintain an updated state."}),"\n",(0,n.jsx)(s.p,{children:"Go to Editor:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"SET 'auto.offset.reset' = 'earliest';\n\nCREATE TABLE company_latest AS\nSELECT\n  id,\n  LATEST_BY_OFFSET(name) as name,\n  LATEST_BY_OFFSET(revenue) AS revenue\nFROM company_stream\nGROUP BY id\nEMIT CHANGES;\n"})}),"\n",(0,n.jsx)("img",{src:"/img/streams/ksqlDB/examples/create-table-company_latest-01.png",width:"700 px",alt:"create-table-company_latest-01.png"}),"\n",(0,n.jsx)(s.h3,{id:"insert-some-data-and-observe-the-changes",children:"Insert some data and observe the changes:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"INSERT INTO company_stream (id, name, revenue) VALUES ('AMZ', 'Amazon', 100);\nINSERT INTO company_stream (id, name, revenue) VALUES ('AMZ', 'Amazon', 450);\nINSERT INTO company_stream (id, name, revenue) VALUES ('GOG', 'Google', 90);\nINSERT INTO company_stream (id, name, revenue) VALUES ('APL', 'Apple', 130);\nINSERT INTO company_stream (id, name, revenue) VALUES ('GOG', 'Google', 99);\nINSERT INTO company_stream (id, name, revenue) VALUES ('APL', 'Apple', 139);\n"})}),"\n",(0,n.jsx)(s.h3,{id:"next",children:"Next:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"SELECT *\nFROM company_latest;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Result:"}),"\n",(0,n.jsx)("img",{src:"/img/streams/ksqlDB/examples/result-01.png",width:"700 px",alt:"result-01.png"})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>i,x:()=>o});var t=a(6540);const n={},r=t.createContext(n);function i(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);