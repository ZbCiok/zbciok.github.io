"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[5124],{3262:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier","title":"groupingBy classifier","description":"Data","source":"@site/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier.mdx","sourceDirName":"streams/java-8-streams/collectors/grouping-by","slug":"/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier","permalink":"/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"groupingBy","permalink":"/docs/streams/java-8-streams/collectors/grouping-by"},"next":{"title":"groupingBy classifier collector","permalink":"/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-collector"}}');var s=r(4848),a=r(8453);const o={sidebar_position:1},l="groupingBy classifier",i={},p=[{value:"Data",id:"data",level:2},{value:"Examples",id:"examples",level:2},{value:"groupingByAge()",id:"groupingbyage",level:3},{value:"groupingByDepartment()",id:"groupingbydepartment",level:3},{value:"groupingByEmployeeLength()",id:"groupingbyemployeelength",level:3},{value:"groupingByName()",id:"groupingbyname",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"groupingby-classifier",children:"groupingBy classifier"})}),"\n",(0,s.jsx)(n.h2,{id:"data",children:"Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'    List<Employee> employees = List.of(\n            new Employee(1, "Alex", 30, new Department(1, "HR")),\n            new Employee(2, "Alex", 36, new Department(1, "HR")),\n            new Employee(3, "David", 30, new Department(1, "HR")),\n            new Employee(4, "Andrew", 30, new Department(2, "Finance")),\n            new Employee(5, "Edward", 31, new Department(2, "Finance")),\n            new Employee(6, "Nathan",42, new Department(3, "ADMIN")),\n            new Employee(7, "Frank",23 , new Department(3, "ADMIN")));\n'})}),"\n",(0,s.jsx)(n.p,{children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"\ngroupingBy(Function<? super T,? extends K> classifier)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"groupingbyage",children:"groupingByAge()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"    // Grouping all employees by age\n    public void groupingByAge() {\n        Map<Integer, List<Employee>> result = employees.stream()\n                .collect(Collectors.groupingBy(Employee::getAge));\n\n        System.out.println(result);\n    }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"groupingbydepartment",children:"groupingByDepartment()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"    // Grouping all employees by department\n    public void groupingByDepartment() {\n        Map<Department, List<Employee>> result = employees.stream()\n            .collect(Collectors.groupingBy(Employee::getDepartment));\n\n        System.out.println(result);\n    }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"groupingbyemployeelength",children:"groupingByEmployeeLength()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'    public void groupingByEmployeeLength() {\n        Map<String, List<Employee>> result = employees.stream()\n                .collect(Collectors.groupingBy(Employee::getName));\n\n        result.forEach((k, v) -> System.out.println("key.length = " + k.length() + ", key = " + k));\n    }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"groupingbyname",children:"groupingByName()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"    public void groupingByName() {\n        Map<String, List<Employee>> result = employees.stream()\n                .collect(Collectors.groupingBy(Employee::getName));\n\n        System.out.println(result);\n    }\n"})})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);