"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[717],{1828:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"messaging/rabbitmq/examples/headers-exchange-in-amqp","title":"Headers Exchange in AMQP","description":"Description","source":"@site/docs/messaging/rabbitmq/examples/headers-exchange-in-amqp.mdx","sourceDirName":"messaging/rabbitmq/examples","slug":"/messaging/rabbitmq/examples/headers-exchange-in-amqp","permalink":"/docs/messaging/rabbitmq/examples/headers-exchange-in-amqp","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":220,"frontMatter":{"sidebar_position":220},"sidebar":"tutorialSidebar","previous":{"title":"Topic Exchange in AMQP","permalink":"/docs/messaging/rabbitmq/examples/topic-exchange-in-amqp"},"next":{"title":"Fanout Exchange in AMQP","permalink":"/docs/messaging/rabbitmq/examples/fanout-exchange-in-amqp"}}');var r=a(4848),i=a(8453);const c={sidebar_position:220},s="Headers Exchange in AMQP",o={},l=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Install RabbitMQ on Docker",id:"install-rabbitmq-on-docker",level:2},{value:"docker-compose.yml:",id:"docker-composeyml",level:4},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"CommonConfigs.java",id:"commonconfigsjava",level:3},{value:"ConnectionManager.java",id:"connectionmanagerjava",level:3},{value:"HeadersExchange.java",id:"headersexchangejava",level:3},{value:"Run",id:"run",level:2},{value:"Output",id:"output",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"headers-exchange-in-amqp",children:"Headers Exchange in AMQP"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)("img",{src:"/img/messaging/rabbitmq/rabbitmq-headers-exchange-01.png",width:"500 px",alt:"rabbitmq-headers-exchange-01.png"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One or more Queues bind (linked) to a Headers Exchange using header properties( H )."}),"\n",(0,r.jsx)(n.li,{children:"A Producer sends a message to this Exchange with a Header property (MH)."}),"\n",(0,r.jsx)(n.li,{children:"If MH matches with H, the message is forwarded to the Queue. The Headers matching algorithm is discussed next."}),"\n",(0,r.jsx)(n.li,{children:"The consumers listening to the Queue receives the message and processes it."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JDK 17+"}),"\n",(0,r.jsx)(n.li,{children:"RabbitMQ on Docker"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"install-rabbitmq-on-docker",children:"Install RabbitMQ on Docker"}),"\n",(0,r.jsx)(n.h4,{id:"docker-composeyml",children:"docker-compose.yml:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'version: "3.6"\n# https://docs.docker.com/compose/compose-file/\n\nservices:\n  rabbitmq:\n    image: \'rabbitmq:3.6-management-alpine\'\n    ports:\n      # The standard AMQP protocol port\n      - \'5672:5672\'\n      # HTTP management UI\n      - \'15672:15672\'\n    environment:\n      # The location of the RabbitMQ server.  "amqp" is the protocol;\n      # "rabbitmq" is the hostname.  Note that there is not a guarantee\n      # that the server will start first!  Telling the pika client library\n      # to try multiple times gets around this ordering issue.\n      AMQP_URL: \'amqp://rabbitmq?connection_attempts=5&retry_delay=5\'\n      RABBITMQ_DEFAULT_USER: "guest"\n      RABBITMQ_DEFAULT_PASS: "guest"\n    networks:\n      - network\n#    volumes:\n#      - ./.docker/rabbitmq/etc/:/etc/rabbitmq/\n#      - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/\n#      - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/\n\nnetworks:\n  # Declare our private network.  We must declare one for the magic\n  # Docker DNS to work, but otherwise its default settings are fine.\n  network: {}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"http://localhost:15672/\n"})}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:".\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 rabbitmq-docker\n\u2502\xa0\xa0 \u2514\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 readme.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u2514\u2500\u2500 java\n            \u2514\u2500\u2500 com\n                \u2514\u2500\u2500 amqp\n                    \u251c\u2500\u2500 basic\n                    \u2502\xa0\xa0 \u2514\u2500\u2500 queue\n                    \u2502\xa0\xa0     \u2514\u2500\u2500 CommonConfigs.java\n                    \u2514\u2500\u2500 exchanges\n                        \u251c\u2500\u2500 ConnectionManager.java\n                        \u2514\u2500\u2500 HeadersExchange.java\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>rabbitmq-examples</groupId>\n  <artifactId>rabbitmq-headers-exchange</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <description>RabbitMQ code examples using the amqp-client</description>\n\n  <properties>\n    <maven.compiler.target>22</maven.compiler.target>\n    <maven.compiler.source>22</maven.compiler.source>\n    <java.version>22</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.rabbitmq</groupId>\n      <artifactId>amqp-client</artifactId>\n      <version>5.24.0</version>\n    </dependency>\n  </dependencies>\n\n</project>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"commonconfigsjava",children:"CommonConfigs.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.amqp.basic.queue;\n\npublic class CommonConfigs {\n  public static final String DEFAULT_QUEUE = "Queue-1";\n  public static final String AMQP_URL = "amqp://guest:guest@localhost:5672/";\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"connectionmanagerjava",children:"ConnectionManager.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.amqp.exchanges;\n\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class ConnectionManager {\n\n  private static Connection connection = null;\n\n  /**\n   * Create RabbitMQ Connection\n   *\n   * @return Connection\n   */\n  public static Connection getConnection() {\n    if (connection == null) {\n      try {\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        connection = connectionFactory.newConnection("amqp://guest:guest@localhost:5672/");\n      } catch (IOException | TimeoutException e) {\n        e.printStackTrace();\n      }\n    }\n    return connection;\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"headersexchangejava",children:"HeadersExchange.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.amqp.exchanges;\n\nimport com.rabbitmq.client.AMQP.BasicProperties;\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\npublic class HeadersExchange {\n\n  /**\n   * Declare a Headers Exchange.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void declareExchange() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    //Declare my-header-exchange\n    channel.exchangeDeclare("my-header-exchange", BuiltinExchangeType.HEADERS, true);\n    channel.close();\n  }\n\n  /**\n   * Declare 3 Queues to demonstrate the example.\n   *\n   * @throws TimeoutException\n   */\n  public static void declareQueues() throws IOException, TimeoutException {\n    //Create a channel - do not share the Channel instance\n    Channel channel = ConnectionManager.getConnection().createChannel();\n\n    //Create the Queues\n    channel.queueDeclare("HealthQ", true, false, false, null);\n    channel.queueDeclare("SportsQ", true, false, false, null);\n    channel.queueDeclare("EducationQ", true, false, false, null);\n\n    channel.close();\n  }\n\n  /**\n   * Set the Bindings between Exchange and Queues.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void declareBindings() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    //Create bindings - (queue, exchange, routingKey, headers) - routingKey != null\n    Map<String, Object> healthArgs = new HashMap<>();\n    healthArgs.put("x-match", "any"); //Match any of the header\n    healthArgs.put("h1", "Header1");\n    healthArgs.put("h2", "Header2");\n    channel.queueBind("HealthQ", "my-header-exchange", "", healthArgs);\n\n    Map<String, Object> sportsArgs = new HashMap<>();\n    sportsArgs.put("x-match", "all"); //Match all of the header\n    sportsArgs.put("h1", "Header1");\n    sportsArgs.put("h2", "Header2");\n    channel.queueBind("SportsQ", "my-header-exchange", "", sportsArgs);\n\n    Map<String, Object> educationArgs = new HashMap<>();\n    educationArgs.put("x-match", "any"); //Match any of the header\n    educationArgs.put("h1", "Header1");\n    educationArgs.put("h2", "Header2");\n    channel.queueBind("EducationQ", "my-header-exchange", "", educationArgs);\n\n    channel.close();\n  }\n\n  /**\n   * Subscribe the Queues.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void subscribeMessage() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    channel.basicConsume("HealthQ", true, ((consumerTag, message) -> {\n      System.out.println("\\n\\n=========== Health Queue ==========");\n      System.out.println(consumerTag);\n      System.out.println("HealthQ: " + new String(message.getBody()));\n      System.out.println(message.getEnvelope());\n    }), consumerTag -> {\n      System.out.println(consumerTag);\n    });\n\n    channel.basicConsume("SportsQ", true, ((consumerTag, message) -> {\n      System.out.println("\\n\\n ============ Sports Queue ==========");\n      System.out.println(consumerTag);\n      System.out.println("SportsQ: " + new String(message.getBody()));\n      System.out.println(message.getEnvelope());\n    }), consumerTag -> {\n      System.out.println(consumerTag);\n    });\n\n    channel.basicConsume("EducationQ", true, ((consumerTag, message) -> {\n      System.out.println("\\n\\n ============ Education Queue ==========");\n      System.out.println(consumerTag);\n      System.out.println("EducationQ: " + new String(message.getBody()));\n      System.out.println(message.getEnvelope());\n    }), consumerTag -> {\n      System.out.println(consumerTag);\n    });\n  }\n\n  public static void publishMessage() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n\n    String message = "Header Exchange example 1";\n    Map<String, Object> headerMap = new HashMap<>();\n    headerMap.put("h1", "Header1");\n    headerMap.put("h3", "Header3");\n    BasicProperties properties = new BasicProperties()\n        .builder().headers(headerMap).build();\n    channel.basicPublish("my-header-exchange", "", properties, message.getBytes());\n\n    message = "Header Exchange example 2";\n    headerMap.put("h2", "Header2");\n    properties = new BasicProperties()\n        .builder().headers(headerMap).build();\n    channel.basicPublish("my-header-exchange", "", properties, message.getBytes());\n    channel.close();\n  }\n\n  public static void main(String[] args) throws IOException, TimeoutException {\n    HeadersExchange.declareQueues();\n    HeadersExchange.declareExchange();\n    HeadersExchange.declareBindings();\n\n    //Threads created to publish-subscribe asynchronously\n    Thread subscribe = new Thread() {\n      @Override\n      public void run() {\n        try {\n          HeadersExchange.subscribeMessage();\n        } catch (IOException | TimeoutException e) {\n          e.printStackTrace();\n        }\n      }\n    };\n\n    Thread publish = new Thread() {\n      @Override\n      public void run() {\n        try {\n          HeadersExchange.publishMessage();\n        } catch (IOException | TimeoutException e) {\n          e.printStackTrace();\n        }\n      }\n    };\n\n    subscribe.start();\n    publish.start();\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static void main(String[] args) throws IOException, TimeoutException { ...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"=========== Health Queue ==========\namq.ctag-OGzUfuJGaGMSSwlhBDrsKg\nHealthQ: Header Exchange example 1\nEnvelope(deliveryTag=1, redeliver=false, exchange=my-header-exchange, routingKey=)\n\n\n=========== Health Queue ==========\namq.ctag-OGzUfuJGaGMSSwlhBDrsKg\nHealthQ: Header Exchange example 2\nEnvelope(deliveryTag=2, redeliver=false, exchange=my-header-exchange, routingKey=)\n\n\n ============ Sports Queue ==========\namq.ctag-nAg7T-JAqEgSPFihJNKQwQ\nSportsQ: Header Exchange example 2\nEnvelope(deliveryTag=3, redeliver=false, exchange=my-header-exchange, routingKey=)\n\n\n ============ Education Queue ==========\namq.ctag-vovwDsMTh2_SGTM1ykY42A\nEducationQ: Header Exchange example 1\nEnvelope(deliveryTag=4, redeliver=false, exchange=my-header-exchange, routingKey=)\n\n\n ============ Education Queue ==========\namq.ctag-vovwDsMTh2_SGTM1ykY42A\nEducationQ: Header Exchange example 2\nEnvelope(deliveryTag=5, redeliver=false, exchange=my-header-exchange, routingKey=)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Source Code:"})," ",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/rabbitmq/rabbitmq-headers-exchange",children:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/rabbitmq/rabbitmq-headers-exchange"})})})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>s});var t=a(6540);const r={},i=t.createContext(r);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);