"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1889],{5948:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"apache-flink/Examples/postgres-flink-table","title":"Postgres to FlinkTable","description":"Description","source":"@site/docs/apache-flink/Examples/postgres-flink-table.mdx","sourceDirName":"apache-flink/Examples","slug":"/apache-flink/Examples/postgres-flink-table","permalink":"/docs/apache-flink/Examples/postgres-flink-table","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":34,"frontMatter":{"sidebar_position":34},"sidebar":"tutorialSidebar","previous":{"title":"Read-Write Dynamic Table","permalink":"/docs/apache-flink/Examples/read-write-dynamic-table"},"next":{"title":"Session Window","permalink":"/docs/apache-flink/Examples/session-window"}}');var s=t(4848),i=t(8453);const l={sidebar_position:34},c="Postgres to FlinkTable",a={},o=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Setup Data Source",id:"setup-data-source",level:3},{value:"- Create Docker PostgreSQL",id:"--create-docker-postgresql",level:4},{value:"- Create table with data",id:"--create-table-with-data",level:4},{value:"Project Structure",id:"project-structure-1",level:2},{value:"jdbcFlinkTable.java",id:"jdbcflinktablejava",level:3},{value:"Run &amp; Output",id:"run--output",level:2},{value:"Source Code: <br></br> <em><strong>https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/postgres-flinkTable</strong></em>",id:"source-code--httpsgithubcomzbciokzjc-examplestreemainstreamsflinkpostgres-flinktable",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"postgres-to-flinktable",children:"Postgres to FlinkTable"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"In the steps described below we will create a batch transformation that will take information from one source (postgresql jdbc table) and write information to another place - Flink table."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JDK 11"}),"\n",(0,s.jsx)(n.li,{children:"Maven"}),"\n",(0,s.jsx)(n.li,{children:"IDE (IntelliJ IDEA, Eclipse)"}),"\n",(0,s.jsx)(n.li,{children:"Flink 1.20.0"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(n.h3,{id:"setup-data-source",children:"Setup Data Source"}),"\n",(0,s.jsx)(n.h4,{id:"--create-docker-postgresql",children:"- Create Docker PostgreSQL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'version: "3.8"\nservices:\npostgres:\n    image: postgres:14-alpine\n    restart: always\n    environment:\n        - POSTGRES_USER=root\n        - POSTGRES_PASSWORD=secret\n    ports:\n        - "5432:5432"\n    volumes:\n        - db:/var/lib/postgresql/data\nvolumes:\n    db:\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker compose -f docker-compose.yaml up\n"})}),"\n",(0,s.jsx)(n.h4,{id:"--create-table-with-data",children:"- Create table with data"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Start PostgreSQL terminal:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// docker exec -ti {container} psql -d {db} -U {user}\n// in our case:\n$ docker exec -ti jdbc-flinktable-postgres-1 psql -d postgres -U root\npsql (14.14)\nType "help" for help.\n\npostgres=#\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Create table:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'CREATE TABLE clients (\n\tid int4 NULL,\n\t"name" varchar NULL\n);\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Insert data into ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"clients"})}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"INSERT INTO clients (id, name) VALUES (1, 'Alice');\nINSERT INTO clients (id, name) VALUES (2, 'Bob');\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Check inserting:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"SELECT * FROM clients;\n id | name\n----+-------\n   1 | Alice\n   2 | Bob\n(2 rows)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-structure-1",children:"Project Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:".\n\u251c\u2500\u2500 dependency-reduced-pom.xml\n\u251c\u2500\u2500 docker-compose.yaml\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 java\n        \u2502\xa0\xa0 \u2514\u2500\u2500 com\n        \u2502\xa0\xa0     \u2514\u2500\u2500 jreact\n        \u2502\xa0\xa0         \u2514\u2500\u2500 flink\n        \u2502\xa0\xa0             \u2514\u2500\u2500 jdbcFlinkTable.java\n        \u2514\u2500\u2500 resources\n            \u251c\u2500\u2500 log4j\n            \u2514\u2500\u2500 log4j.properties.txt\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jdbcflinktablejava",children:"jdbcFlinkTable.java"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public class PostgresFlinkTable {\n\n    public static void main(String[] args) throws Exception {\n\n        EnvironmentSettings settings = EnvironmentSettings\n                .newInstance()\n                .inBatchMode()\n                .build();\n        final TableEnvironment tEnv = TableEnvironment.create(settings);\n\n        tEnv.executeSql("CREATE TABLE DClients ("\n                + " id INT, "\n                + " name VARCHAR(255) "\n                + " ) WITH ( "\n                + " \'connector\' = \'jdbc\', "\n                + " \'url\' = \'jdbc:postgresql://localhost:5432/postgres\', "\n                + " \'username\' = \'root\', "\n                + " \'table-name\' = \'clients\', "\n                + " \'password\' = \'secret\'"\n                +  ")");\n\n        tEnv.sqlQuery("SELECT * FROM DClients")\n                .execute()\n                .print();\n\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"run--output",children:"Run & Output"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"+-------------+--------------------------------+\n|          id |                           name |\n+-------------+--------------------------------+\n|           1 |                          Alice |\n|           2 |                            Bob |\n+-------------+--------------------------------+\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"source-code--httpsgithubcomzbciokzjc-examplestreemainstreamsflinkpostgres-flinktable",children:["Source Code: ",(0,s.jsx)("br",{})," ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/postgres-flinkTable",children:"https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/postgres-flinkTable"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var r=t(6540);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);