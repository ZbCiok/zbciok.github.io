"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[6156],{267:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var o=e(4848),r=e(8453);const i={sidebar_position:1},c="spring-webflux-mongodb-crud",d={id:"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud",title:"spring-webflux-mongodb-crud",description:"Description",source:"@site/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud.mdx",sourceDirName:"project-reactor/project-reactor-implemented-in/spring-webflux",slug:"/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud",permalink:"/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"spring-webflux",permalink:"/docs/project-reactor/project-reactor-implemented-in/spring-webflux"}},s={},a=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"application.properties",id:"applicationproperties",level:3},{value:"Entity",id:"entity",level:3},{value:"<em><strong>Product.java</strong></em> class which will be the MongoDB document.",id:"productjava-class-which-will-be-the-mongodb-document",level:4},{value:"<em><strong>ProductDto.java</strong></em>",id:"productdtojava",level:3},{value:"<em><strong>ProductRepository.java</strong></em>",id:"productrepositoryjava",level:3},{value:"<em><strong>ProductService.java</strong></em>",id:"productservicejava",level:3},{value:"<em><strong>AppUtils.java</strong></em>",id:"apputilsjava",level:3},{value:"<em><strong>ProductController.java</strong></em>",id:"productcontrollerjava",level:3},{value:"Running",id:"running",level:2},{value:"<em><strong><strong>mvn spring-boot</strong></strong></em>",id:"mvn-spring-boot",level:4},{value:"In Postman:",id:"in-postman",level:4},{value:"Create Operation",id:"create-operation",level:4},{value:"mongodb:",id:"mongodb",level:4},{value:"Analogously:",id:"analogously",level:4},{value:"Source code:",id:"source-code",level:3}];function p(t){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"spring-webflux-mongodb-crud",children:"spring-webflux-mongodb-crud"}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This Example is Spring WebFlux non-blocking, asynchronous, and event-driven  application.\nWe are going to build REST APIs using Spring Boot WebFlux and MongoDB. Using an API call, we will perform a Create, Read, Update, and Delete (CRUD) operation."}),"\n",(0,o.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Java 17+"}),"\n",(0,o.jsx)(n.li,{children:"Spring Boot 3.2.3"}),"\n",(0,o.jsx)(n.li,{children:"MongoDB 7"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)("img",{src:"/img/project-reactor/spring-webflux/spring-webflux-mongodb-crud-1-proj-struct.png",alt:"spring-webflux-mongodb-crud-1-proj-struct.png"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n\t\t xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.2.3</version>\n\t\t<relativePath/> \x3c!-- lookup parent from repository --\x3e\n\t</parent>\n\n\t<groupId>zjc.examples</groupId>\n\t<artifactId>spring-webflux-mongodb-crud-02</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>springmongodb</name>\n\n\t<description>Demo project for Spring Boot MongoDB CRUD API</description>\n\n\t<properties>\n\t\t<java.version>17</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-webflux</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.projectreactor</groupId>\n\t\t\t<artifactId>reactor-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<excludes>\n\t\t\t\t\t\t<exclude>\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\n\t\t\t\t\t\t</exclude>\n\t\t\t\t\t</excludes>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"applicationproperties",children:"application.properties"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"spring.data.mongodb.host=localhost\nspring.data.mongodb.port=27017\nspring.data.mongodb.database=mydb\n"})}),"\n",(0,o.jsx)(n.h3,{id:"entity",children:"Entity"}),"\n",(0,o.jsxs)(n.h4,{id:"productjava-class-which-will-be-the-mongodb-document",children:[(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Product.java"})})," class which will be the MongoDB document."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'package zjc.examples.spring.webflux.mongodb.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Document(collection = "products")\npublic class Product {\n    // The ID of the product\n    @Id\n    private String id;\n\n    // The name of the product\n    private String name;\n\n    // The quantity of the product\n    private int qty;\n\n    // The price of the product\n    private double price;\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"productdtojava",children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"ProductDto.java"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"package zjc.examples.spring.webflux.mongodb.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ProductDto {\n\n    // The ID of the product\n    private String id;\n\n    // The name of the product\n    private String name;\n\n    // The quantity of the product\n    private int qty;\n\n    // The price of the product\n    private double price;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"productrepositoryjava",children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"ProductRepository.java"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"package zjc.examples.spring.webflux.mongodb.repository;\n\nimport zjc.examples.spring.webflux.mongodb.entity.Product;\nimport org.springframework.data.mongodb.repository.ReactiveMongoRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ProductRepository extends ReactiveMongoRepository<Product, String> {\n\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"productservicejava",children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"ProductService.java"})})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Mono"})," and ",(0,o.jsx)(n.strong,{children:"Flux"})," types represent asynchronous sequence of elements.\nWhere ",(0,o.jsx)(n.strong,{children:"Mono"})," represents a stream of 0 or 1 element and ",(0,o.jsx)(n.strong,{children:"Flux"})," is for a stream of 0 to N elements."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"package zjc.examples.spring.webflux.mongodb.service;\n\nimport zjc.examples.spring.webflux.mongodb.dto.ProductDto;\nimport zjc.examples.spring.webflux.mongodb.repository.ProductRepository;\nimport zjc.examples.spring.webflux.mongodb.utils.AppUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository repository;\n\n    // Get all products\n    public Flux<ProductDto> getProducts(){\n        return repository.findAll().map(AppUtils::entityToDto);\n    }\n\n    // Get product using Id\n    public Mono<ProductDto> getProduct(String id){\n        return repository.findById(id).map(AppUtils::entityToDto);\n    }\n\n    // Create Product\n    public Mono<ProductDto> saveProduct(Mono<ProductDto> productDtoMono){\n        return  productDtoMono.map(AppUtils::dtoToEntity)\n                .flatMap(repository::insert)\n                .map(AppUtils::entityToDto);\n    }\n\n    // Update Product\n    public Mono<ProductDto> updateProduct(Mono<ProductDto> productDtoMono, String id){\n        return repository.findById(id)\n                .flatMap(p -> productDtoMono.map(AppUtils::dtoToEntity)\n                        .doOnNext(e -> e.setId(id)))\n                .flatMap(repository::save)\n                .map(AppUtils::entityToDto);\n    }\n\n    // Delete Product\n    public Mono<Void> deleteProduct(String id){\n        return repository.deleteById(id);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"apputilsjava",children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"AppUtils.java"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"package zjc.examples.spring.webflux.mongodb.utils;\n\nimport zjc.examples.spring.webflux.mongodb.dto.ProductDto;\nimport zjc.examples.spring.webflux.mongodb.entity.Product;\nimport org.springframework.beans.BeanUtils;\n\n// Utility class for converting between Product and ProductDto objects\npublic class AppUtils {\n\n    // Convert Product entity to ProductDto\n    public static ProductDto entityToDto(Product product) {\n        ProductDto productDto = new ProductDto();\n        BeanUtils.copyProperties(product, productDto);\n        return productDto;\n    }\n\n    // Convert ProductDto to Product entity\n    public static Product dtoToEntity(ProductDto productDto) {\n        Product product = new Product();\n        BeanUtils.copyProperties(productDto, product);\n        return product;\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"productcontrollerjava",children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"ProductController.java"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'package zjc.examples.spring.webflux.mongodb.controller;\n\nimport zjc.examples.spring.webflux.mongodb.dto.ProductDto;\nimport zjc.examples.spring.webflux.mongodb.service.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n// Controller class for managing Product-related HTTP requests\n@RestController\n@RequestMapping("/products")\npublic class ProductController {\n\n    @Autowired\n    private ProductService service;\n\n    // Get all products\n    @GetMapping\n    public Flux<ProductDto> getProducts(){\n        return service.getProducts();\n    }\n\n    // GET product using Id\n    @GetMapping("/{id}")\n    public Mono<ProductDto> getProduct(@PathVariable String id){\n        return service.getProduct(id);\n    }\n\n    // Create new Product\n    @PostMapping\n    public Mono<ProductDto> saveProduct(@RequestBody Mono<ProductDto> productDtoMono){\n        return service.saveProduct(productDtoMono);\n    }\n\n    // Update product using Id\n    @PutMapping("/update/{id}")\n    public Mono<ProductDto> updateProduct(@RequestBody Mono<ProductDto> productDtoMono, @PathVariable String id){\n        return service.updateProduct(productDtoMono, id);\n    }\n\n    // Delete Product using Id\n    @DeleteMapping("/delete/{id}")\n    public Mono<Void> deleteProduct(@PathVariable String id){\n        return service.deleteProduct(id);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"running",children:"Running"}),"\n",(0,o.jsx)(n.h4,{id:"mvn-spring-boot",children:(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:(0,o.jsxs)(n.strong,{children:["mvn spring-boot",":run"]})})})}),"\n",(0,o.jsx)(n.h4,{id:"in-postman",children:"In Postman:"}),"\n",(0,o.jsx)(n.h4,{id:"create-operation",children:"Create Operation"}),"\n",(0,o.jsx)("img",{src:"/img/project-reactor/spring-webflux/spring-webflux-mongodb-crud-1-create-product.png",alt:"spring-webflux-mongodb-crud-1-create-product.png"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h4,{id:"mongodb",children:"mongodb:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"~$ mongosh\nCurrent Mongosh Log ID:\t6676a8b203ca3bc446597192\nConnecting to:\t\tmongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.9\nUsing MongoDB:\t\t7.0.11\nUsing Mongosh:\t\t2.2.9\n\nFor mongosh info see: https://docs.mongodb.com/mongodb-shell/\n\n------\n   The server generated these startup warnings when booting\n   2024-06-22T09:15:08.912+02:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\n   2024-06-22T09:15:09.187+02:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\n   2024-06-22T09:15:09.187+02:00: vm.max_map_count is too low\n------\n\ntest> use mydb\nswitched to db mydb\nmydb> db.products.find()\n[\n  {\n    _id: ObjectId('6676a8c7570db464a118377a'),\n    name: 'Java',\n    qty: 2,\n    price: 29,\n    _class: 'zjc.examples.spring.webflux.mongodb.entity.Product'\n  }\n]\nmydb>\n"})}),"\n",(0,o.jsx)(n.h4,{id:"analogously",children:"Analogously:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Read Operation,"}),"\n",(0,o.jsx)(n.li,{children:"Update Operation"}),"\n",(0,o.jsx)(n.li,{children:"Delete Operation."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"source-code",children:"Source code:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/spring/webflux/spring-webflux-mongodb-crud-02",children:"https://github.com/ZbCiok/zjc-examples/tree/main/spring/webflux/spring-webflux-mongodb-crud-02"})})]})}function l(t={}){const{wrapper:n}={...(0,r.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>c,x:()=>d});var o=e(6540);const r={},i=o.createContext(r);function c(t){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function d(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:c(t.components),o.createElement(i.Provider,{value:n},t.children)}}}]);