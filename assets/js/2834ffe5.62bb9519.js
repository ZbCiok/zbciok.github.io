"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[7926],{7365:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var t=i(4848),r=i(8453);const a={sidebar_position:30},o="Uni",l={id:"SmallRye Mutiny/uni",title:"Uni",description:"The Uni type",source:"@site/docs/SmallRye Mutiny/uni.mdx",sourceDirName:"SmallRye Mutiny",slug:"/SmallRye Mutiny/uni",permalink:"/docs/SmallRye Mutiny/uni",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Observing Events",permalink:"/docs/SmallRye Mutiny/observing-events"},next:{title:"Multi",permalink:"/docs/SmallRye Mutiny/multi"}},s={},u=[{value:"The Uni type",id:"the-uni-type",level:2},{value:"Creating Unis (basics)",id:"creating-unis-basics",level:2},{value:"Uni",id:"uni-1",level:3},{value:"Output:",id:"output",level:4},{value:"UniSubscriber",id:"unisubscriber",level:3},{value:"Output:",id:"output-1",level:4},{value:"Uni_From_Supplier",id:"uni_from_supplier",level:3},{value:"Output:",id:"output-2",level:4},{value:"Uni_From_Supplier_And_State",id:"uni_from_supplier_and_state",level:3},{value:"Output:",id:"output-3",level:4},{value:"Uni_Deferred",id:"uni_deferred",level:3},{value:"Output:",id:"output-4",level:4},{value:"Uni_From_Emitter",id:"uni_from_emitter",level:3},{value:"Output:",id:"output-5",level:4},{value:"Uni_From_Emitter_And_State",id:"uni_from_emitter_and_state",level:3},{value:"Output:",id:"output-6",level:4},{value:"Uni_From_Failure",id:"uni_from_failure",level:3},{value:"Output:",id:"output-7",level:4},{value:"Uni_From_CompletionStage",id:"uni_from_completionstage",level:3},{value:"Output:",id:"output-8",level:4},{value:"Go further with the Mutiny workshop!",id:"go-further-with-the-mutiny-workshop",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"uni",children:"Uni"}),"\n",(0,t.jsx)(e.h2,{id:"the-uni-type",children:"The Uni type"}),"\n",(0,t.jsx)(e.p,{children:"A Uni represents a stream that can only emit either an item or a failure event."}),"\n",(0,t.jsx)(e.p,{children:"You rarely create instances of Uni yourself, but, instead, use a reactive client exposing a Mutiny API that provides Uni objects. That being said, it can be handy at times."}),"\n",(0,t.jsx)(e.p,{children:"A Uni<T> is a specialized stream that emits only an item or a failure. Typically, Uni<T> are great to represent asynchronous actions such as a remote procedure call, an HTTP request, or an operation producing a single result."}),"\n",(0,t.jsx)(e.p,{children:"Uni<T> provides many operators that create, transform, and orchestrate Uni sequences."}),"\n",(0,t.jsx)(e.p,{children:"As said, Uni<T> emits either an item or a failure. Note that the item can be null, and the Uni API has specific methods for this case."}),"\n",(0,t.jsx)(e.p,{children:"Typically, a Uni<Void> always emits null as item event or a failure if the represented operation fails. You can consider the item event as a completion signal indicating the success of the operation."}),"\n",(0,t.jsx)(e.p,{children:"The offered operators can be used to define a processing pipeline. The event, either the item or failure, flows in this pipeline, and each operator can process or transform the event. Unis are lazy by nature."}),"\n",(0,t.jsx)(e.p,{children:"To trigger the computation, you must have a final subscriber indicating your interest. The following snippet provides a simple example of pipeline using Uni:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'Uni.createFrom().item(1)\n        .onItem().transform(i -> "hello-" + i)\n        .onItem().delayIt().by(Duration.ofMillis(100))\n        .subscribe().with(System.out::println);\n'})}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsx)(e.p,{children:"Remember: if you don\u2019t subscribe, nothing is going to happen. What\u2019s more, the pipeline is materialized for each subscription."})}),"\n",(0,t.jsx)(e.p,{children:"When subscribing to a Uni, you can pass an item callback (invoked when the item is emitted), or two callbacks (one receiving the item and one receiving the failure):"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'Cancellable cancellable = uni\n        .subscribe().with(\n                item -> System.out.println(item),\n                failure -> System.out.println("Failed with " + failure));\n'})}),"\n",(0,t.jsx)(e.p,{children:"Note the returned Cancellable: this object allows canceling the operation if need be."}),"\n",(0,t.jsx)(e.h2,{id:"creating-unis-basics",children:"Creating Unis (basics)"}),"\n",(0,t.jsx)(e.h3,{id:"uni-1",children:"Uni"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\npublic class _01_Uni {\n\n    public static void main(String[] args) {\n        System.out.println("Hello world");\n\n        io.smallrye.mutiny.Uni<String> uni = io.smallrye.mutiny.Uni.createFrom().item("Hello, world!");\n\n        uni.subscribe().with(System.out::println);\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Hello world\nHello, world!\n"})}),"\n",(0,t.jsx)(e.h3,{id:"unisubscriber",children:"UniSubscriber"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport io.smallrye.mutiny.Uni;\nimport io.smallrye.mutiny.subscription.UniSubscriber;\nimport io.smallrye.mutiny.subscription.UniSubscription;\n\npublic class _02_Uni_UniSubscriber {\n\n    public static void main(String[] args) {\n        System.out.println("Hello world with UniSubscriber");\n\n        Uni<String> uni = Uni.createFrom().item("Hello, world!");\n\n        uni.subscribe().withSubscriber(new UniSubscriber<String>() {\n            @Override\n            public void onSubscribe(UniSubscription subscription) {\n                System.out.println("onSubscribe");\n            }\n\n            @Override\n            public void onItem(String item) {\n                System.out.println("onItem: " + item);\n            }\n\n            @Override\n            public void onFailure(Throwable failure) {\n                System.out.println("onFailure: " + failure.getMessage());\n            }\n        });\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-1",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Hello world with UniSubscriber\nonSubscribe\nonItem: Hello, world!\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_from_supplier",children:"Uni_From_Supplier"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.Random;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _03_Uni_From_Supplier {\n\n    public static void main(String[] args) {\n        System.out.println("\ufe0fUni from supplier");\n\n        Random random = new Random();\n\n        Uni<Integer> uniFromSupplier = Uni.createFrom().item(random::nextInt);\n\n        for (var i = 0; i < 5; i++) {\n            uniFromSupplier.subscribe().with(System.out::println);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-2",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"1190589952\n1306938402\n2056014134\n45940004\n-173217289\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_from_supplier_and_state",children:"Uni_From_Supplier_And_State"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _04_Uni_From_Supplier_And_State {\n\n    public static void main(String[] args) {\n        System.out.println("\ufe0fUni from supplier with state");\n\n        Uni<Integer> uniFromSupplierAndState = Uni.createFrom().item(AtomicInteger::new, i -> i.addAndGet(10));\n\n        for (var i = 0; i < 5; i++) {\n            uniFromSupplierAndState.subscribe().with(System.out::println);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-3",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"\ufe0fUni from supplier with state\n10\n20\n30\n40\n50\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_deferred",children:"Uni_Deferred"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _05_Uni_Deferred {\n\n    public static void main(String[] args) {\n        System.out.println("\ufe0fDeferred Uni");\n\n        AtomicLong ids = new AtomicLong();\n\n        Uni<Long> deferredUni = Uni.createFrom().deferred(() -> Uni.createFrom().item(ids::incrementAndGet));\n\n        for (var i = 0; i < 5; i++) {\n            deferredUni.subscribe().with(System.out::println);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-4",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"\ufe0fDeferred Uni\n1\n2\n3\n4\n5\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_from_emitter",children:"Uni_From_Emitter"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ForkJoinPool;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _06_Uni_From_Emitter {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("Uni from emitter");\n\n        ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();\n        CountDownLatch emitterLatch = new CountDownLatch(1);\n\n        Uni<String> uniFromEmitter = Uni.createFrom().emitter(emitter -> {\n            forkJoinPool.submit(() -> {\n                emitter.complete("Hello");\n                emitterLatch.countDown();\n            });\n        });\n\n        uniFromEmitter.subscribe().with(System.out::println);\n\n        emitterLatch.await();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-5",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Uni from emitter\nHello\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_from_emitter_and_state",children:"Uni_From_Emitter_And_State"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _07_Uni_From_Emitter_And_State {\n\n    public static void main(String[] args) {\n        System.out.println("Uni from emitter and state");\n\n        Uni<Integer> uniFromEmitterAndState = Uni.createFrom()\n                .emitter(AtomicInteger::new, (i, e) -> e.complete(i.addAndGet(10)));\n\n        for (var i = 0; i < 5; i++) {\n            uniFromEmitterAndState.subscribe().with(System.out::println);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-6",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Uni from emitter and state\n10\n20\n30\n40\n50\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_from_failure",children:"Uni_From_Failure"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.io.IOException;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _08_Uni_From_Failure {\n\n    public static void main(String[] args) {\n        System.out.println("\u26a1\ufe0f Uni from failure");\n\n        Uni.createFrom().failure(new IOException("Boom"))\n                .subscribe().with(System.out::println, failure -> System.out.println(failure.getMessage()));\n\n        Uni.createFrom().failure(() -> new IOException("Badaboom"))\n                .subscribe().with(System.out::println, failure -> System.out.println(failure.getMessage()));\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-7",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Uni from failure\nBoom\nBadaboom\n"})}),"\n",(0,t.jsx)(e.h3,{id:"uni_from_completionstage",children:"Uni_From_CompletionStage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport static java.util.concurrent.CompletableFuture.delayedExecutor;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\n\nimport io.smallrye.mutiny.Uni;\n\npublic class _09_Uni_From_CompletionStage {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("Uni from CompletionStage");\n\n        var cs = CompletableFuture\n                .supplyAsync(() -> "Hello!", delayedExecutor(1, TimeUnit.SECONDS))\n                .thenApply(String::toUpperCase);\n\n        Uni.createFrom().completionStage(cs)\n                .subscribe().with(System.out::println, failure -> System.out.println(failure.getMessage()));\n\n        Thread.sleep(2000);\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"output-8",children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Uni from CompletionStage\nHELLO!\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"go-further-with-the-mutiny-workshop",children:"Go further with the Mutiny workshop!"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://github.com/smallrye/smallrye-mutiny/tree/main/workshop-examples",children:"https://github.com/smallrye/smallrye-mutiny/tree/main/workshop-examples"})})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>l});var t=i(6540);const r={},a=t.createContext(r);function o(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);