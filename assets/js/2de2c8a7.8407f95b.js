"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[3017],{666:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var a=t(4848),i=t(8453);const c={sidebar_position:210},o="Topic Exchange in AMQP",r={id:"messaging/rabbitmq/examples/topic-exchange-in-amqp",title:"Topic Exchange in AMQP",description:"Description",source:"@site/docs/messaging/rabbitmq/examples/topic-exchange-in-amqp.mdx",sourceDirName:"messaging/rabbitmq/examples",slug:"/messaging/rabbitmq/examples/topic-exchange-in-amqp",permalink:"/docs/messaging/rabbitmq/examples/topic-exchange-in-amqp",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:210,frontMatter:{sidebar_position:210},sidebar:"tutorialSidebar",previous:{title:"Direct Exchange in AMQP",permalink:"/docs/messaging/rabbitmq/examples/direct-exchange-in-amqp"},next:{title:"Headers Exchange in AMQP",permalink:"/docs/messaging/rabbitmq/examples/headers-exchange-in-amqp"}},s={},l=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Install RabbitMQ on Docker",id:"install-rabbitmq-on-docker",level:2},{value:"docker-compose.yml:",id:"docker-composeyml",level:4},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"CommonConfigs.java",id:"commonconfigsjava",level:3},{value:"ConnectionManager.java",id:"connectionmanagerjava",level:3},{value:"TopicExchange.java",id:"topicexchangejava",level:3},{value:"Run",id:"run",level:2},{value:"Output",id:"output",level:3}];function m(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"topic-exchange-in-amqp",children:"Topic Exchange in AMQP"})}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)("img",{src:"/img/messaging/rabbitmq/rabbitmq-topic-exchange-diagr-01.png",width:"300 px",alt:"rabbitmq-topic-exchange-diagr-01.png"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A message Queue binds to an Exchange with a routing key pattern (P)."}),"\n",(0,a.jsx)(n.li,{children:"A publisher sends a message with a routing key (K) to the Topic Exchange."}),"\n",(0,a.jsx)(n.li,{children:"The message is passed to the Queue if P matches with K. The routing key matching is decided as discussed below."}),"\n",(0,a.jsx)(n.li,{children:"The consumer subscribing the Queue receives the message."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"JDK 17+"}),"\n",(0,a.jsx)(n.li,{children:"RabbitMQ on Docker"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"install-rabbitmq-on-docker",children:"Install RabbitMQ on Docker"}),"\n",(0,a.jsx)(n.h4,{id:"docker-composeyml",children:"docker-compose.yml:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'version: "3.6"\n# https://docs.docker.com/compose/compose-file/\n\nservices:\n  rabbitmq:\n    image: \'rabbitmq:3.6-management-alpine\'\n    ports:\n      # The standard AMQP protocol port\n      - \'5672:5672\'\n      # HTTP management UI\n      - \'15672:15672\'\n    environment:\n      # The location of the RabbitMQ server.  "amqp" is the protocol;\n      # "rabbitmq" is the hostname.  Note that there is not a guarantee\n      # that the server will start first!  Telling the pika client library\n      # to try multiple times gets around this ordering issue.\n      AMQP_URL: \'amqp://rabbitmq?connection_attempts=5&retry_delay=5\'\n      RABBITMQ_DEFAULT_USER: "guest"\n      RABBITMQ_DEFAULT_PASS: "guest"\n    networks:\n      - network\n#    volumes:\n#      - ./.docker/rabbitmq/etc/:/etc/rabbitmq/\n#      - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/\n#      - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/\n\nnetworks:\n  # Declare our private network.  We must declare one for the magic\n  # Docker DNS to work, but otherwise its default settings are fine.\n  network: {}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"http://localhost:15672/\n"})}),"\n",(0,a.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:".\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 rabbitmq-docker\n\u2502\xa0\xa0 \u2514\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 readme.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u2514\u2500\u2500 java\n            \u2514\u2500\u2500 com\n                \u2514\u2500\u2500 amqp\n                    \u251c\u2500\u2500 basic\n                    \u2502\xa0\xa0 \u2514\u2500\u2500 queue\n                    \u2502\xa0\xa0     \u2514\u2500\u2500 CommonConfigs.java\n                    \u2514\u2500\u2500 exchanges\n                        \u251c\u2500\u2500 ConnectionManager.java\n                        \u2514\u2500\u2500 TopicExchange.java\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>rabbitmq-examples</groupId>\n  <artifactId>rabbitmq-topic-exchange</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <description>RabbitMQ code examples using the amqp-client</description>\n\n  <properties>\n    <maven.compiler.target>22</maven.compiler.target>\n    <maven.compiler.source>22</maven.compiler.source>\n    <java.version>22</java.version>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.rabbitmq</groupId>\n      <artifactId>amqp-client</artifactId>\n      <version>5.24.0</version>\n    </dependency>\n  </dependencies>\n\n</project>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"commonconfigsjava",children:"CommonConfigs.java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package com.amqp.basic.queue;\n\npublic class CommonConfigs {\n  public static final String DEFAULT_QUEUE = "Queue-1";\n  public static final String AMQP_URL = "amqp://guest:guest@localhost:5672/";\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"connectionmanagerjava",children:"ConnectionManager.java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package com.amqp.exchanges;\n\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class ConnectionManager {\n\n  private static Connection connection = null;\n\n  /**\n   * Create RabbitMQ Connection\n   *\n   * @return Connection\n   */\n  public static Connection getConnection() {\n    if (connection == null) {\n      try {\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        connection = connectionFactory.newConnection("amqp://guest:guest@localhost:5672/");\n      } catch (IOException | TimeoutException e) {\n        e.printStackTrace();\n      }\n    }\n    return connection;\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"topicexchangejava",children:"TopicExchange.java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package com.amqp.exchanges;\n\nimport com.rabbitmq.client.BuiltinExchangeType;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class TopicExchange {\n  /**\n   * Declare a Topic Exchange with the name my-topic-exchange.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void declareExchange() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    //Create Topic Exchange\n    channel.exchangeDeclare("my-topic-exchange", BuiltinExchangeType.TOPIC, true);\n    channel.close();\n  }\n\n  /**\n   * Declare Queues to receive respective interested messages.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void declareQueues() throws IOException, TimeoutException {\n    //Create a channel - do not share the Channel instance\n    Channel channel = ConnectionManager.getConnection().createChannel();\n\n    //Create the Queues\n    channel.queueDeclare("HealthQ", true, false, false, null);\n    channel.queueDeclare("SportsQ", true, false, false, null);\n    channel.queueDeclare("EducationQ", true, false, false, null);\n\n    channel.close();\n  }\n\n  /**\n   * Declare Bindings - register interests using routing key patterns.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void declareBindings() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    //Create bindings - (queue, exchange, routingKey) - routingKey != null\n    channel.queueBind("HealthQ", "my-topic-exchange", "health.*");\n    channel.queueBind("SportsQ", "my-topic-exchange", "#.sports.*");\n    channel.queueBind("EducationQ", "my-topic-exchange", "#.education");\n    channel.close();\n  }\n\n  /**\n   * Assign Consumers to each of the Queue.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void subscribeMessage() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    channel.basicConsume("HealthQ", true, ((consumerTag, message) -> {\n      System.out.println("\\n\\n=========== Health Queue ==========");\n      System.out.println(consumerTag);\n      System.out.println("HealthQ: " + new String(message.getBody()));\n      System.out.println(message.getEnvelope());\n    }), consumerTag -> {\n      System.out.println(consumerTag);\n    });\n\n    channel.basicConsume("SportsQ", true, ((consumerTag, message) -> {\n      System.out.println("\\n\\n ============ Sports Queue ==========");\n      System.out.println(consumerTag);\n      System.out.println("SportsQ: " + new String(message.getBody()));\n      System.out.println(message.getEnvelope());\n    }), consumerTag -> {\n      System.out.println(consumerTag);\n    });\n\n    channel.basicConsume("EducationQ", true, ((consumerTag, message) -> {\n      System.out.println("\\n\\n ============ Education Queue ==========");\n      System.out.println(consumerTag);\n      System.out.println("EducationQ: " + new String(message.getBody()));\n      System.out.println(message.getEnvelope());\n    }), consumerTag -> {\n      System.out.println(consumerTag);\n    });\n  }\n\n  /**\n   * Publish Messages with different routing keys.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void publishMessage() throws IOException, TimeoutException {\n    Channel channel = ConnectionManager.getConnection().createChannel();\n    String message = "Drink a lot of Water and stay Healthy!";\n    //channel.basicPublish("my-topic-exchange", "sports.sports.sports", null, message.getBytes());\n    channel.basicPublish("my-topic-exchange", "health.education", null, message.getBytes());\n\n    message = "Learn something new everyday";\n    channel.basicPublish("my-topic-exchange", "education", null, message.getBytes());\n\n    message = "Stay fit in Mind and Body";\n    channel.basicPublish("my-topic-exchange", "education.health", null, message.getBytes());\n\n    channel.close();\n  }\n\n  /**\n   * Execute the methods.\n   *\n   * @param args\n   * @throws IOException\n   * @throws TimeoutException\n   */\n  public static void main(String[] args) throws IOException, TimeoutException {\n    TopicExchange.declareExchange();\n    TopicExchange.declareQueues();\n    TopicExchange.declareBindings();\n\n    Thread subscribe = new Thread(() -> {\n      try {\n        TopicExchange.subscribeMessage();\n      } catch (IOException | TimeoutException e) {\n        e.printStackTrace();\n      }\n    });\n\n    Thread publish = new Thread(() -> {\n      try {\n        TopicExchange.publishMessage();\n      } catch (IOException | TimeoutException e) {\n        e.printStackTrace();\n      }\n    });\n    subscribe.start();\n    publish.start();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public static void main(String[] args) throws IOException, TimeoutException { ...\n"})}),"\n",(0,a.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"=========== Health Queue ==========\namq.ctag-dfqDl2dbY6pw85w7wgpqGA\nHealthQ: Drink a lot of Water and stay Healthy!\nEnvelope(deliveryTag=1, redeliver=false, exchange=my-topic-exchange, routingKey=health.education)\n\n\n ============ Education Queue ==========\namq.ctag-5O8xw4-vhPh0oK1VX9_DRw\nEducationQ: Drink a lot of Water and stay Healthy!\nEnvelope(deliveryTag=2, redeliver=false, exchange=my-topic-exchange, routingKey=health.education)\n\n\n ============ Education Queue ==========\namq.ctag-5O8xw4-vhPh0oK1VX9_DRw\nEducationQ: Learn something new everyday\nEnvelope(deliveryTag=3, redeliver=false, exchange=my-topic-exchange, routingKey=education)\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Source Code:"})," ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/rabbitmq/rabbitmq-topic-exchange",children:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/rabbitmq/rabbitmq-topic-exchange"})})})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(6540);const i={},c=a.createContext(i);function o(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);