"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[8340],{427:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(4848),i=t(8453);const a={sidebar_position:4},s="reducing",o={id:"streams/java-8-streams/collectors/reducing",title:"reducing",description:"The overloaded static methods, Collectors.**reducing()** return a Collector which perform a reduction on the input stream elements according to the provided binary operator.",source:"@site/docs/streams/java-8-streams/collectors/reducing.mdx",sourceDirName:"streams/java-8-streams/collectors",slug:"/streams/java-8-streams/collectors/reducing",permalink:"/docs/streams/java-8-streams/collectors/reducing",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"partitioningBy",permalink:"/docs/streams/java-8-streams/collectors/partitioning"},next:{title:"summarizing",permalink:"/docs/streams/java-8-streams/collectors/summarizing"}},l={},c=[{value:"Data",id:"data",level:3},{value:"Examples",id:"examples",level:2},{value:"<em><strong><strong>reducing(op)</strong></strong></em>",id:"reducingop",level:3},{value:"Output",id:"output",level:4},{value:"Output",id:"output-1",level:4},{value:"<em><strong><strong>reducing(identity, op)</strong></strong></em>",id:"reducingidentity-op",level:3},{value:"Output",id:"output-2",level:4},{value:"Output",id:"output-3",level:4},{value:"<em><strong><strong>reducing(identity, mapper, op)</strong></strong></em>",id:"reducingidentity-mapper-op",level:3},{value:"Output",id:"output-4",level:4}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"reducing",children:"reducing"}),"\n",(0,r.jsxs)(n.p,{children:["The overloaded static methods, Collectors.",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"reducing()"})})})," return a Collector which perform a reduction on the input stream elements according to the provided binary operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n<T> Collector<T,?,Optional<T>> reducing(BinaryOperator<T> op)\n<T> Collector<T,?,T> reducing(T identity, BinaryOperator<T> op)\n<T,U> Collector<T,?,U> reducing(U identity, Function<? super T,? extends U> mapper, BinaryOperator<U> op)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"op: a BinaryOperator which reduces the input values\nidentity: The identity value for the reduction, i.e. for all input elements x: op(identity,x) == x\nmapper: a mapping function for input type T to U conversion.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"data",children:"Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'    private final List<Student> students = Arrays.asList(\n            new Student("John Smith", "Miami", 7.38, 19),\n            new Student("Mike Miles", "New York", 8.4, 21),\n            new Student("Michael Peterson", "New York", 7.5, 20),\n            new Student("James Robertson", "Miami", 9.1, 20),\n            new Student("Joe Murray", "New York", 7.9, 19),\n            new Student("Kyle Miller", "Miami", 9.83, 20)\n    );\n'})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"reducingop",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"reducing(op)"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"    public void reducingOp01() {\n        Stream<Integer> s = Stream.of(5, 10, 20, 50);\n        Integer i = s.collect(Collectors.reducing((integer, integer2)\n                        -> integer2 - integer)).orElse(-1);\n\n        System.out.println(i);\n    }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"output",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"35\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"    public void reducingOp02() {\n        Map<String, Optional<Student>> reduceByCityAvgGrade = students.stream()\n                .collect(Collectors\n                        .groupingBy(Student::getCity,\n                                Collectors.reducing(BinaryOperator\n                                        .maxBy(Comparator\n                                                .comparing(Student::getAvgGrade)))));\n        System.out.println(reduceByCityAvgGrade);\n    }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"output-1",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n{New York=Optional[Student{name='Mike Miles', city='New York', avgGrade=8.4, age=21}], Miami=Optional[Student{name='Kyle Miller', city='Miami', avgGrade=9.83, age=20}]}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reducingidentity-op",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"reducing(identity, op)"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"    public void reducingOpId01() {\n        Stream<Integer> s = Stream.of(5, 10, 20, 50);\n        Integer i = s.collect(Collectors.reducing(1, (integer, integer2)\n                -> integer2 * integer));\n        System.out.println(i);\n    }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"output-2",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"50000\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'    public void reducingOpId02() {\n        Map<String, Student> reduceByCityAvgGrade = students.stream()\n                .collect(Collectors\n                        .groupingBy(Student::getCity,\n                                Collectors.reducing(new Student("x", "x", 0.0, 0),\n                                        BinaryOperator.maxBy(Comparator\n                                                .comparing(Student::getAvgGrade)))));\n        System.out.println(reduceByCityAvgGrade);\n    }\n'})}),"\n",(0,r.jsx)(n.h4,{id:"output-3",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"{New York=Student{name='Mike Miles', city='New York', avgGrade=8.4, age=21}, Miami=Student{name='Kyle Miller', city='Miami', avgGrade=9.83, age=20}}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reducingidentity-mapper-op",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"reducing(identity, mapper, op)"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'    public void reducingOpIdFun01() {\n        Stream<Integer> s = Stream.of(5, 10, 20, 50).parallel();\n        String str = s.collect(Collectors.reducing(\n                "",\n                x -> Integer.toString(x),\n                (s1, s2) -> s1 + s2));\n        System.out.println(str);\n    }\n'})}),"\n",(0,r.jsx)(n.h4,{id:"output-4",children:"Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"5102050\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"    public void reducingOpIdFun02() {\n        double largestAverageGrade = students.stream()\n                .collect(Collectors.reducing(0.0, Student::getAvgGrade,\n                        BinaryOperator.maxBy(Comparator.comparingDouble(value -> value))));\n        System.out.println(largestAverageGrade);\n    }\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"9.83\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);