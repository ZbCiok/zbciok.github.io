"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[8213],{657:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=s(4848),t=s(8453);const i={sidebar_position:3},a="Backpressure",c={id:"streams/reactive-streams/backpressure",title:"Backpressure",description:"Backpressure is the ability of a Consumer/Subscriber to signal the Producer that the rate of emission is higher than what it can handle. So using this mechanism, the Consumer/Subscriber gets control over the speed at which data is emitted.",source:"@site/docs/streams/reactive-streams/backpressure.mdx",sourceDirName:"streams/reactive-streams",slug:"/streams/reactive-streams/backpressure",permalink:"/docs/streams/reactive-streams/backpressure",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Asynchronicity",permalink:"/docs/streams/reactive-streams/asynchronicity"},next:{title:"java.util.concurrent.Flow",permalink:"/docs/streams/reactive-streams/java-util-concurrent-Flow"}},o={},l=[{value:"Backpressure in Project Reactor",id:"backpressure-in-project-reactor",level:3},{value:"1. Buffering",id:"1-buffering",level:4},{value:"2. Dropping",id:"2-dropping",level:4},{value:"3. Throttling",id:"3-throttling",level:4},{value:"Backpressure in Spring Reactor",id:"backpressure-in-spring-reactor",level:3},{value:"1. buffer()",id:"1-buffer",level:4},{value:"2. onBackpressureDrop()",id:"2-onbackpressuredrop",level:4},{value:"3. filter()",id:"3-filter",level:4}];function u(e){const r={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"backpressure",children:"Backpressure"}),"\n",(0,n.jsx)(r.p,{children:"Backpressure is the ability of a Consumer/Subscriber to signal the Producer that the rate of emission is higher than what it can handle. So using this mechanism, the Consumer/Subscriber gets control over the speed at which data is emitted."}),"\n",(0,n.jsx)(r.p,{children:"Reactive Streams provides four building blocks:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.strong,{children:"Publisher"})," that emits elements."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.strong,{children:"Subscriber"})," that reacts when elements are received."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.strong,{children:"Subscription"})," that binds a Publisher and a Subscriber."]}),"\n",(0,n.jsxs)(r.li,{children:["And a ",(0,n.jsx)(r.strong,{children:"Processor"}),"."]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Here's the class diagram:"}),"\n",(0,n.jsx)("img",{src:"/img/streams/reactive-streams/backpressure-diagram-01.png",alt:"backpressure-diagram-01.png"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Using Backpressure, the Subscriber controls the data flow from the Publisher."}),"\n",(0,n.jsx)(r.li,{children:"The Subscriber makes use of request(n) to request n number of elements at a time."}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"The Subscription is at the root of backpressure via its request() method."}),"\n",(0,n.jsxs)(r.p,{children:["A Subscriber ",(0,n.jsx)(r.strong,{children:"must"})," signal demand via Subscription.request(long n) to receive onNext signals.\n",(0,n.jsx)(r.strong,{children:"The intent of this rule is to establish that it is the responsibility of the Subscriber to decide when and how many elements it is able and willing to receive."}),"\nSee: ",(0,n.jsx)(r.em,{children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm",children:"reactive-streams-jvm"})})})})]}),"\n",(0,n.jsx)(r.p,{children:"But it falls outside the specifications' scope to define how to manage items emitted by the producer that cannot be handled downstream."}),"\n",(0,n.jsx)(r.h3,{id:"backpressure-in-project-reactor",children:"Backpressure in Project Reactor"}),"\n",(0,n.jsx)(r.h4,{id:"1-buffering",children:"1. Buffering"}),"\n",(0,n.jsx)(r.p,{children:"Ideal for applications that can tolerate delayed processing, such as batch jobs."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'Flux<String> bufferedFlux = Flux.just("A", "B", "C")\n                                .onBackpressureBuffer(); // Buffers all items if the downstream can\'t keep up\nbufferedFlux.subscribe(item -> {\n    // Simulate slower consumption\n    Thread.sleep(1000);\n    System.out.println(item);\n});\n'})}),"\n",(0,n.jsx)(r.h4,{id:"2-dropping",children:"2. Dropping"}),"\n",(0,n.jsx)(r.p,{children:"Suited for real-time applications where only the latest data is relevant, such as live user interfaces."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'Flux<String> droppingFlux = Flux.just("A", "B", "C", "D", "E")\n                                .onBackpressureDrop(); // Drops items that exceed downstream capacity\ndroppingFlux.subscribe(System.out::println);\n'})}),"\n",(0,n.jsx)(r.h4,{id:"3-throttling",children:"3. Throttling"}),"\n",(0,n.jsx)(r.p,{children:"Best for rate-limited applications, ensuring smooth data flow without overloading the system, like API data ingestion."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'Flux<String> throttledFlux = Flux.just("A", "B", "C", "D", "E")\n                                 .delayElements(Duration.ofMillis(100)) // Simulate data emission rate\n                                 .sample(Duration.ofMillis(300)); // Sample the flux every 300ms\nthrottledFlux.subscribe(System.out::println);\n'})}),"\n",(0,n.jsxs)(r.ol,{start:"4",children:["\n",(0,n.jsx)(r.li,{children:"Batching\nEfficient for operations where processing data in groups significantly reduces overhead, such as data import processes."}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:'Flux.range(1, 100)\n    .buffer(10) // Group into lists of 10\n    .subscribe(batch -> System.out.println("Processing batch: " + batch));\n'})}),"\n",(0,n.jsx)(r.h3,{id:"backpressure-in-spring-reactor",children:"Backpressure in Spring Reactor"}),"\n",(0,n.jsx)(r.p,{children:"Main strategies and techniques:"}),"\n",(0,n.jsx)(r.h4,{id:"1-buffer",children:"1. buffer()"}),"\n",(0,n.jsx)(r.p,{children:"The buffer() operator in Spring Reactor can be used to buffer elements emitted by a Flux or Mono. Example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"Flux<Integer> numbersFlux = Flux.range(1, 1000).buffer(100);\n"})}),"\n",(0,n.jsx)(r.h4,{id:"2-onbackpressuredrop",children:"2. onBackpressureDrop()"}),"\n",(0,n.jsx)(r.p,{children:"The onBackpressureDrop() operator drops elements when the consumer is unable to keep up with the rate of production."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"Flux<Integer> numbersFlux = Flux.range(1, 1000).onBackpressureDrop();\n"})}),"\n",(0,n.jsx)(r.h4,{id:"3-filter",children:"3. filter()"}),"\n",(0,n.jsx)(r.p,{children:"The filter() operator can be used to filter elements based on certain conditions."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-java",children:"Flux<Integer> numbersFlux = Flux.range(1, 1000).filter(num -> num % 2 == 0);\n"})})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>c});var n=s(6540);const t={},i=n.createContext(t);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);