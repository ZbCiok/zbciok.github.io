"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[9619],{7484:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"streams/apache-flink/Examples/ml-examples/evaluation-binary-classification-Evaluator","title":"Evaluation/BinaryClassificationEvaluatorExample","description":"Machine Learning","source":"@site/docs/streams/apache-flink/Examples/ml-examples/evaluation-binary-classification-Evaluator.mdx","sourceDirName":"streams/apache-flink/Examples/ml-examples","slug":"/streams/apache-flink/Examples/ml-examples/evaluation-binary-classification-Evaluator","permalink":"/docs/streams/apache-flink/Examples/ml-examples/evaluation-binary-classification-Evaluator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":300,"frontMatter":{"sidebar_position":300},"sidebar":"tutorialSidebar","previous":{"title":"Clustering/KMeansExample","permalink":"/docs/streams/apache-flink/Examples/ml-examples/clustering-kmeans"},"next":{"title":"Classification/KnnExample","permalink":"/docs/streams/apache-flink/Examples/ml-examples/classification-knn"}}');var r=n(4848),t=n(8453);const s={sidebar_position:300},l="Evaluation/BinaryClassificationEvaluatorExample",o={},c=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"BinaryClassificationEvaluatorExample.java",id:"binaryclassificationevaluatorexamplejava",level:2},{value:"Run",id:"run",level:2},{value:"Build the Examples",id:"build-the-examples",level:4},{value:"Copy",id:"copy",level:4},{value:"Output",id:"output",level:2}];function u(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"evaluationbinaryclassificationevaluatorexample",children:"Evaluation/BinaryClassificationEvaluatorExample"})}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"/docs/artificial-intelligence/machine-learning/",children:(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"Machine Learning"})})}),(0,r.jsx)("br",{}),"\n",(0,r.jsx)(a.a,{href:"/docs/artificial-intelligence/machine-learning/evaluation/",children:(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"Binary Classification Evaluator"})})}),(0,r.jsx)("br",{}),"\n",(0,r.jsx)(a.a,{href:"/docs/artificial-intelligence/machine-learning/evaluation/evaluation-metrics-for-binary-classification",children:(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"20 Evaluation Metrics for Binary Classification"})})}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"\n",(0,r.jsx)(a.strong,{children:"The Example:"}),(0,r.jsx)("br",{}),"\n",(0,r.jsx)(a.a,{href:"https://github.com/apache/flink-ml/blob/master/flink-ml-examples/src/main/java/org/apache/flink/ml/examples/evaluation/BinaryClassificationEvaluatorExample.java",children:(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"evaluation/BinaryClassificationEvaluatorExample"})})})]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"https://nightlies.apache.org/flink/flink-ml-docs-release-2.1/docs/operators/evaluation/binaryclassificationevaluator/",children:(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"Binary Classification Evaluator"})})})," ",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(a.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)("img",{src:"/img/ai/machine-learning/Binary_classification_diagr-01.png",width:"300 px",alt:"Binary_classification_diagr-01.png"}),"\n",(0,r.jsx)(a.p,{children:"Binary Classification Evaluator calculates the evaluation metrics for binary classification. The input data has rawPrediction, label, and an optional weight column. The rawPrediction can be of type double (binary 0/1 prediction, or probability of label 1) or of type vector (length-2 vector of raw predictions, scores, or label probabilities). The output may contain different metrics defined by the parameter MetricsNames."}),"\n",(0,r.jsx)(a.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"JDK 11"}),"\n",(0,r.jsx)(a.li,{children:"Maven 3.9.9"}),"\n",(0,r.jsx)(a.li,{children:"Flink 1.17.0"}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"binaryclassificationevaluatorexamplejava",children:"BinaryClassificationEvaluatorExample.java"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.ml.examples.evaluation;\n\nimport org.apache.flink.ml.evaluation.binaryclassification.BinaryClassificationEvaluator;\nimport org.apache.flink.ml.evaluation.binaryclassification.BinaryClassificationEvaluatorParams;\nimport org.apache.flink.ml.linalg.Vectors;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\nimport org.apache.flink.types.Row;\n\n/**\n * Simple program that creates a BinaryClassificationEvaluator instance and uses it for evaluation.\n */\npublic class BinaryClassificationEvaluatorExample {\n    public static void main(String[] args) {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n        // Generates input data.\n        DataStream<Row> inputStream =\n                env.fromElements(\n                        Row.of(1.0, Vectors.dense(0.1, 0.9)),\n                        Row.of(1.0, Vectors.dense(0.2, 0.8)),\n                        Row.of(1.0, Vectors.dense(0.3, 0.7)),\n                        Row.of(0.0, Vectors.dense(0.25, 0.75)),\n                        Row.of(0.0, Vectors.dense(0.4, 0.6)),\n                        Row.of(1.0, Vectors.dense(0.35, 0.65)),\n                        Row.of(1.0, Vectors.dense(0.45, 0.55)),\n                        Row.of(0.0, Vectors.dense(0.6, 0.4)),\n                        Row.of(0.0, Vectors.dense(0.7, 0.3)),\n                        Row.of(1.0, Vectors.dense(0.65, 0.35)),\n                        Row.of(0.0, Vectors.dense(0.8, 0.2)),\n                        Row.of(1.0, Vectors.dense(0.9, 0.1)));\n        Table inputTable = tEnv.fromDataStream(inputStream).as("label", "rawPrediction");\n\n        // Creates a BinaryClassificationEvaluator object and initializes its parameters.\n        BinaryClassificationEvaluator evaluator =\n                new BinaryClassificationEvaluator()\n                        .setMetricsNames(\n                                BinaryClassificationEvaluatorParams.AREA_UNDER_PR,\n                                BinaryClassificationEvaluatorParams.KS,\n                                BinaryClassificationEvaluatorParams.AREA_UNDER_ROC);\n\n        // Uses the BinaryClassificationEvaluator object for evaluations.\n        Table outputTable = evaluator.transform(inputTable)[0];\n\n        // Extracts and displays the results.\n        Row evaluationResult = outputTable.execute().collect().next();\n        System.out.printf(\n                "Area under the precision-recall curve: %s\\n",\n                evaluationResult.getField(BinaryClassificationEvaluatorParams.AREA_UNDER_PR));\n        System.out.printf(\n                "Area under the receiver operating characteristic curve: %s\\n",\n                evaluationResult.getField(BinaryClassificationEvaluatorParams.AREA_UNDER_ROC));\n        System.out.printf(\n                "Kolmogorov-Smirnov value: %s\\n",\n                evaluationResult.getField(BinaryClassificationEvaluatorParams.KS));\n    }\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"run",children:"Run"}),"\n",(0,r.jsx)(a.h4,{id:"build-the-examples",children:"Build the Examples"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"# https://github.com/apache/flink-ml\nmvn clean package -DskipTests\n"})}),"\n",(0,r.jsx)(a.h4,{id:"copy",children:"Copy"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"flink-ml-examples-1.17-2.4-SNAPSHOT.jar\nflink-ml-uber-1.17-2.4-SNAPSHOT.jar\nstatefun-flink-core-3.2.0.jar\n"})}),"\n",(0,r.jsxs)(a.p,{children:["to",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"flink-1.17.0/lib"})}),"."]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Start local cluster"})," (Flink 1.17.0): ",(0,r.jsx)("br",{}),"\n./bin/start-cluster.sh"]}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Run"}),(0,r.jsx)("br",{}),"\n",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"BinaryClassificationEvaluatorExample:"})})]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"\n./bin/flink run -c org.apache.flink.ml.examples.evaluation.BinaryClassificationEvaluatorExample ./lib/flink-ml-uber-1.17-2.4-SNAPSHOT.jar ./lib/statefun-flink-core-3.2.0.jar ./lib/flink-ml-examples-1.17-2.4-SNAPSHOT.jar\n"})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Open"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"http://localhost:8081\n"})}),"\n",(0,r.jsx)("img",{src:"/img/ai/machine-learning/flink-ml-apache- BinaryClassificationEvaluatorExample-example-001.png",alt:"flink-ml-apache- BinaryClassificationEvaluatorExample-example-001.png"}),"\n",(0,r.jsx)(a.h2,{id:"output",children:"Output"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"Job has been submitted with JobID bfc18a82376e6b603778db697ac5f628\nArea under the precision-recall curve: 0.7691481137909708\nArea under the receiver operating characteristic curve: 0.6571428571428571\nKolmogorov-Smirnov value: 0.3714285714285714\n"})})]})}function p(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>l});var i=n(6540);const r={},t=i.createContext(r);function s(e){const a=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(t.Provider,{value:a},e.children)}}}]);