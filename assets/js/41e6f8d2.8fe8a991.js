"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[7351],{472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=n(4848),s=n(8453);const r={sidebar_position:1},i="Intermediate Operations",o={id:"streams/java-8-streams/operations-on-streams/IntermediateOperations",title:"Intermediate Operations",description:"Stream intermediate operations return another Stream which allows you to call multiple operations in the form of a query.",source:"@site/docs/streams/java-8-streams/operations-on-streams/IntermediateOperations.mdx",sourceDirName:"streams/java-8-streams/operations-on-streams",slug:"/streams/java-8-streams/operations-on-streams/IntermediateOperations",permalink:"/docs/streams/java-8-streams/operations-on-streams/IntermediateOperations",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Operations on Streams",permalink:"/docs/streams/java-8-streams/operations-on-streams"},next:{title:"Terminate Operations",permalink:"/docs/streams/java-8-streams/operations-on-streams/TerminateOperations"}},l={},m=[{value:"List of stream intermediate operations:",id:"list-of-stream-intermediate-operations",level:2},{value:"stream.concat",id:"streamconcat",level:3},{value:"Stream.concat(s1, s2)",id:"streamconcats1-s2",level:4},{value:"LongStream.concat(Stream1, Stream2)",id:"longstreamconcatstream1-stream2",level:4},{value:"combinedStream.toList()",id:"combinedstreamtolist",level:4},{value:"filter()",id:"filter",level:3},{value:"intStream.filter(value -&gt; value &gt; 3)",id:"intstreamfiltervalue---value--3",level:4},{value:"map()",id:"map",level:3},{value:"flatMap()",id:"flatmap",level:3},{value:"distinct()",id:"distinct",level:3},{value:"limit()",id:"limit",level:3},{value:"peek()",id:"peek",level:3},{value:"skip()",id:"skip",level:3},{value:"sorted()",id:"sorted",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"intermediate-operations",children:"Intermediate Operations"}),"\n",(0,a.jsx)("img",{src:"/img/streams/java-8-streams/immediate-operations-01.png",alt:"immediate-operations-01.png"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.p,{children:"Stream intermediate operations return another Stream which allows you to call multiple operations in the form of a query.\nStream intermediate operations do not get executed until a terminal operation is invoked.\nAll Intermediate operations are lazy, so they\u2019re not executed until a result of processing is actually needed."}),"\n",(0,a.jsx)(t.h2,{id:"list-of-stream-intermediate-operations",children:"List of stream intermediate operations:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"streamconcat",children:"stream.concat"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream."}),"\n",(0,a.jsx)(t.h4,{id:"streamconcats1-s2",children:"Stream.concat(s1, s2)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    public void concatStringStreams() {\n        Stream<String> s1 = Stream.of("one", "two", "three");\n        Stream<String> s2 = Stream.of("four", "five", "six");\n\n        Stream<String> s3 = Stream.concat(s1, s2);\n        s3.forEach(System.out::println);\n    }\n'})}),"\n",(0,a.jsx)(t.h4,{id:"longstreamconcatstream1-stream2",children:"LongStream.concat(Stream1, Stream2)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"    public void concatLongStreams() {\n        LongStream Stream1 = LongStream.of(1456, 1537);\n        LongStream Stream2 = LongStream.of(1891, 2087);\n\n        LongStream.concat(Stream1, Stream2).forEach(System.out::println);\n    }\n"})}),"\n",(0,a.jsx)(t.h4,{id:"combinedstreamtolist",children:"combinedStream.toList()"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    public void concatCollectionsStreams() {\n        Collection<String> s1 = Arrays.asList("zjc", "stream");\n        Collection<String> s2 = Arrays.asList("collect", "collections");\n\n        Stream<String> combinedStream = Stream.of(s1, s2).flatMap(Collection::stream);\n        Collection<String> collectionCombined = combinedStream.toList();\n\n        collectionCombined.forEach(System.out::println);\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"filter",children:"filter()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Returns a stream consisting of the elements of this stream that match the given predicate."}),"\n",(0,a.jsx)(t.h4,{id:"intstreamfiltervalue---value--3",children:"intStream.filter(value -> value > 3)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"    // Returns a stream consisting of the elements of this stream that\n    // match the given predicate.\n    public void streamFilter() {\n        Stream<Integer> intStream = Stream.of(1, 2, 3, 4, 5);\n        Stream<Integer> subStream = intStream.filter(value -> value > 3);\n        long count = subStream.count();\n        System.out.println(count);\n    }\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"map",children:"map()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The Java Stream map() method converts (maps) an element to another object. For instance, if you had a list of strings it could convert each string to lowercase, uppercase,\nor to a substring of the original string, or something completely else."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    // List of String you convert to a List of Integer. Use map() to do so.\n    public void streamMap() {\n        List<String> listOfStrings = Arrays.asList("1", "2", "3", "4", "5");\n\n        List<Integer> listOfIntegers = listOfStrings.stream()\n                .map(Integer::valueOf)\n                .collect(Collectors.toList());\n\n        System.out.println(listOfIntegers);\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"flatmap",children:"flatMap()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:'The Stream.flatMap() function, as the name suggests, is the combination of a map and a flat operation.\nThis means you first apply the map function and then flatten the result.\nTo understand what flattening a stream consists in, consider a structure like [ [1,2,3],[4,5,6],[7,8,9] ] which has "two levels".\nIt\'s basically a big List containing three more List.\nFlattening this means transforming it in a "one level" structure e.g. [ 1,2,3,4,5,6,7,8,9 ] i.e. just one list.'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    // Below you can see that we have three lists that are merged into one by using a flatMap() function.\n    public void streamFlatMap() {\n        List<Integer> evens = Arrays.asList(2, 4, 6);\n        List<Integer> odds = Arrays.asList(3, 5, 7);\n        List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11);\n        List<Integer> numbers = Stream.of(evens, odds, primes)\n                .flatMap(list -> list.stream())\n                .collect(Collectors.toList());\n        System.out.println("flattend list: " + numbers);\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"distinct",children:"distinct()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The Java stream distinct() method is a non-terminal operation that returns a new stream\nthat will only contain the distinct elements from the original stream. Any duplicates will be eliminated."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    public void streamDistinct() {\n        Stream<String> fruitsStream = Stream.of("Apple", "Jack Fruit", "Water Melon", "Apple");\n        Stream<String> distinctStream = fruitsStream.distinct();\n        distinctStream.forEach(name -> System.out.println(name));\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"limit",children:"limit()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"It will truncate the remaining elements from the stream."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    public void streamLimit() {\n        Stream.of("one", "two", "three", "four").limit(2).forEach(item -> System.out.println(item));\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"peek",children:"peek()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"Stream<T> peek(Consumer<? super T> action)\n"})}),"\n",(0,a.jsx)(t.p,{children:"This intermediate operation returns a stream consisting of the elements of this stream,\nadditionally performing the provided action on each element as elements are consumed from the resulting stream.\nThe peek method is the intermediate method, so it will not execute until the terminal method is invoked."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"   // There will be no output.\n   public void streamPeek01() {\n        Stream.of(10, 20, 30).peek(e -> System.out.println(e));\n    }\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    // The peek method is used mainly for debugging\n    public void streamPeek02() {\n        Stream.of(10, 11, 12, 13)\n                .filter(n -> n % 2 == 0)\n                .peek(e -> System.out.println("Debug filtered value: " + e))\n                .map(n -> n * 10)\n                .peek(e -> System.out.println("Debug mapped value: " + e))\n                .collect(Collectors.toList());\n    }\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    // java 9\n    public void streamPeek03() {\n        long cnt = Stream.of(10, 11, 12, 13)\n                .peek(e -> System.out.println("Debug: " + e))\n                .count();\n        System.out.println(cnt);\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"skip",children:"skip()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"This method skips the given n elements and returns a Stream."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    public void streamSkip() {\n        Stream.of("one", "two", "three", "four", "five").skip(2).forEach(item -> System.out.println(item));\n    }\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.h3,{id:"sorted",children:"sorted()"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'    public void streamSorted() {\n        Stream<String> vegStream = Stream.of("cabbage", "Green Chilli", "Potato", "Beet root");\n        Stream<String> sortedStream = vegStream.sorted();\n        sortedStream.forEach(name -> System.out.println(name));\n    }\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);