"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[6375],{131:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var t=s(4848),a=s(8453),i=s(3514),r=s(5068);const o={slug:"/apache-flink"},l="Apache Flink",c={id:"streams/apache-flink/index",title:"Apache Flink",description:"Apache Flink Documentation (1.20)",source:"@site/docs/streams/apache-flink/index.mdx",sourceDirName:"streams/apache-flink",slug:"/apache-flink",permalink:"/docs/apache-flink",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/apache-flink"},sidebar:"tutorialSidebar",previous:{title:"Running Examples",permalink:"/docs/streams/java-8-streams/RunningExamples"},next:{title:"Operators",permalink:"/docs/apache-flink/operators"}},d={},h=[{value:"<em><strong>Apache Flink Documentation (1.20)</strong></em>",id:"apache-flink-documentation-120",level:4},{value:"What is Flink",id:"what-is-flink",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Stack",id:"stack",level:2},{value:"Stream Processing",id:"stream-processing",level:2},{value:"JobManager &amp; TaskManagers",id:"jobmanager--taskmanagers",level:2},{value:"Flink Application",id:"flink-application",level:2},{value:"Flink APIs",id:"flink-apis",level:2},{value:"Basic Flink Program Structure",id:"basic-flink-program-structure",level:2},{value:"1. Execution Environment",id:"1-execution-environment",level:3},{value:"2. Data Sources",id:"2-data-sources",level:3},{value:"3. Transformations",id:"3-transformations",level:3},{value:"4. Sinks",id:"4-sinks",level:3},{value:"5. Windowing",id:"5-windowing",level:3},{value:"6. Execute the Program",id:"6-execute-the-program",level:3},{value:"7. <em><strong>DataStream Connectors</strong></em>",id:"7-datastream-connectors",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"apache-flink",children:"Apache Flink"})}),"\n",(0,t.jsx)(n.h4,{id:"apache-flink-documentation-120",children:(0,t.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.20/",children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Apache Flink Documentation (1.20)"})})})}),"\n",(0,t.jsx)(n.h2,{id:"what-is-flink",children:"What is Flink"}),"\n",(0,t.jsxs)(n.p,{children:["Like Apache Hadoop and Apache Spark, ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Apache Flink"})})," is a community-driven open source framework for distributed Big Data Analytics. Written in Java, Flink has APIs for Scala, Java and Python, allowing for Batch and Real-Time streaming analytics."]}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"UNIX-like environment, such as Linux, Mac OS X or Cygwin"}),"\n",(0,t.jsx)(n.li,{children:"Java 6+"}),"\n",(0,t.jsx)(n.li,{children:"[optional] Maven 3.0.4+"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"stack",children:"Stack"}),"\n",(0,t.jsx)("img",{src:"/img/streams/apache-flink/struct-01.png",alt:"struct-01.png"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"stream-processing",children:"Stream Processing"}),"\n",(0,t.jsx)(n.p,{children:"When you analyze data, you can either organize your processing around bounded or unbounded stream."}),"\n",(0,t.jsx)("img",{src:"/img/streams/apache-flink/bounded-unbounded-streams-01.png",alt:"bounded-unbounded-streams-01.png",width:"800",height:"190"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Batch processing"})})," is the paradigm at work when you process a bounded data stream. In this mode of operation you can choose to ingest the entire dataset before producing any results, which means that it is possible, for example, to sort the data, compute global statistics, or produce a final report that summarizes all of the input.",(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Stream processing"})}),", on the other hand, involves unbounded data streams. Conceptually, at least, the input may never end, and so you are forced to continuously process the data as it arrives."]}),"\n",(0,t.jsx)(n.h2,{id:"jobmanager--taskmanagers",children:"JobManager & TaskManagers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"JobManager"})})," coordinates the distributed execution of Flink Applications. It decides when to schedule the next task or set of tasks. It reacts to completed tasks and task failures, coordinates checkpoints, coordinates recovery from failures and more.",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"TaskManagers"})})," (also called workers) execute the tasks of a dataflow, and buffer and exchange the data streams. There must always be at least one TaskManager. The smallest unit of resource scheduling in a TaskManager is a task slot. The number of task slots in a TaskManager indicates the number of concurrent processing tasks. Note that multiple operators may execute in a task slot. Each TaskManager is a JVM process."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"flink-application",children:"Flink Application"}),"\n",(0,t.jsxs)(n.p,{children:["A Flink Application is any user program that spawns one or multiple Flink jobs from its ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"main()"})})," method. The execution of these jobs can happen in a local JVM (LocalEnvironment) or on a remote setup of clusters with multiple machines (RemoteEnvironment). For each program, the ExecutionEnvironment provides methods to control the job execution and to interact with the outside world."]}),"\n",(0,t.jsx)(n.p,{children:"The jobs of a Flink Application can either be submitted to a long-running Flink Session Cluster, a dedicated cluster, or a Flink Application Cluster. Confluent Platform for Apache Flink supports Flink Application Clusters."}),"\n",(0,t.jsx)(n.h2,{id:"flink-apis",children:"Flink APIs"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"SQL"})})," provides the highest level of abstraction for Flink. This abstraction is similar to the Table API both in semantics and expressiveness, but represents programs as SQL query expressions. The Flink SQL abstraction interacts with the Table API, and SQL queries can be executed over tables defined in the Table API."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Table API"})})," is a declarative DSL centered around tables, which may be dynamically changing tables (when representing streams). The Table API follows the (extended) relational model: Tables have a schema attached, similar to tables in relational databases, and the Table API provides comparable operations, such as select, project, join, group-by, aggregate, and more. Table API programs declaratively define what logical operation should be done rather than specifying exactly how the code for the operation looks. Though the Table API is extensible by various types of user-defined functions, it is less expressive than the Core APIs, and more concise to use, meaning you write less code. In addition, Table API programs go through an optimizer that applies optimization rules before execution. You can seamlessly convert between tables and DataStream APIs enabling programs to mix the Table API with the DataStream API."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"DataStream API"})})," offers the common building blocks for data processing, like various forms of user-specified transformations, joins, aggregations, windows, state, etc. Data types processed in DataStream API are represented as classes in the respective programming languages. In addition, you can also use the lower-level Process Function operation with the DataStream API, so it is possible to use the lower-level abstraction when necessary."]}),"\n",(0,t.jsxs)(n.li,{children:["The lowest level of abstraction offers stateful and timely stream processing with the ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Process Function"})})," operator. The ProcessFunction operator, which is embedded in DataStream API enables users to freely process events from one or more streams, and provides consistent, fault tolerant state. In addition, users can register event time and processing time callbacks, allowing programs to realize sophisticated computations. In practice, many applications don\u2019t need the low-level abstractions offered by the Process Function operation, and can instead use the DataStream API for bounded and unbounded streams."]}),"\n",(0,t.jsx)(n.li,{children:"The DataSet API has been deprecated."}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.mdxAdmonitionTitle,{children:[(0,t.jsx)(n.a,{href:"https://docs.confluent.io/platform/current/flink/concepts/architecture.html",children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Confluent Documentation. Flink Concepts"})})}),":",(0,t.jsx)("br",{})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parallel dataflows"}),"\n",(0,t.jsx)(n.li,{children:"Timely stream processing"}),"\n",(0,t.jsx)(n.li,{children:"Stateful stream processing"}),"\n",(0,t.jsx)(n.li,{children:"State management"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"basic-flink-program-structure",children:"Basic Flink Program Structure"}),"\n",(0,t.jsx)(n.h3,{id:"1-execution-environment",children:"1. Execution Environment"}),"\n",(0,t.jsx)(n.p,{children:"The execution environment is where your program will run. Flink provides different execution environments based on the context, such as local, remote, or a cluster environment. The environment serves as the entry point for all Flink applications."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-data-sources",children:"2. Data Sources"}),"\n",(0,t.jsx)(n.p,{children:"Data sources define where your input data is coming from. Flink can read data from various sources such as files, Kafka topics, sockets, and more."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Apache Kafka: For reading from Kafka topics."}),"\n",(0,t.jsx)(n.li,{children:"Kinesis: For reading from AWS Kinesis streams."}),"\n",(0,t.jsx)(n.li,{children:"RabbitMQ: For reading from RabbitMQ queues."}),"\n",(0,t.jsx)(n.li,{children:"Files: For reading from various file formats (CSV, JSON, Avro)."}),"\n",(0,t.jsx)(n.li,{children:"Socket: For reading from socket streams."}),"\n",(0,t.jsx)(n.li,{children:"JDBC: For reading from relational databases."}),"\n",(0,t.jsx)(n.li,{children:"Cassandra: For reading data from Apache Cassandra tables, A NoSQL DBMS"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'\nDataStream<String> text = env.readTextFile("path/to/your/file");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-transformations",children:"3. Transformations"}),"\n",(0,t.jsx)(n.p,{children:"Transformations are operations that process and modify the data. Flink provides a rich set of transformation operations such as map, flatMap, filter, keyBy, and more."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"DataStream<Tuple2<String, Integer>> wordCounts = text\n    .flatMap(new Tokenizer())\n    .keyBy(tuple -> tuple.f0)\n    .sum(1);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-sinks",children:"4. Sinks"}),"\n",(0,t.jsx)(n.p,{children:"Sinks define where the processed data should be written to. Common sinks include files, databases, and standard output."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Apache Kafka: For writing to Kafka topics."}),"\n",(0,t.jsx)(n.li,{children:"Kinesis: For writing to AWS Kinesis streams."}),"\n",(0,t.jsx)(n.li,{children:"Elasticsearch: For writing to Elasticsearch indexes."}),"\n",(0,t.jsx)(n.li,{children:"Files: For writing to various file formats (CSV, JSON, Avro)."}),"\n",(0,t.jsx)(n.li,{children:"JDBC: For writing to relational databases."}),"\n",(0,t.jsx)(n.li,{children:"HDFS: For writing to Hadoop Distributed File System."}),"\n",(0,t.jsx)(n.li,{children:"Cassandra: For writing to Apache Cassandra tables."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"wordCounts.print();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-windowing",children:"5. Windowing"}),"\n",(0,t.jsx)(n.p,{children:"Windowing groups data into time-based or count-based windows for aggregation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"DataStream<Tuple2<String, Integer>> windowedCounts = stream\n    .flatMap(new Tokenizer())\n    .keyBy(0)\n    .window(TumblingProcessingTimeWindows.of(Time.seconds(5)))\n    .sum(1);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"6-execute-the-program",children:"6. Execute the Program"}),"\n",(0,t.jsx)(n.p,{children:"The execution of the Flink program is triggered by calling the execute method on the StreamExecutionEnvironment. This method compiles the program into a dataflow graph and sends it for execution."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'env.execute("Flink WordCount Example");\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"7-datastream-connectors",children:["7. ",(0,t.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/overview/",children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"DataStream Connectors"})})})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Apache Kafka (source/sink)"}),"\n",(0,t.jsx)(n.li,{children:"Apache Cassandra (source/sink)"}),"\n",(0,t.jsx)(n.li,{children:"Amazon DynamoDB (sink)"}),"\n",(0,t.jsx)(n.li,{children:"Amazon Kinesis Data Streams (source/sink)"}),"\n",(0,t.jsx)(n.li,{children:"Amazon Kinesis Data Firehose (sink)"}),"\n",(0,t.jsx)(n.li,{children:"DataGen (source)"}),"\n",(0,t.jsx)(n.li,{children:"Elasticsearch (sink)"}),"\n",(0,t.jsx)(n.li,{children:"Opensearch (sink)"}),"\n",(0,t.jsx)(n.li,{children:"FileSystem (source/sink)"}),"\n",(0,t.jsx)(n.li,{children:"RabbitMQ (source/sink)"}),"\n",(0,t.jsx)(n.li,{children:"Google PubSub (source/sink)"}),"\n",(0,t.jsx)(n.li,{children:"Hybrid Source (source)"}),"\n",(0,t.jsx)(n.li,{children:"Apache Pulsar (source)"}),"\n",(0,t.jsx)(n.li,{children:"JDBC (sink)"}),"\n",(0,t.jsx)(n.li,{children:"MongoDB (source/sink)"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n","\n",(0,t.jsx)(i.A,{items:(0,r.$S)().items})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},3514:(e,n,s)=>{s.d(n,{A:()=>j});s(6540);var t=s(4164),a=s(6972),i=s(8774),r=s(5846),o=s(6654),l=s(1312),c=s(1107);const d={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var h=s(4848);function u(e){let{href:n,children:s}=e;return(0,h.jsx)(i.A,{href:n,className:(0,t.A)("card padding--lg",d.cardContainer),children:s})}function m(e){let{href:n,icon:s,title:a,description:i}=e;return(0,h.jsxs)(u,{href:n,children:[(0,h.jsxs)(c.A,{as:"h2",className:(0,t.A)("text--truncate",d.cardTitle),title:a,children:[s," ",a]}),i&&(0,h.jsx)("p",{className:(0,t.A)("text--truncate",d.cardDescription),title:i,children:i})]})}function p(e){let{item:n}=e;const s=(0,a.Nr)(n),t=function(){const{selectMessage:e}=(0,r.W)();return n=>e(n,(0,l.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return s?(0,h.jsx)(m,{href:s,icon:"\ud83d\uddc3\ufe0f",title:n.label,description:n.description??t(n.items.length)}):null}function x(e){let{item:n}=e;const s=(0,o.A)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",t=(0,a.cC)(n.docId??void 0);return(0,h.jsx)(m,{href:n.href,icon:s,title:n.label,description:n.description??t?.description})}function g(e){let{item:n}=e;switch(n.type){case"link":return(0,h.jsx)(x,{item:n});case"category":return(0,h.jsx)(p,{item:n});default:throw new Error(`unknown item type ${JSON.stringify(n)}`)}}function f(e){let{className:n}=e;const s=(0,a.$S)();return(0,h.jsx)(j,{items:s.items,className:n})}function j(e){const{items:n,className:s}=e;if(!n)return(0,h.jsx)(f,{...e});const i=(0,a.d1)(n);return(0,h.jsx)("section",{className:(0,t.A)("row",s),children:i.map(((e,n)=>(0,h.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,h.jsx)(g,{item:e})},n)))})}},5846:(e,n,s)=>{s.d(n,{W:()=>c});var t=s(6540),a=s(4586);const i=["zero","one","two","few","many","other"];function r(e){return i.filter((n=>e.includes(n)))}const o={locale:"en",pluralForms:r(["one","other"]),select:e=>1===e?"one":"other"};function l(){const{i18n:{currentLocale:e}}=(0,a.A)();return(0,t.useMemo)((()=>{try{return function(e){const n=new Intl.PluralRules(e);return{locale:e,pluralForms:r(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${n.message}\n`),o}}),[e])}function c(){const e=l();return{selectMessage:(n,s)=>function(e,n,s){const t=e.split("|");if(1===t.length)return t[0];t.length>s.pluralForms.length&&console.error(`For locale=${s.locale}, a maximum of ${s.pluralForms.length} plural forms are expected (${s.pluralForms.join(",")}), but the message contains ${t.length}: ${e}`);const a=s.select(n),i=s.pluralForms.indexOf(a);return t[Math.min(i,t.length-1)]}(s,n,e)}}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);