"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[6903],{4505:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=s(4848),i=s(8453);const r={sidebar_position:1},t="Intro",o={id:"intro",title:"Intro",description:"Reactive programming is an important programming paradigm that is becoming increasingly popular in Java development. Reactive programming is based on the use of asynchronous and non-blocking data streams to handle data and events.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Streams",permalink:"/docs/streams"}},c={},d=[{value:"Reactive Programming",id:"reactive-programming",level:2},{value:"Use Cases for Reactive Programming",id:"use-cases-for-reactive-programming",level:2},{value:"The Reactive Landscape",id:"the-reactive-landscape",level:2}];function l(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"intro",children:"Intro"}),"\n",(0,a.jsx)(n.p,{children:"Reactive programming is an important programming paradigm that is becoming increasingly popular in Java development. Reactive programming is based on the use of asynchronous and non-blocking data streams to handle data and events."}),"\n",(0,a.jsx)(n.h2,{id:"reactive-programming",children:"Reactive Programming"}),"\n",(0,a.jsxs)(n.p,{children:["Reactive programming is a programming paradigm that focuses on handling streams of data and events.\nThis programming paradigm uses asynchronous and non-blocking code to handle data streams, making it more efficient and scalable.\nReactive programming is based on the idea of reacting to events instead of blocking and waiting for them.",(0,a.jsx)("br",{}),"\nReactive programming is different from traditional programming paradigms in that it uses streams of data and events instead of objects and methods.\nThis allows developers to write code that is more efficient, responsive, and resilient."]}),"\n",(0,a.jsx)(n.h2,{id:"use-cases-for-reactive-programming",children:"Use Cases for Reactive Programming"}),"\n",(0,a.jsx)(n.p,{children:"Reactive programming is used in a variety of use cases, including:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Real-time streaming data: Reactive programming is ideal for handling real-time streaming data. It can be used to handle streams of data from sensors, social media, and other sources."}),"\n",(0,a.jsx)(n.li,{children:"Web development: Reactive programming can be used to handle asynchronous and non-blocking web requests. It can be used to build scalable and efficient web applications."}),"\n",(0,a.jsx)(n.li,{children:"Internet of Things: Reactive programming is ideal for handling streams of data from IoT devices. It can be used to handle large volumes of data and events in real-time."}),"\n",(0,a.jsx)(n.li,{children:"Big Data: Reactive programming can be used to handle large volumes of data in real-time. It can be used to process and analyze data in real-time."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"the-reactive-landscape",children:"The Reactive Landscape"}),"\n",(0,a.jsxs)(n.p,{children:["Reactive Landscape refers to the various tools, frameworks, and patterns that are used for building reactive systems. Reactive systems are designed to be responsive, resilient, elastic, and message-driven.\nThey are highly scalable and can handle a large number of requests with minimal resources.",(0,a.jsx)("br",{}),"\nThe Reactive Landscape includes several frameworks and tools, such as Reactive Streams, RxJava, Reactor, Spring Framework, Akka, and Ratpack.\nThese frameworks and tools provide developers with the necessary building blocks for building reactive systems."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Reactive Stream"})})})," is a low-level specification that defines the interaction between asynchronous stream processing with non-blocking backpressure.\nIt is a standard for building reactive systems in Java and has been incorporated into the JDK as java.util.concurrent.Flow in version 9."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"SmallRye Mutiny"})})}),"  defines two reactive types:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Multi"})})})," - represents streams of 0..* items (potentially unbounded)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Uni"})})})," - represents streams receiving either an item or a failure",(0,a.jsx)("br",{}),"\nMutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course\u2026 reactive applications!"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Project Reactor"})})})," is a Java framework for building reactive systems.\nIt builds directly on Reactive Streams and provides a complete set of building blocks for building reactive systems, including an event-driven programming model, backpressure handling, and support for multiple data sources."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"RxJava"})})})," is a library for composing asynchronous and event-based programs using observable sequences.\nIt allows developers to work with complex asynchronous data flows, with the ability to apply operations such as filtering, mapping, and combining to these flows."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Spring Framework 5.0"})})})," includes reactive features for building HTTP servers and clients.\nIt builds on Reactor and provides a familiar programming model for developers who are already familiar with Spring.\nSpring Framework 5.0 includes support for several network stacks, including Tomcat, Jetty, Netty, and Undertow."]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://vertx.io/",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Vert.x"})})})})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://quarkus.io/",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.strong,{children:"Quarkus"})})})})}),"\n",(0,a.jsx)(n.li,{children:"..."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var a=s(6540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);