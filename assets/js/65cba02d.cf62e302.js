"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[2774],{9666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(4848),r=n(8453);const i={sidebar_position:3},o="partitioningBy",s={id:"streams/java-8-streams/collectors/partitioning",title:"partitioningBy",description:"Collectors **partitioningBy()** method is a predefined method of java.util.stream. Collectors class which is used to partition a stream of objects(or a set of elements) based on a given predicate. There are two overloaded variants of the method that are present. One takes only a predicate as a parameter whereas the other takes both predicate and a collector instance as parameters.",source:"@site/docs/streams/java-8-streams/collectors/partitioning.mdx",sourceDirName:"streams/java-8-streams/collectors",slug:"/streams/java-8-streams/collectors/partitioning",permalink:"/docs/streams/java-8-streams/collectors/partitioning",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"joining",permalink:"/docs/streams/java-8-streams/collectors/joining"},next:{title:"reducing",permalink:"/docs/streams/java-8-streams/collectors/reducing"}},l={},c=[{value:"<em><strong><strong>partitioningBy(predicate)</strong></strong></em>",id:"partitioningbypredicate",level:2},{value:"Example",id:"example",level:3},{value:"<em><strong><strong>partitioningBy(predicate, collector)</strong></strong></em>",id:"partitioningbypredicate-collector",level:2},{value:"Example",id:"example-1",level:3},{value:"Example",id:"example-2",level:3}];function p(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"partitioningby",children:"partitioningBy"}),"\n",(0,a.jsxs)(t.p,{children:["Collectors ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.strong,{children:"partitioningBy()"})})})," method is a predefined method of java.util.stream. Collectors class which is used to partition a stream of objects(or a set of elements) based on a given predicate. There are two overloaded variants of the method that are present. One takes only a predicate as a parameter whereas the other takes both predicate and a collector instance as parameters."]}),"\n",(0,a.jsx)(t.h2,{id:"partitioningbypredicate",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.strong,{children:"partitioningBy(predicate)"})})})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"partitioningBy(Predicate<? super T> predicate)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"\npublic static <T> Collector<T, ?, Map<Boolean, List<T>>> partitioningBy(Predicate<? super T> predicate)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Where:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"Interface Collector<T, A, R>: A mutable reduction operation that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel.\nT: The type of input elements to the reduction operation.\nA: The mutable accumulation type of the reduction operation.\nR: The result type of the reduction operation.\nMap<Boolean, List<T>>: The map containing the output.Keys are boolean values(true or false) and the corresponding values are lists containing elements of type T.\n"})}),"\n",(0,a.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'\n    public void partitioningByPredicate() {\n        List<String> names = Arrays.asList("zjc", "stream", "collector", "map", "mapping");\n        Map<Boolean, List<String>> partitionByNameLength = names.stream()\n                .collect(Collectors.partitioningBy(name -> name.length() > 3));\n\n        System.out.println(partitionByNameLength);\n    }\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"output"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"{false=[zjc, map], true=[stream, collector, mapping]}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"partitioningbypredicate-collector",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.strong,{children:"partitioningBy(predicate, collector)"})})})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"partitioningBy(Predicate<? super T>predicate, Collector<? super T, A, D> downstream)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"\n public static <T> Collector<T, ?, Map<Boolean, List<T>>> partitioningBy(Predicate<? super T>predicate, Collector<? super T, A, D> downstream)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Where:"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"\n\n    Interface Collector<T, A, R>: A mutable reduction operation that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel.\n        T: The type of input elements to the reduction operation.\n        A: The mutable accumulation type of the reduction operation.\n        R: The result type of the reduction operation.\n    Map<Boolean, List<T>>: The map containing the output.Keys are boolean values(true or false) and the corresponding values are lists containing elements of type T.\n"})}),"\n",(0,a.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'\n    public void partitioningByPredicateDownstream() {\n        List<String> names = Arrays.asList("zjc", "stream", "collector", "map", "mapping");\n        Map<Boolean, List<String>> partitionByNameLength = names.stream()\n                .collect(Collectors.partitioningBy(name -> name.length() > 3,\n                        Collectors.mapping(String::toUpperCase, Collectors.toList())));\n\n        System.out.println(partitionByNameLength);\n    }\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"output"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"{false=[zjc, map], true=[stream, collector, mapping]}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"\n    public void partitioningByPredicateCounting() {\n        List<Double> dbs = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        Map<Boolean, Long> partitionByAvgGrade = dbs.stream()\n                .collect(Collectors.partitioningBy(db-> db > 3.0,\n                        Collectors.counting()));\n\n        System.out.println(partitionByAvgGrade);\n    }\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"output"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"{false=3, true=2}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(6540);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);