"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[5031],{4749:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"quarkus/examples/crud-reactive-getting-started","title":"CRUD - Reactive Getting Started","description":"Prerequisites","source":"@site/docs/quarkus/examples/crud-reactive-getting-started.mdx","sourceDirName":"quarkus/examples","slug":"/quarkus/examples/crud-reactive-getting-started","permalink":"/docs/quarkus/examples/crud-reactive-getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"sidebar_position":40},"sidebar":"tutorialSidebar","previous":{"title":"Hibernate Reactive Panache Quickstart","permalink":"/docs/quarkus/examples/quarkus-hibernate-reactive-panache-quickstart"},"next":{"title":"Quarkus Mongodb Quickstart","permalink":"/docs/quarkus/examples/quarkus-mongodb-quickstart"}}');var a=t(4848),i=t(8453);const s={sidebar_position:40},u="CRUD - Reactive Getting Started",c={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Database",id:"database",level:3},{value:"pom.xml",id:"pomxml",level:3},{value:"application.properties",id:"applicationproperties",level:3},{value:"FruitResource.java",id:"fruitresourcejava",level:3},{value:"Database schema and seed data",id:"database-schema-and-seed-data",level:3},{value:"DBInit.java",id:"dbinitjava",level:3},{value:"Running the production application",id:"running-the-production-application",level:3},{value:"Source code:",id:"source-code",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"crud---reactive-getting-started",children:"CRUD - Reactive Getting Started"})}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"JDK 17+"}),"\n",(0,a.jsx)(n.li,{children:"Quarkus 3.12.1"}),"\n",(0,a.jsx)(n.li,{children:"Apache Maven 3.9.8"}),"\n",(0,a.jsx)(n.li,{children:"Docker (postgres:14.1)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)("img",{src:"/img/quarkus/crud/quarkus-crud-project-structure-01.png",alt:"quarkus-crud-project-structure-01.png"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"\ndocker run -it --rm=true --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:14.1\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"\n//...\n    <properties>\n        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n        <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>\n        <quarkus.platform.version>3.12.1</quarkus.platform.version>\n        <compiler-plugin.version>3.11.0</compiler-plugin.version>\n        <surefire-plugin.version>3.1.2</surefire-plugin.version>\n        <docker-plugin.version>0.28.0</docker-plugin.version>\n        <maven.compiler.target>17</maven.compiler.target>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.parameters>true</maven.compiler.parameters>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>${quarkus.platform.group-id}</groupId>\n                <artifactId>${quarkus.platform.artifact-id}</artifactId>\n                <version>${quarkus.platform.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n            <artifactId>quarkus-reactive-pg-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n            <artifactId>quarkus-rest-jackson</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n            <artifactId>quarkus-junit5</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.rest-assured</groupId>\n            <artifactId>rest-assured</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n//...\n"})}),"\n",(0,a.jsx)(n.h3,{id:"applicationproperties",children:"application.properties"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"%prod.quarkus.datasource.db-kind=postgresql\n%prod.quarkus.datasource.username=quarkus_test\n%prod.quarkus.datasource.password=quarkus_test\n%prod.quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\nmyapp.schema.create=true\n"})}),"\n",(0,a.jsxs)(n.p,{children:["With that you can create your FruitResource skeleton and inject a\n",(0,a.jsx)(n.a,{href:"https://smallrye.io/smallrye-mutiny-vertx-bindings/2.20.0/apidocs/io/vertx/mutiny/pgclient/PgPool.html",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"io.vertx.mutiny.pgclient.PgPool"})})})," instance:"]}),"\n",(0,a.jsx)(n.h3,{id:"fruitresourcejava",children:"FruitResource.java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package org.acme.reactive.crud;\n\nimport java.net.URI;\n\nimport jakarta.ws.rs.DELETE;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.POST;\nimport jakarta.ws.rs.PUT;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.core.Response;\nimport jakarta.ws.rs.core.Response.ResponseBuilder;\nimport jakarta.ws.rs.core.Response.Status;\n\nimport io.smallrye.mutiny.Multi;\nimport io.smallrye.mutiny.Uni;\nimport io.vertx.mutiny.pgclient.PgPool;\n\n@Path("fruits")\npublic class FruitResource {\n\n    private final PgPool client;\n\n    public FruitResource(PgPool client) {\n        this.client = client;\n    }\n\n    @GET\n    public Multi<Fruit> get() {\n        return Fruit.findAll(client);\n    }\n\n    @GET\n    @Path("{id}")\n    public Uni<Response> getSingle(Long id) {\n        return Fruit.findById(client, id)\n                .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) : Response.status(Status.NOT_FOUND))\n                .onItem().transform(ResponseBuilder::build);\n    }\n\n    @POST\n    public Uni<Response> create(Fruit fruit) {\n        return fruit.save(client)\n                .onItem().transform(id -> URI.create("/fruits/" + id))\n                .onItem().transform(uri -> Response.created(uri).build());\n    }\n\n    @PUT\n    @Path("{id}")\n    public Uni<Response> update(Long id, Fruit fruit) {\n        return fruit.update(client)\n                .onItem().transform(updated -> updated ? Status.OK : Status.NOT_FOUND)\n                .onItem().transform(status -> Response.status(status).build());\n    }\n\n    @DELETE\n    @Path("{id}")\n    public Uni<Response> delete(Long id) {\n        return Fruit.delete(client, id)\n                .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : Status.NOT_FOUND)\n                .onItem().transform(status -> Response.status(status).build());\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"database-schema-and-seed-data",children:"Database schema and seed data"}),"\n",(0,a.jsx)(n.p,{children:"Before we implement the REST endpoint and data management code, we must set up the database schema. It would also be convenient to have some data inserted up front."}),"\n",(0,a.jsx)(n.p,{children:"For production, we would recommend to use something like the Flyway database migration tool. But for development we can simply drop and create the tables on startup, and then insert a few fruits."}),"\n",(0,a.jsx)(n.h3,{id:"dbinitjava",children:"DBInit.java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package org.acme.reactive.crud;\n\nimport io.quarkus.runtime.StartupEvent;\nimport io.vertx.mutiny.pgclient.PgPool;\nimport org.eclipse.microprofile.config.inject.ConfigProperty;\n\nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.enterprise.event.Observes;\n\n@ApplicationScoped\npublic class DBInit {\n\n    private final PgPool client;\n    private final boolean schemaCreate;\n\n    public DBInit(PgPool client, @ConfigProperty(name = "myapp.schema.create", defaultValue = "true") boolean schemaCreate) {\n        this.client = client;\n        this.schemaCreate = schemaCreate;\n    }\n\n    void onStart(@Observes StartupEvent ev) {\n        if (schemaCreate) {\n            initdb();\n        }\n    }\n\n    private void initdb() {\n        client.query("DROP TABLE IF EXISTS fruits").execute()\n                .flatMap(r -> client.query("CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)").execute())\n                .flatMap(r -> client.query("INSERT INTO fruits (name) VALUES (\'Kiwi\')").execute())\n                .flatMap(r -> client.query("INSERT INTO fruits (name) VALUES (\'Durian\')").execute())\n                .flatMap(r -> client.query("INSERT INTO fruits (name) VALUES (\'Pomelo\')").execute())\n                .flatMap(r -> client.query("INSERT INTO fruits (name) VALUES (\'Lychee\')").execute())\n                .await().indefinitely();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"running-the-production-application",children:"Running the production application"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"./mvnw install\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"java -jar target/quarkus-app/quarkus-run.jar\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:" http://localhost:8080/fruits\n"})}),"\n",(0,a.jsx)("img",{src:"/img/quarkus/crud/localhost-fruits-01.png",alt:"quarkus-crud-project-structure-01.png"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("img",{src:"/img/quarkus/crud/db-fruits-01.png",alt:"quarkus-crud-project-structure-01.png"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"source-code",children:"Source code:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/quarkus/crud/getting-started-reactive-crud",children:"https://github.com/ZbCiok/zjc-examples/tree/main/quarkus/crud/getting-started-reactive-crud"})})})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>u});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);