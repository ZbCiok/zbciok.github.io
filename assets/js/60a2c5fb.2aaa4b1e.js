"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1248],{3587:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=i(4848),r=i(8453);const s={sidebar_position:2},o="joining",a={id:"streams/java-8-streams/collectors/joining",title:"joining",description:"joining()",source:"@site/docs/streams/java-8-streams/collectors/joining.mdx",sourceDirName:"streams/java-8-streams/collectors",slug:"/streams/java-8-streams/collectors/joining",permalink:"/docs/streams/java-8-streams/collectors/joining",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"groupingBy classifier supplier collector",permalink:"/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-supplier-collector"},next:{title:"partitioningBy",permalink:"/docs/streams/java-8-streams/collectors/partitioning"}},l={},c=[{value:"<em><strong>joining()</strong></em>",id:"joining-1",level:2},{value:"Example",id:"example",level:3},{value:"streamJoining()",id:"streamjoining",level:4},{value:"output",id:"output",level:4},{value:"<em><strong><strong>joining(CharSequence delimiter)</strong></strong></em>",id:"joiningcharsequence-delimiter",level:2},{value:"Example",id:"example-1",level:3},{value:"streamJoiningDelimiter()",id:"streamjoiningdelimiter",level:4},{value:"output",id:"output-1",level:4},{value:"<em><strong><strong>joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)</strong></strong></em>",id:"joiningcharsequence-delimiter-charsequence-prefix-charsequence-suffix",level:2},{value:"Example",id:"example-2",level:3},{value:"streamJoiningDelimiterChars()",id:"streamjoiningdelimiterchars",level:4},{value:"output",id:"output-2",level:4}];function m(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"joining",children:"joining"}),"\n",(0,t.jsx)(n.h2,{id:"joining-1",children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"joining()"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.strong,{children:"joining()"})})})," is a static method of Collectors that returns a Collector that concatenates the input elements with the specified delimiter. There are three variations of the joining() method:"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.h4,{id:"streamjoining",children:"streamJoining()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamJoining() {\n        List<String> stringList = Arrays.asList("zjc", "streams", "collectors");\n        System.out.println("Stream before modification - " + stringList);\n\n        Stream<String> stringStream = stringList.stream();\n        // concat the elements of the list using the joining method\n        String concatenatedString = stringStream.map(String::toUpperCase).collect(Collectors.joining());\n\n        // result after the concatenation\n        System.out.println(concatenatedString);\n    }\n'})}),"\n",(0,t.jsx)(n.h4,{id:"output",children:"output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"ZJCSTREAMSCOLLECTORS\n"})}),"\n",(0,t.jsx)(n.h2,{id:"joiningcharsequence-delimiter",children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.strong,{children:"joining(CharSequence delimiter)"})})})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.h4,{id:"streamjoiningdelimiter",children:"streamJoiningDelimiter()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamJoiningDelimiter() {\n        List<String> stringList = Arrays.asList("zjc", "streams", "collectors");\n        System.out.println("Stream before modification - " + stringList);\n\n        Stream<String> stringStream = stringList.stream();\n        // delimiter to use\n        String delimiter = "-";\n        // concat the elements of the list using the joining method\n        String concatenatedString = stringStream.map(String::toUpperCase).collect(Collectors.joining(delimiter));\n\n        // result after the concatenation\n        System.out.println(concatenatedString);\n    }\n'})}),"\n",(0,t.jsx)(n.h4,{id:"output-1",children:"output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"ZJC-STREAMS-COLLECTORS\n"})}),"\n",(0,t.jsx)(n.h2,{id:"joiningcharsequence-delimiter-charsequence-prefix-charsequence-suffix",children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.strong,{children:"joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)"})})})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.h4,{id:"streamjoiningdelimiterchars",children:"streamJoiningDelimiterChars()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamJoiningDelimiterChars() {\n        List<String> stringList = Arrays.asList("zjc", "streams", "collectors");\n        System.out.println("Stream before modification - " + stringList);\n\n        Stream<String> stringStream = stringList.stream();\n\n        // delimiter to use\n        String delimiter = "-";\n\n        // prefix to use\n        String prefix = "prefix-";\n\n        // suffix to use\n        String suffix = "-suffix";\n\n        // concat the elements of the list using the joining method\n        String concatenatedString = stringStream.map(String::toUpperCase).collect(Collectors.joining(delimiter, prefix, suffix));\n\n        // result after the concatenation\n        System.out.println(concatenatedString);\n    }\n'})}),"\n",(0,t.jsx)(n.h4,{id:"output-2",children:"output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"prefix-ZJC-STREAMS-COLLECTORS-suffix\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);