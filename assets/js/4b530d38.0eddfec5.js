"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[8788],{8577:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(4848),s=a(8453);const r={sidebar_position:2},i="Terminate Operations",l={id:"streams/java-8-streams/operations-on-streams/TerminateOperations",title:"Terminate Operations",description:"The terminal operations of the Java Stream interface typically return a single value.",source:"@site/docs/streams/java-8-streams/operations-on-streams/TerminateOperations.mdx",sourceDirName:"streams/java-8-streams/operations-on-streams",slug:"/streams/java-8-streams/operations-on-streams/TerminateOperations",permalink:"/docs/streams/java-8-streams/operations-on-streams/TerminateOperations",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intermediate Operations",permalink:"/docs/streams/java-8-streams/operations-on-streams/IntermediateOperations"},next:{title:"Collectors",permalink:"/docs/streams/java-8-streams/collectors"}},o={},c=[{value:"List of stream Terminate operations:",id:"list-of-stream-terminate-operations",level:2},{value:"anyMatch()",id:"anymatch",level:3},{value:"allMatch()",id:"allmatch",level:3},{value:"allMatch()",id:"allmatch-1",level:3},{value:"noneMatch()",id:"nonematch",level:3},{value:"collect()",id:"collect",level:3},{value:"count()",id:"count",level:3},{value:"distinct",id:"distinct",level:3},{value:"groupingFindDuplicatesS(stream)",id:"groupingfindduplicatessstream",level:3},{value:"findFirst()",id:"findfirst",level:3},{value:"findAny()",id:"findany",level:3},{value:"forEach()",id:"foreach",level:3},{value:"min()",id:"min",level:3},{value:"max()",id:"max",level:3},{value:"reduce()",id:"reduce",level:3},{value:"sum()",id:"sum",level:3},{value:"average(",id:"average",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"terminate-operations",children:"Terminate Operations"}),"\n",(0,t.jsx)("img",{src:"/img/streams/java-8-streams/immediate-operations-01.png",alt:"immediate-operations-01.png"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"The terminal operations of the Java Stream interface typically return a single value."}),"\n",(0,t.jsx)(n.h2,{id:"list-of-stream-terminate-operations",children:"List of stream Terminate operations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"anymatch",children:"anyMatch()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"boolean anyMatch(Predicate<? super T> predicate)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Stream anyMatch(Predicate predicate) returns whether any elements of this stream match the provided predicate."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamAnyMatch() {\n        List<String> stringList = new ArrayList<String>();\n\n        stringList.add("Java Guides");\n        stringList.add("Python Guides");\n        stringList.add("C Guides");\n\n        Stream<String> stream = stringList.stream();\n\n        boolean anyMatch = stream.anyMatch((value) -> { return value.startsWith("Java"); });\n        System.out.println(anyMatch);\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"allmatch",children:"allMatch()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"boolean allMatch(Predicate<? super T> predicate)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The allMatch() method returns always a true or false, based on the result of the evaluation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamAllMatch() {\n        Stream<String> stream = Stream.of("one", "two", "three", "four");\n        Predicate<String> containsDigit = s -> s.contains("\\\\d+") == false;\n        boolean match = stream.allMatch(containsDigit);\n\n        System.out.println(match);\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"allmatch-1",children:"allMatch()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"boolean allMatch(Predicate<? super T> predicate)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The allMatch() method returns always a true or false, based on the result of the evaluation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void collectToMap01() {\n        Stream<String> s = Stream.of("apple", "banana", "orange");\n        Map<Character, String> m = s.collect(Collectors.toMap(s1 -> s1.charAt(0), s1 -> s1));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    // IllegalStateException - duplicate keys\n    public void collectToMap02() {\n        Stream<String> s = Stream.of("apple", "banana", "apricot", "orange");\n        Map<Character, String> m = s.collect(Collectors.toMap(s1 -> s1.charAt(0), s1 -> s1));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void collectToMap03() {\n        Stream<String> s = Stream.of("apple", "banana", "apricot", "orange", "apple");\n        Map<Character, String> m = s.collect(Collectors.toMap(s1 -> s1.charAt(0),\n                                             s1 -> s1,\n                                             (s1, s2) -> s1 + "|" + s2));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void collectToMap04() {\n        Stream<String> s = Stream.of("apple", "banana", "apricot", "orange", "apple");\n        LinkedHashMap<Character, String> m = s.collect(\n                Collectors.toMap(s1 -> s1.charAt(0),\n                                 s1 -> s1,\n                                 (s1, s2) -> s1 + "|" + s2,\n                                  LinkedHashMap::new));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"nonematch",children:"noneMatch()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"boolean noneMatch(Predicate<? super T> predicate)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamNoneMatch() {\n        Stream<String> stream = Stream.of("one", "two", "three", "four");\n        boolean answer = stream.noneMatch(str -> (str.length() == 10));\n        System.out.println(answer);\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"collect",children:"collect()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"<T,K,U> Collector<T,?,Map<K,U>> toMap(Function<? super T,? extends K> keyMapper,\n                                      Function<? super T,? extends U> valueMapper)\n<T,K,U> Collector<T,?,Map<K,U>> toMap(Function<? super T,? extends K> keyMapper,\n                                      Function<? super T,? extends U> valueMapper,\n                                      BinaryOperator<U> mergeFunction)\n<T,K,U,M extends Map<K,U>> Collector<T,?,M> toMap(Function<? super T,? extends K> keyMapper,\n                                                  Function<? super T,? extends U> valueMapper,\n                                                  BinaryOperator<U> mergeFunction,\n                                                  Supplier<M> mapSupplier)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Parameters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"keyMapper: A mapping function to produce the map keys for each input stream element.\nvalueMapper: A mapping function to produce the map values for each input stream element.\nmergeFunction: A binary operator which is to resolve collisions between values associated with the same key. The inputs to this function are the values which belong to the same key.\nmapSupplier: A function which provides a new instance of the desired implementation of the Map.\n"})}),"\n",(0,t.jsx)(n.p,{children:"The method:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// if there are duplicate keys as provided by keyMapper function.\nCollectors.toMap(keyMapper, valueMapper) throw IllegalStateException\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void collectToMap01() {\n        Stream<String> s = Stream.of("apple", "banana", "orange");\n        Map<Character, String> m = s.collect(Collectors.toMap(s1 -> s1.charAt(0), s1 -> s1));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    // IllegalStateException - duplicate keys\n    public void collectToMap02() {\n        Stream<String> s = Stream.of("apple", "banana", "apricot", "orange");\n        Map<Character, String> m = s.collect(Collectors.toMap(s1 -> s1.charAt(0), s1 -> s1));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void collectToMap03() {\n        Stream<String> s = Stream.of("apple", "banana", "apricot", "orange", "apple");\n        Map<Character, String> m = s.collect(Collectors.toMap(s1 -> s1.charAt(0),\n                                             s1 -> s1,\n                                             (s1, s2) -> s1 + "|" + s2));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void collectToMap04() {\n        Stream<String> s = Stream.of("apple", "banana", "apricot", "orange", "apple");\n        LinkedHashMap<Character, String> m = s.collect(\n                Collectors.toMap(s1 -> s1.charAt(0),\n                                 s1 -> s1,\n                                 (s1, s2) -> s1 + "|" + s2,\n                                  LinkedHashMap::new));\n        System.out.println(m);\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"count",children:"count()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamCount() {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 7, 9, 22, 19, 18, 47, 3, 12, 29, 17, 44, 78, 99));\n        long count = numbers.stream().count();\n        System.out.println(count);\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"distinct",children:"distinct"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Method to find all instances of a class with unique id."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    // Get distinct people by id\n    public void streamDistinct() {\n        Person doeOne = new Person(1, "John", "Doe");\n        Person doeTwo = new Person(1, "John", "Doe");\n        Person doeThree = new Person(1, "John", "Doe");\n        Person brianOne = new Person(2, "Brian", "Clooney");\n        Person brianTwo = new Person(2, "Brian", "Clooney");\n        Person alex = new Person(3, "Alex", "Kolen");\n\n        Collection<Person> list = Arrays.asList(\n                alex,\n                brianOne,\n                brianTwo,\n                doeOne,\n                doeTwo,\n                doeThree);\n\n        List<Person> distinctElements = list.stream()\n                .distinct()\n                .collect( Collectors.toList() );\n\n        System.out.println( distinctElements );\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"groupingfindduplicatessstream",children:"groupingFindDuplicatesS(stream)"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamDuplicates() {\n        // Initial stream\n        Stream<Integer> stream = Stream.of(5, 13, 4, 21, 13, 27, 2, 59, 59, 34);\n        // Print the found duplicate elements\n        System.out.println(groupingFindDuplicatesS(stream));\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"findfirst",children:"findFirst()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamFindFirst() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 2, 1);\n        Optional<Integer> first = list\n                .stream()\n                .filter(x -> x > 1).findFirst();\n\n        if (first.isPresent()) {\n            System.out.println(first.get()); // 2\n        } else {\n            System.out.println("no value?");\n        }\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"findany",children:"findAny()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamFindAny() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 2, 1);\n        Optional<Integer> any = list.stream().filter(x -> x > 1).findAny();\n        if (any.isPresent()) {\n            Integer result = any.get();\n            System.out.println(result);\n        }\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"foreach",children:"forEach()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"forEach() method is used to iterate or loop each element of Collection or Map or Stream."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamForEach() {\n        List<String> list = new ArrayList<>();\n        list.add("John");\n        list.add("Oliver");\n        list.add("Jack");\n        list.add("Henry");\n\n        list.stream().forEach(value -> System.out.println(value));\n    }\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"min",children:"min()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Optional<T> min(Comparator<? super T> comparator);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamMax() {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(14, 98, 72, 8, 3, 1, 10, 14, 42, 97, 24));\n        int maxNumber = numbers.stream()\n                .max(Comparator.comparing(Integer::valueOf))\n                .get();\n        System.out.println(maxNumber);\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"max",children:"max()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Optional<T> max(Comparator<? super T> comparator);\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamMax() {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(14, 98, 72, 8, 3, 1, 10, 14, 42, 97, 24));\n        int maxNumber = numbers.stream()\n                .max(Comparator.comparing(Integer::valueOf))\n                .get();\n        System.out.println(maxNumber);\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"reduce",children:"reduce()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:" reduce(T identity, BinaryOperator<T> accumulator);\n// identity \u2013 an element that is the initial value of the reduction operation and the default result if the stream is empty\n// accumulator \u2013 It\u2019s a BinaryOperator. It represents a function that takes two parameters, the first is the result of a previous reduction operation, and the second is the next element in the stream.\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamReduce() {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(3, 5, 7, 9));\n        int result = numbers.stream().reduce(1, (num1, num2) -> num1 * num2);\n        System.out.println(result);\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"sum",children:"sum()"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"    public void streamSum() {\n        List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\n        Integer sum = integers.stream()\n                .mapToInt(Integer::intValue)\n                .sum();\n        System.out.println(sum);\n    }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.h3,{id:"average",children:"average("}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'    public void streamAverage() {\n        IntStream stream = IntStream.of(1,2, 3, 4, 5, 6, 7, 8);\n        OptionalDouble obj = stream.average();\n        if (obj.isPresent()) {\n            System.out.println(obj.getAsDouble());\n        } else {\n            System.out.println("-1");\n        }\n    }\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var t=a(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);