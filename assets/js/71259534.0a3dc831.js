"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[9223],{7299:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=r(4848),t=r(8453);const o={sidebar_position:1},a="Mono and Flux",l={id:"project-reactor/mono-and-flux",title:"Mono and Flux",description:"Mono represents a publisher **(Project Reactor)** of zero or one object of type T.",source:"@site/docs/project-reactor/mono-and-flux.mdx",sourceDirName:"project-reactor",slug:"/project-reactor/mono-and-flux",permalink:"/docs/project-reactor/mono-and-flux",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Project Reactor",permalink:"/docs/project-reactor"},next:{title:"Implementations",permalink:"/docs/project-reactor/project-reactor-implemented-in"}},i={},c=[{value:"Common Methods and Operations",id:"common-methods-and-operations",level:2},{value:"Example #1 <em><strong><strong>Mono.just</strong></strong></em>",id:"example-1-monojust",level:3},{value:"Example #2 <em><strong><strong>Mono.just</strong></strong></em>",id:"example-2-monojust",level:3},{value:"Example #3 <em><strong><strong>Mono.just</strong></strong></em>",id:"example-3-monojust",level:3},{value:"Example #4 <em><strong><strong>Mono.fromSupplier</strong></strong></em>",id:"example-4-monofromsupplier",level:3},{value:"Example #5 <em><strong><strong>zipWith()</strong></strong></em> Method",id:"example-5-zipwith-method",level:3},{value:"Example #6 flatMap() and flatMapMany() Methods",id:"example-6-flatmap-and-flatmapmany-methods",level:3},{value:"Example #7 <em><strong><strong>Flux.range</strong></strong></em>",id:"example-7-fluxrange",level:3},{value:"Example #8 <em><strong><strong>Flux.range</strong></strong></em>",id:"example-8-fluxrange",level:3},{value:"Example #9 <em><strong><strong>Flux.range</strong></strong></em>",id:"example-9-fluxrange",level:3},{value:"Example #10 <em><strong><strong>Flux.range</strong></strong></em>",id:"example-10-fluxrange",level:3},{value:"Example #11 <em><strong><strong>Flux.fromIterable</strong></strong></em>",id:"example-11-fluxfromiterable",level:3},{value:"Example #12 <em><strong><strong>Flux.fromIterable</strong></strong></em>",id:"example-12-fluxfromiterable",level:3},{value:"Example #13 <em><strong><strong>Flux.fromIterable</strong></strong></em>",id:"example-13-fluxfromiterable",level:3},{value:"Example #14 <em><strong><strong>FluxConcat</strong></strong></em>",id:"example-14-fluxconcat",level:3},{value:"Example #15 <em><strong><strong>Flux.merge</strong></strong></em>",id:"example-15-fluxmerge",level:3},{value:"Source Code:",id:"source-code",level:3}];function u(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"mono-and-flux",children:"Mono and Flux"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Mono"})," represents a ",(0,s.jsx)(e.strong,{children:"publisher"})," ",(0,s.jsx)(e.a,{href:"/docs/project-reactor",children:(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"(Project Reactor)"})})})})," of zero or one object of type T.\nMono is a container for zero or one element. It represents a single result of an asynchronous computation.\nIn simpler terms, it emits at most one item and then terminates, either with the item or empty."]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Flux"}),", on the other hand, is a container for zero to N elements.\nIt represents a stream of data that can emit multiple items over time.\nIt\u2019s suitable for handling sequences of data."]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html",children:(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Mono"})})})})," and ",(0,s.jsx)(e.a,{href:"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html",children:(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux"})})})})," provides a rich set of methods to manipulate and work with the emitted data."]}),"\n",(0,s.jsx)(e.h2,{id:"common-methods-and-operations",children:"Common Methods and Operations"}),"\n",(0,s.jsxs)(e.h3,{id:"example-1-monojust",children:["Example #1 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Mono.just"})})})]}),"\n",(0,s.jsx)(e.p,{children:"Create a new Mono that emits the specified item, which is captured at instantiation time.\nCreate and subscribe to Mono:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class Main {\n    public static void main(String[] args) {\n        // create a Mono\n        Mono<String> mono = Mono.just("Hello");\n\n        // subscribe to a Mono\n        mono.subscribe();\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"We started consuming the data, but we are not doing anything with it."}),"\n",(0,s.jsxs)(e.h3,{id:"example-2-monojust",children:["Example #2 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Mono.just"})})})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'class ReactiveJavaTutorial {\n\n    public static void main(String[] args) {\n\n        // create a Mono\n        Mono<String> mono = Mono.just("Hello");\n\n        // subscribe to a Mono\n        mono.subscribe(data -> System.out.println(data));\n\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"Hello\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-3-monojust",children:["Example #3 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Mono.just"})})})]}),"\n",(0,s.jsx)(e.p,{children:"Let\u2019s subscribe and define what should be triggered for each of the 3 events."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'    public static void main(String[] args) {\n\n        // create a Mono\n        Mono<String> mono = Mono.just("Hello");\n\n        // subscribe to a Mono\n        mono.subscribe(\n                data -> System.out.println(data), // onNext\n                err -> System.out.println(err),  // onError\n                () -> System.out.println("Completed!") // onComplete\n        );\n\n    }\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:" Hello Completed!\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"We used here the\nsubscribe(Consumer<? super T> consumer,\n          Consumer <? super Throwable> errorConsumer,\n          Runnable completeConsumer)\nmethod that subscribes a Consumer to this Mono that will respectively consume all the\nelements in the sequence, handle errors and react to completion.\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-4-monofromsupplier",children:["Example #4 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Mono.fromSupplier"})})})]}),"\n",(0,s.jsx)(e.p,{children:"Let\u2019s invoke the onError signal:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'   public static void main(String[] args) {\n\n        // create a Mono\n        Mono<String> mono = Mono.fromSupplier(() -> {\n            throw new RuntimeException("Exception occurred!");\n        });\n\n        // subscribe to a Mono\n        mono.subscribe(\n                data -> System.out.println(data), // onNext\n                err -> System.out.println("ERROR: " + err),  // onError\n                () -> System.out.println("Completed!") // onComplete\n        );\n\n    }\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"ERROR: java.lang.RuntimeException: Exception occurred!\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-5-zipwith-method",children:["Example #5 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"zipWith()"})})})," Method"]}),"\n",(0,s.jsx)(e.p,{children:"The zipWith() method combines the result from this mono and another mono object."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n\n    public Mono<String> fruitsMonoZipWith() {\n        var fruits = Mono.just("Mango");\n        var veggies = Mono.just("Tomato");\n\n        return fruits.zipWith(veggies,\n                (first,second) -> first+second).log();\n    }\n\n    public static void main(String[] args) {\n\n        FluxAndMonoServices fluxAndMonoServices\n                = new FluxAndMonoServices();\n\n        fluxAndMonoServices.fruitsMonoZipWith()\n                .subscribe(s -> {\n                    System.out.println("Mono -> s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"Mono -> s = MangoTomato\n"})}),"\n",(0,s.jsx)(e.h3,{id:"example-6-flatmap-and-flatmapmany-methods",children:"Example #6 flatMap() and flatMapMany() Methods"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"flatMap() \u2013 Transform the item emitted by this Mono asynchronously, returning the value emitted by another Mono (possibly changing the value type)."}),"\n",(0,s.jsx)(e.li,{children:"flatMapMany() \u2013 Transform the item emitted by this Mono into a Publisher, then forward its emissions into the returned."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoService {\n\n    public Mono<List<String>> fruitMonoFlatMap() {\n        return Mono.just("Mango")\n                .flatMap(s -> Mono.just(List.of(s.split(""))))\n                .log();\n    }\n\n    public Flux<String> fruitMonoFlatMapMany() {\n        return Mono.just("Mango")\n                .flatMapMany(s -> Flux.just(s.split("")))\n                .log();\n    }\n\n    public static void main(String[] args) {\n\n        FluxAndMonoService fluxAndMonoServices\n                = new FluxAndMonoService();\n\n        fluxAndMonoServices.fruitMonoFlatMap()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.fruitMonoFlatMapMany()\n                .subscribe(s -> {\n                    System.out.println("Mono -> s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"[ INFO] (main) | onSubscribe([Synchronous Fuseable] Operators.ScalarSubscription)\n[ INFO] (main) | request(unbounded)\n[ INFO] (main) | onNext([M, a, n, g, o])\ns = [M, a, n, g, o]\n[ INFO] (main) | onComplete()\n[ INFO] (main) onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)\n[ INFO] (main) request(unbounded)\n[ INFO] (main) onNext(M)\nMono -> s = M\n[ INFO] (main) onNext(a)\nMono -> s = a\n[ INFO] (main) onNext(n)\nMono -> s = n\n[ INFO] (main) onNext(g)\nMono -> s = g\n[ INFO] (main) onNext(o)\nMono -> s = o\n[ INFO] (main) onComplete()\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-7-fluxrange",children:["Example #7 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.range"})})})]}),"\n",(0,s.jsx)(e.p,{children:"The following code shows an example of the basic method with no arguments:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"public class FluxAndMonoServices {\n    public static void main(String[] args) {\n        // Set up a Flux that produces three values when a subscriber attaches.\n        Flux<Integer> ints = Flux.range(1, 3);\n\n        // Subscribe in the simplest way.\n        ints.subscribe();\n    }\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-8-fluxrange",children:["Example #8 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.range"})})})]}),"\n",(0,s.jsx)(e.p,{children:"The preceding code produces no visible output, but it does work. The Flux produces three values. If we provide a lambda, we can make the values visible.\nThe next example for the subscribe method shows one way to make the values appear:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"public class FluxAndMonoServices {\n    public static void main(String[] args) {\n        // Set up a Flux that produces three values when a subscriber attaches.\n        Flux<Integer> ints = Flux.range(1, 3);\n\n        // Subscribe with a subscriber that will print the values.\n        ints.subscribe(i -> System.out.println(i));\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"1\n2\n3\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-9-fluxrange",children:["Example #9 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.range"})})})]}),"\n",(0,s.jsx)(e.p,{children:"To demonstrate the next signature, we intentionally introduce an error, as shown in the following example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n    public static void main(String[] args) {\n        Flux<Integer> ints = Flux.range(1, 4)\n                // We need a map so that we can handle some values differently.\n                .map(i -> {\n                    // For most values, return the value.\n                    if (i <= 3) return i;\n                    // For one value, force an error.\n                    throw new RuntimeException("Got to 4");\n                });\n        // Subscribe with a subscriber that includes an error handler.\n        ints.subscribe(i -> System.out.println(i),\n                error -> System.err.println("Error: " + error));\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"1\n2\n3\nError: java.lang.RuntimeException: Got to 4\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-10-fluxrange",children:["Example #10 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.range"})})})]}),"\n",(0,s.jsx)(e.p,{children:"The next signature of the subscribe method includes both an error handler and a handler for completion events,\nas shown in the following example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n    public static void main(String[] args) {\n        Flux<Integer> ints = Flux.range(1, 4);\n\n        // Subscribe with a Subscriber that includes a handler for completion events.\n        ints.subscribe(i -> System.out.println(i),\n                error -> System.err.println("Error " + error),\n                () -> System.out.println("Done"));\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Error signals and completion signals are both terminal events and are exclusive of one another (you never get both). To make the completion consumer work, we must take care not to trigger an error."}),"\n",(0,s.jsx)(e.p,{children:"The completion callback has no input, as represented by an empty pair of parentheses: It matches the run method in the Runnable interface. The preceding code produces the following output:\nOutput:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"1\n2\n3\n4\nDone\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-11-fluxfromiterable",children:["Example #11 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.fromIterable"})})})]}),"\n",(0,s.jsx)(e.p,{children:"map() Method Example. The filter() method evaluates each source value against the given Predicate."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n\n    public Flux<String> fruitsFluxFilter(int number) {\n        return Flux.fromIterable(List.of("zjc","examples","Flux"))\n                .filter(s -> s.length() > number);\n    }\n\n    public static void main(String[] args) {\n\n        FluxAndMonoServices fluxAndMonoServices = new FluxAndMonoServices();\n\n        fluxAndMonoServices.fruitsFluxFilter(2)\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"s = zjc\ns = examples\ns = Flux\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-12-fluxfromiterable",children:["Example #12 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.fromIterable"})})})]}),"\n",(0,s.jsx)(e.p,{children:"flatMap() and delayElements() Methods Example."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n\n    public Flux<String> stringsFluxFlatMap() {\n        return Flux.fromIterable(List.of("zjc","examples","Flux"))\n                .flatMap(s -> Flux.just(s.split("")))\n                .log();\n    }\n\n    public Flux<String> stringsFluxFlatMapAsync() {\n        return Flux.fromIterable(List.of("zjc","examples","Flux"))\n                .flatMap(s -> Flux.just(s.split(""))\n                        .delayElements(Duration.ofMillis(\n                                new Random().nextInt(1000)\n                        )))\n                .log();\n    }\n\n\n    public static void main(String[] args) {\n\n        FluxAndMonoServices fluxAndMonoServices\n                = new FluxAndMonoServices();\n\n        fluxAndMonoServices.stringsFluxFlatMap()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.stringsFluxFlatMapAsync()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"[ INFO] (main) onSubscribe(FluxFlatMap.FlatMapMain)\n[ INFO] (main) request(unbounded)\n[ INFO] (main) onNext(z)\ns = z\n[ INFO] (main) onNext(j)\ns = j\n[ INFO] (main) onNext(c)\ns = c\n[ INFO] (main) onNext(e)\ns = e\n[ INFO] (main) onNext(x)\ns = x\n[ INFO] (main) onNext(a)\ns = a\n[ INFO] (main) onNext(m)\ns = m\n[ INFO] (main) onNext(p)\ns = p\n[ INFO] (main) onNext(l)\ns = l\n[ INFO] (main) onNext(e)\ns = e\n[ INFO] (main) onNext(s)\ns = s\n[ INFO] (main) onNext(F)\ns = F\n[ INFO] (main) onNext(l)\ns = l\n[ INFO] (main) onNext(u)\ns = u\n[ INFO] (main) onNext(x)\ns = x\n[ INFO] (main) onComplete()\n[ INFO] (main) onSubscribe(FluxFlatMap.FlatMapMain)\n[ INFO] (main) request(unbounded)\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-13-fluxfromiterable",children:["Example #13 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.fromIterable"})})})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"transform(), defaultIfEmpty() and switchIfEmpty() Methods"}),"\n",(0,s.jsx)(e.li,{children:"transform() \u2013 Transform this Flux in order to generate a target Flux."}),"\n",(0,s.jsx)(e.li,{children:"defaultIfEmpty() \u2013 Provide a default unique value if this sequence is completed without any data."}),"\n",(0,s.jsx)(e.li,{children:"switchIfEmpty() \u2013 Switch to an alternative Publisher if this sequence is completed without any data."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n\n    public Flux<String> fruitsFluxTransform(int number) {\n\n        Function<Flux<String>,Flux<String>> filterData\n                = data -> data.filter(s -> s.length() > number);\n\n        return Flux.fromIterable(List.of("zjc12","ex1234","Flux12"))\n                .transform(filterData)\n                .log();\n        //.filter(s -> s.length() > number);\n    }\n\n    public Flux<String> fruitsFluxTransformDefaultIfEmpty(int number) {\n\n        Function<Flux<String>,Flux<String>> filterData\n                = data -> data.filter(s -> s.length() > number);\n\n        return Flux.fromIterable(List.of("zjc12","ex1234","Flux12"))\n                .transform(filterData)\n                .defaultIfEmpty("Default")\n                .log();\n\n    }\n\n    public Flux<String> fruitsFluxTransformSwitchIfEmpty(int number) {\n\n        Function<Flux<String>,Flux<String>> filterData\n                = data -> data.filter(s -> s.length() > number);\n\n        return Flux.fromIterable(List.of("zjc12","ex1234","Flux12"))\n                .transform(filterData)\n                .switchIfEmpty(Flux.just("123456789","1234 12345")\n                        .transform(filterData))\n                .log();\n\n    }\n\n    public static void main(String[] args) {\n\n        FluxAndMonoServices fluxAndMonoServices\n                = new FluxAndMonoServices();\n\n        fluxAndMonoServices.fruitsFluxTransform(5)\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.fruitsFluxTransformDefaultIfEmpty(6)\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.fruitsFluxTransformSwitchIfEmpty(6)\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"[ INFO] (main) | onSubscribe([Fuseable] FluxFilterFuseable.FilterFuseableSubscriber)\n[ INFO] (main) | request(unbounded)\n[ INFO] (main) | onNext(ex1234)\ns = ex1234\n[ INFO] (main) | onNext(Flux12)\ns = Flux12\n[ INFO] (main) | onComplete()\n[ INFO] (main) onSubscribe([Fuseable] FluxDefaultIfEmpty.DefaultIfEmptySubscriber)\n[ INFO] (main) request(unbounded)\n[ INFO] (main) onNext(Default)\ns = Default\n[ INFO] (main) onComplete()\n[ INFO] (main) onSubscribe(FluxSwitchIfEmpty.SwitchIfEmptySubscriber)\n[ INFO] (main) request(unbounded)\n[ INFO] (main) onNext(123456789)\ns = 123456789\n[ INFO] (main) onNext(1234 12345)\ns = 1234 12345\n[ INFO] (main) onComplete()\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-14-fluxconcat",children:["Example #14 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"FluxConcat"})})})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"concat() and concatWith() Methods"}),"\n",(0,s.jsx)(e.li,{children:"concat() \u2013 Concatenate all sources provided in an Iterable, forwarding element emitted by the sources downstream."}),"\n",(0,s.jsx)(e.li,{children:"concatWith() \u2013 Concatenate emissions of this Flux with the provided Publisher (no interleave)."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'\n\npublic class FluxAndMonoServices {\n\n    public Flux<String> fruitsFluxConcat() {\n        var chars = Flux.just("abcde","fghijk");\n        var nrs = Flux.just("123456","78901");\n\n        return Flux.concat(chars,nrs);\n    }\n\n    public Flux<String> fruitsFluxConcatWith() {\n        var chars = Flux.just("abcde","fghijk");\n        var nrs = Flux.just("123456","78901");\n\n        return chars.concatWith(nrs);\n    }\n\n\n    public Flux<String> fruitsMonoConcatWith() {\n        var chars = Mono.just("abcde");\n        var nrs = Mono.just("123456");\n\n        return chars.concatWith(nrs);\n    }\n\n    public static void main(String[] args) {\n\n        FluxAndMonoServices fluxAndMonoServices\n                = new FluxAndMonoServices();\n\n        fluxAndMonoServices.fruitsFluxConcat()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.fruitsFluxConcatWith()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.fruitsMonoConcatWith()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"s = abcde\ns = fghijk\ns = 123456\ns = 78901\ns = abcde\ns = fghijk\ns = 123456\ns = 78901\ns = abcde\ns = 123456\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"example-15-fluxmerge",children:["Example #15 ",(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.strong,{children:"Flux.merge"})})})]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"merge() and mergeWith() Methods"}),"\n",(0,s.jsx)(e.li,{children:"merge() \u2013 Merge data from Publisher sequences contained in an array / vararg into an interleaved merged sequence."}),"\n",(0,s.jsx)(e.li,{children:"mergeWith() \u2013 Merge data from this Flux and a Publisher into an interleaved merged sequence."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class FluxAndMonoServices {\n\n    public Flux<String> fruitsFluxMerge() {\n        var chars = Flux.just("abcde","fghijk");\n        var nrs = Flux.just("123456","78901");\n        return Flux.merge(chars, nrs);\n    }\n\n    public Flux<String> fruitsFluxMergeWith() {\n        var chars = Flux.just("abcde","fghijk");\n        var nrs = Flux.just("123456","78901");\n        return chars.mergeWith(nrs);\n    }\n\n    public static void main(String[] args) {\n\n        FluxAndMonoServices fluxAndMonoServices\n                = new FluxAndMonoServices();\n\n        fluxAndMonoServices.fruitsFluxMerge()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n\n        fluxAndMonoServices.fruitsFluxMergeWith()\n                .subscribe(s -> {\n                    System.out.println("s = " + s);\n                });\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Output:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"s = abcde\ns = fghijk\ns = 123456\ns = 78901\ns = abcde\ns = fghijk\ns = 123456\ns = 78901\n"})}),"\n",(0,s.jsx)(e.h3,{id:"source-code",children:"Source Code:"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://github.com/ZbCiok/reactor-mono-and-flux-examples",children:"https://github.com/ZbCiok/reactor-mono-and-flux-examples"})})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>l});var s=r(6540);const t={},o=s.createContext(t);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);