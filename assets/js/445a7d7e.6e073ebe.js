"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[7976],{3322:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>t,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=n(4848),i=n(8453);const s={sidebar_position:18},o="Kafka Quick Start",c={id:"messaging/kafka/examples/kafka-quick-start",title:"Kafka Quick Start",description:"Description",source:"@site/docs/messaging/kafka/examples/kafka-quick-start.mdx",sourceDirName:"messaging/kafka/examples",slug:"/messaging/kafka/examples/kafka-quick-start",permalink:"/docs/messaging/kafka/examples/kafka-quick-start",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/messaging/kafka/examples"},next:{title:"Schema Registry Spring Boot",permalink:"/docs/messaging/kafka/examples/schema-registry-spring-boot"}},t={},l=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"SimpleKafkaProducer.java",id:"simplekafkaproducerjava",level:3},{value:"SimpleKafkaConsumer.java",id:"simplekafkaconsumerjava",level:3},{value:"Producing messages",id:"producing-messages",level:3},{value:"Producer",id:"producer",level:4},{value:"Consumer",id:"consumer",level:4}];function p(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"kafka-quick-start",children:"Kafka Quick Start"})}),"\n",(0,a.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Running a Kafka cluster locally (Docker)"}),"\n",(0,a.jsx)(r.li,{children:"Producing Kafka messages"}),"\n",(0,a.jsx)(r.li,{children:"Consuming Kafka messages"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Linux"}),"\n",(0,a.jsx)(r.li,{children:"JDK 21"}),"\n",(0,a.jsx)(r.li,{children:"Maven"}),"\n",(0,a.jsx)(r.li,{children:"Docker"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:".\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u2514\u2500\u2500 java\n            \u2514\u2500\u2500 com\n                \u2514\u2500\u2500 jreact\n                    \u2514\u2500\u2500 kafka\n                        \u251c\u2500\u2500 consumer\n                        \u2502\xa0\xa0 \u2514\u2500\u2500 SimpleKafkaConsumer.java\n                        \u2514\u2500\u2500 producer\n                            \u2514\u2500\u2500 SimpleKafkaProducer.java\n"})}),"\n",(0,a.jsx)(r.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.jreact</groupId>\n    <artifactId>kafka-quick-start</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-clients</artifactId>\n            <version>3.6.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>11</source>\n                    <target>11</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n'})}),"\n",(0,a.jsx)(r.h3,{id:"simplekafkaproducerjava",children:"SimpleKafkaProducer.java"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:'package com.jreact.kafka.producer;\n\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\nimport java.time.Instant;\nimport java.util.Properties;\n\npublic class SimpleKafkaProducer {\n\n    public static void main(String[] args) {\n        //create kafka producer\n        Properties properties = new Properties();\n        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");\n        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n        Producer<String, String> producer = new KafkaProducer<>(properties);\n\n        //prepare the record\n        String recordValue = "Current time is " + Instant.now().toString();\n        System.out.println("Sending message: " + recordValue);\n        ProducerRecord<String, String> record = new ProducerRecord<>("java_topic", null, recordValue);\n\n        //produce the record\n        producer.send(record);\n        producer.flush();\n\n        //close the producer at the end\n        producer.close();\n    }\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"simplekafkaconsumerjava",children:"SimpleKafkaConsumer.java"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-java",children:'package com.jreact.kafka.consumer;\n\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\n\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class SimpleKafkaConsumer {\n\n    public static void main(String[] args) {\n        //create kafka consumer\n        Properties properties = new Properties();\n        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");\n        properties.put(ConsumerConfig.GROUP_ID_CONFIG, "my-first-consumer-group");\n\n        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n\n        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n\n        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n\n        Consumer<String, String> consumer = new KafkaConsumer<>(properties);\n\n        //subscribe to topic\n        consumer.subscribe(Collections.singleton("java_topic"));\n\n        //poll the record from the topic\n        while (true) {\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n\n            for (ConsumerRecord<String, String> record : records) {\n                System.out.println("Message received: " + record.value());\n            }\n            consumer.commitAsync();\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"producing-messages",children:"Producing messages"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"docker exec -it sn-kafka /bin/bash\n"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"kafka-console-producer --broker-list localhost:9092 --topic java_topic\n"})}),"\n",(0,a.jsx)(r.h4,{id:"producer",children:"Producer"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"[appuser@5855dca2a44c ~]$ kafka-console-producer --broker-list localhost:9092 --topic java_topic\n>xxx\n>ccc\n>ddd\n>\n"})}),"\n",(0,a.jsx)(r.h4,{id:"consumer",children:"Consumer"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"Message received: xxx\nMessage received: ccc\nMessage received: ddd\n"})}),"\n",(0,a.jsx)(r.hr,{}),"\n",(0,a.jsxs)(r.p,{children:["Source Code:",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(r.em,{children:(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/kafka/kafka-quick-start",children:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/kafka/kafka-quick-start"})})})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(r.p,{children:["Based on: ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(r.em,{children:(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"https://github.com/codingharbour/kafka-quick-start",children:"https://github.com/codingharbour/kafka-quick-start"})})})]})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var a=n(6540);const i={},s=a.createContext(i);function o(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);