"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[7168],{8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var r=i(6540);const a={},t=r.createContext(a);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(t.Provider,{value:n},e.children)}},9487:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"apache-flink/Examples/ml-examples/features-binarizer","title":"Features/BinarizerExample","description":"Machine Learning","source":"@site/docs/apache-flink/Examples/ml-examples/features-binarizer.mdx","sourceDirName":"apache-flink/Examples/ml-examples","slug":"/apache-flink/Examples/ml-examples/features-binarizer","permalink":"/docs/apache-flink/Examples/ml-examples/features-binarizer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":500,"frontMatter":{"sidebar_position":500},"sidebar":"tutorialSidebar","previous":{"title":"Classification/KnnExample","permalink":"/docs/apache-flink/Examples/ml-examples/classification-knn"},"next":{"title":"Flink Quick Start Java","permalink":"/docs/apache-flink/Examples/flink-quickstart-java"}}');var a=i(4848),t=i(8453);const s={sidebar_position:500},l="Features/BinarizerExample",o={},c=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"BinarizerExample.java",id:"binarizerexamplejava",level:2},{value:"Run",id:"run",level:2},{value:"Build the Examples",id:"build-the-examples",level:4},{value:"Copy",id:"copy",level:4},{value:"Output",id:"output",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"featuresbinarizerexample",children:"Features/BinarizerExample"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/docs/artificial-intelligence/machine-learning/",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Machine Learning"})})}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.a,{href:"/docs/artificial-intelligence/machine-learning/features/binarizer",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"Binarizer"})})}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.strong,{children:"The Example:"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/apache/flink-ml/blob/master/flink-ml-examples/src/main/java/org/apache/flink/ml/examples/feature/BinarizerExample.java",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"features/BinarizerExample"})})})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://nightlies.apache.org/flink/flink-ml-docs-release-2.3/docs/operators/feature/binarizer/",children:(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"feature/Binarizer"})})}),(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/binarizer-01.png",width:"400 px",alt:"binarizer-01.png"}),"\n",(0,a.jsx)(n.p,{children:"Binarizer binarizes the columns of continuous features by the given thresholds. The continuous features may be DenseVector, SparseVector, or Numerical Value."}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"JDK 11"}),"\n",(0,a.jsx)(n.li,{children:"Maven 3.9.9"}),"\n",(0,a.jsx)(n.li,{children:"Flink 1.17.0"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"binarizerexamplejava",children:"BinarizerExample.java"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.ml.examples.feature;\n\nimport org.apache.flink.ml.feature.binarizer.Binarizer;\nimport org.apache.flink.ml.linalg.Vectors;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\nimport org.apache.flink.types.Row;\nimport org.apache.flink.util.CloseableIterator;\n\nimport java.util.Arrays;\n\n/** Simple program that creates a Binarizer instance and uses it for feature engineering. */\npublic class BinarizerExample {\n    public static void main(String[] args) {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n        // Generates input data.\n        DataStream<Row> inputStream =\n                env.fromElements(\n                        Row.of(\n                                1,\n                                Vectors.dense(1, 2),\n                                Vectors.sparse(\n                                        17, new int[] {0, 3, 9}, new double[] {1.0, 2.0, 7.0})),\n                        Row.of(\n                                2,\n                                Vectors.dense(2, 1),\n                                Vectors.sparse(\n                                        17, new int[] {0, 2, 14}, new double[] {5.0, 4.0, 1.0})),\n                        Row.of(\n                                3,\n                                Vectors.dense(5, 18),\n                                Vectors.sparse(\n                                        17, new int[] {0, 11, 12}, new double[] {2.0, 4.0, 4.0})));\n\n        Table inputTable = tEnv.fromDataStream(inputStream).as("f0", "f1", "f2");\n\n        // Creates a Binarizer object and initializes its parameters.\n        Binarizer binarizer =\n                new Binarizer()\n                        .setInputCols("f0", "f1", "f2")\n                        .setOutputCols("of0", "of1", "of2")\n                        .setThresholds(0.0, 0.0, 0.0);\n\n        // Transforms input data.\n        Table outputTable = binarizer.transform(inputTable)[0];\n\n        // Extracts and displays the results.\n        for (CloseableIterator<Row> it = outputTable.execute().collect(); it.hasNext(); ) {\n            Row row = it.next();\n\n            Object[] inputValues = new Object[binarizer.getInputCols().length];\n            Object[] outputValues = new Object[binarizer.getInputCols().length];\n            for (int i = 0; i < inputValues.length; i++) {\n                inputValues[i] = row.getField(binarizer.getInputCols()[i]);\n                outputValues[i] = row.getField(binarizer.getOutputCols()[i]);\n            }\n\n            System.out.printf(\n                    "Input Values: %s\\tOutput Values: %s\\n",\n                    Arrays.toString(inputValues), Arrays.toString(outputValues));\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,a.jsx)(n.h4,{id:"build-the-examples",children:"Build the Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"# https://github.com/apache/flink-ml\nmvn clean package -DskipTests\n"})}),"\n",(0,a.jsx)(n.h4,{id:"copy",children:"Copy"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"flink-ml-examples-1.17-2.4-SNAPSHOT.jar\nflink-ml-uber-1.17-2.4-SNAPSHOT.jar\nstatefun-flink-core-3.2.0.jar\n"})}),"\n",(0,a.jsxs)(n.p,{children:["to",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"flink-1.17.0/lib"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Start local cluster"})," (Flink 1.17.0): ",(0,a.jsx)("br",{}),"\n./bin/start-cluster.sh"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Run"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.em,{children:(0,a.jsx)(n.strong,{children:"BinarizerExample:"})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\n./bin/flink run -c org.apache.flink.ml.examples.feature.BinarizerExample  ./lib/flink-ml-uber-1.17-2.4-SNAPSHOT.jar ./lib/statefun-flink-core-3.2.0.jar ./lib/flink-ml-examples-1.17-2.4-SNAPSHOT.jar\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Open"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"http://localhost:8081\n"})}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/flink-ml-apahce-BinarizerExample-example-001.png",alt:"flink-ml-apahce-BinarizerExample-example-001.png"}),"\n",(0,a.jsx)(n.h2,{id:"output",children:"Output"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Job has been submitted with JobID a79c681a8145cd44e01a5e40b2a1d254\nInput Values: [1, [1.0, 2.0], (17, [0, 3, 9], [1.0, 2.0, 7.0])]\tOutput Values: [1.0, [1.0, 1.0], (17, [0, 3, 9], [1.0, 1.0, 1.0])]\nInput Values: [2, [2.0, 1.0], (17, [0, 2, 14], [5.0, 4.0, 1.0])]\tOutput Values: [1.0, [1.0, 1.0], (17, [0, 2, 14], [1.0, 1.0, 1.0])]\nInput Values: [3, [5.0, 18.0], (17, [0, 11, 12], [2.0, 4.0, 4.0])]\tOutput Values: [1.0, [1.0, 1.0], (17, [0, 11, 12], [1.0, 1.0, 1.0])]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);