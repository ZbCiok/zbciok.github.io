"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[5525],{8705:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var i=t(4848),r=t(8453);const l={sidebar_position:40},s="Multi",o={id:"smallrye-mutiny/multi",title:"Multi",description:"The Multi type",source:"@site/docs/smallrye-mutiny/multi.mdx",sourceDirName:"smallrye-mutiny",slug:"/smallrye-mutiny/multi",permalink:"/docs/smallrye-mutiny/multi",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"tutorialSidebar",previous:{title:"Uni",permalink:"/docs/smallrye-mutiny/uni"},next:{title:"Guides",permalink:"/docs/smallrye-mutiny/guides"}},u={},c=[{value:"The Multi type",id:"the-multi-type",level:2},{value:"Creating Multi (basics)",id:"creating-multi-basics",level:2},{value:"Multi",id:"multi-1",level:3},{value:"Output:",id:"output",level:4},{value:"Multi_Subscriber",id:"multi_subscriber",level:3},{value:"Output:",id:"output-1",level:4},{value:"Multi_From_Emitter",id:"multi_from_emitter",level:3},{value:"Output:",id:"output-2",level:4},{value:"Multi_Control_Subscription",id:"multi_control_subscription",level:3},{value:"Output:",id:"output-3",level:4},{value:"Multi_By_Repeating",id:"multi_by_repeating",level:3},{value:"Multi_From_Resource",id:"multi_from_resource",level:3},{value:"Output:",id:"output-4",level:4},{value:"Go further with the Mutiny workshop!",id:"go-further-with-the-mutiny-workshop",level:2}];function a(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"multi",children:"Multi"})}),"\n",(0,i.jsx)(e.h2,{id:"the-multi-type",children:"The Multi type"}),"\n",(0,i.jsx)(e.p,{children:"A Multi represents a stream of data. A stream can emit 0, 1, n, or an infinite number of items.\nA Multi<T> is a data stream that:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"emits 0..n item events"}),"\n",(0,i.jsx)(e.li,{children:"emits a failure event"}),"\n",(0,i.jsx)(e.li,{children:"emits a completion event for bounded streams"}),"\n"]}),"\n",(0,i.jsx)(e.admonition,{type:"warning",children:(0,i.jsx)(e.p,{children:"Failures are terminal events: after having received a failure no further item will be emitted."})}),"\n",(0,i.jsx)(e.p,{children:"Multi<T> provides many operators that create, transform, and orchestrate Multi sequences. The operators can be used to define a processing pipeline. The events flow in this pipeline, and each operator can process or transform the events."}),"\n",(0,i.jsx)(e.p,{children:"Multis are lazy by nature. To trigger the computation, you must subscribe."}),"\n",(0,i.jsx)(e.p,{children:"The following snippet provides a simple example of pipeline using Multi:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Multi.createFrom().items(1, 2, 3, 4, 5)\n        .onItem().transform(i -> i * 2)\n        .select().first(3)\n        .onFailure().recoverWithItem(0)\n        .subscribe().with(System.out::println);\n"})}),"\n",(0,i.jsx)(e.admonition,{type:"info",children:(0,i.jsx)(e.p,{children:"Remember, if you don\u2019t subscribe, nothing is going to happen. Also, the pipeline is materialized for each subscription."})}),"\n",(0,i.jsx)(e.p,{children:"When subscribing to a Multi, you can pass an item callback (invoked when the item is emitted), or pass two callbacks, one receiving the item and one receiving the failure, or three callbacks to handle respectively the item, failure and completion events."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'Cancellable cancellable = multi\n        .subscribe().with(\n                item -> System.out.println(item),\n                failure -> System.out.println("Failed with " + failure),\n                () -> System.out.println("Completed"));\n'})}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["Note the returned ",(0,i.jsx)(e.em,{children:(0,i.jsx)(e.strong,{children:"Cancellable"})}),": this object allows canceling the stream if need be."]})}),"\n",(0,i.jsx)(e.h2,{id:"creating-multi-basics",children:"Creating Multi (basics)"}),"\n",(0,i.jsx)(e.h3,{id:"multi-1",children:"Multi"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport io.smallrye.mutiny.Multi;\n\npublic class _13_Multi {\n\n    public static void main(String[] args) {\n        System.out.println("Hello world");\n\n        // -------------------------------------------------------------------------------------------------- //\n\n        Multi.createFrom().items(1, 2, 3)\n                .subscribe().with(\n                        subscription -> {\n                            System.out.println("Subscription: " + subscription);\n                            subscription.request(10);\n                        },\n                        item -> System.out.println("Item: " + item),\n                        failure -> System.out.println("Failure: " + failure.getMessage()),\n                        () -> System.out.println("Completed"));\n\n        // -------------------------------------------------------------------------------------------------- //\n\n        System.out.println("----");\n\n        Multi.createFrom().range(10, 15)\n                .subscribe().with(System.out::println);\n\n        var randomNumbers = Stream\n                .generate(ThreadLocalRandom.current()::nextInt)\n                .limit(5)\n                .collect(Collectors.toList());\n\n        // -------------------------------------------------------------------------------------------------- //\n\n        System.out.println("----");\n\n        Multi.createFrom().iterable(randomNumbers)\n                .subscribe().with(System.out::println);\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"output",children:"Output:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Hello world\nSubscription: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber@50040f0c\nItem: 1\nItem: 2\nItem: 3\nCompleted\n----\n10\n11\n12\n13\n14\n----\n-1003133619\n1768110119\n-112749840\n-701258952\n-668099042\n"})}),"\n",(0,i.jsx)(e.h3,{id:"multi_subscriber",children:"Multi_Subscriber"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'\npackage _01_basics;\n\nimport java.util.concurrent.Flow.Subscriber;\nimport java.util.concurrent.Flow.Subscription;\n\nimport io.smallrye.mutiny.Multi;\n\npublic class _14_Multi_Subscriber {\n\n    public static void main(String[] args) {\n        System.out.println("Hello world with subscriber");\n\n        Multi.createFrom().items(1, 2, 3).subscribe().withSubscriber(new Subscriber<Integer>() {\n            private Subscription subscription;\n\n            @Override\n            public void onSubscribe(Subscription subscription) {\n                System.out.println("onSubscribe()");\n                this.subscription = subscription;\n                this.subscription.request(1);\n            }\n\n            @Override\n            public void onNext(Integer integer) {\n                System.out.println("onNext: " + integer);\n                this.subscription.request(1);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                System.out.println("onError: " + t.getMessage());\n            }\n\n            @Override\n            public void onComplete() {\n                System.out.println("onComplete()");\n            }\n        });\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"output-1",children:"Output:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Hello world with subscriber\nonSubscribe()\nonNext: 1\nonNext: 2\nonNext: 3\nonComplete()\n"})}),"\n",(0,i.jsx)(e.h3,{id:"multi_from_emitter",children:"Multi_From_Emitter"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport io.smallrye.mutiny.Multi;\n\npublic class _15_Multi_From_Emitter {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("Multi from emitter");\n\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n\n        AtomicReference<ScheduledFuture<?>> ref = new AtomicReference<>();\n        AtomicInteger counter = new AtomicInteger();\n        CountDownLatch latch = new CountDownLatch(1);\n\n        Multi.createFrom().emitter(emitter -> {\n            ref.set(service.scheduleAtFixedRate(() -> {\n                emitter.emit("tick");\n                if (counter.getAndIncrement() == 5) {\n                    ref.get().cancel(true);\n                    emitter.complete();\n                    latch.countDown();\n                }\n            }, 0, 500, TimeUnit.MILLISECONDS));\n        })\n                .subscribe().with(System.out::println, Throwable::printStackTrace, () -> System.out.println("Done!"));\n\n        latch.await();\n        service.shutdown();\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"output-2",children:"Output:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Multi from emitter\ntick\ntick\ntick\ntick\ntick\ntick\nDone!\n"})}),"\n",(0,i.jsx)(e.h3,{id:"multi_control_subscription",children:"Multi_Control_Subscription"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.time.Duration;\nimport java.time.temporal.ChronoUnit;\nimport java.util.concurrent.Flow.Subscription;\n\nimport io.smallrye.mutiny.Multi;\nimport io.smallrye.mutiny.subscription.MultiSubscriber;\n\npublic class _16_Multi_Control_Subscription {\n\n    public static void main(String[] args) {\n        System.out.println("Multi and subscription");\n\n        Multi.createFrom()\n                .ticks().every(Duration.of(1, ChronoUnit.SECONDS))\n                .subscribe().withSubscriber(new MultiSubscriber<Long>() {\n\n                    private Subscription subscription;\n                    private int counter = 0;\n\n                    @Override\n                    public void onItem(Long tick) {\n                        System.out.println("Tick: " + tick);\n                        if (counter++ == 10) {\n                            subscription.cancel();\n                        } else {\n                            subscription.request(1);\n                        }\n                    }\n\n                    @Override\n                    public void onFailure(Throwable throwable) {\n                        throwable.printStackTrace();\n                    }\n\n                    @Override\n                    public void onCompletion() {\n                        System.out.println("Done!");\n                    }\n\n                    @Override\n                    public void onSubscribe(Subscription subscription) {\n                        this.subscription = subscription;\n                        subscription.request(1);\n                    }\n                });\n\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"output-3",children:"Output:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Multi and subscription\nTick: 0\nTick: 1\nTick: 2\nTick: 3\nTick: 4\nTick: 5\nTick: 6\nTick: 7\nTick: 8\nTick: 9\nTick: 10\n"})}),"\n",(0,i.jsx)(e.h3,{id:"multi_by_repeating",children:"Multi_By_Repeating"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ThreadLocalRandom;\n\nimport io.smallrye.mutiny.Multi;\nimport io.smallrye.mutiny.Uni;\n\npublic class _17_Multi_By_Repeating {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("Multi by repeating");\n\n        Multi.createBy()\n                .repeating()\n                .supplier(Service::fetchValue)\n                .until(n -> n > 1_000_000L)\n                .subscribe().with(System.out::println);\n\n        System.out.println("\\n----\\n");\n\n        CountDownLatch latch = new CountDownLatch(1);\n\n        Multi.createBy()\n                .repeating()\n                .uni(Service::asyncFetchValue)\n                .atMost(10)\n                .subscribe().with(System.out::println, Throwable::printStackTrace, latch::countDown);\n\n        latch.await();\n\n        System.out.println("\\n----\\n");\n\n        Multi.createBy()\n                .repeating()\n                .completionStage(Service::queryDb)\n                .whilst(n -> n < 1_000_000L)\n                .subscribe().with(System.out::println);\n    }\n\n    static class Service {\n\n        static long fetchValue() {\n            return ThreadLocalRandom.current().nextLong(1_001_000L);\n        }\n\n        static Uni<Long> asyncFetchValue() {\n            return Uni.createFrom().completionStage(Service::queryDb);\n        }\n\n        static CompletionStage<Long> queryDb() {\n            return CompletableFuture.supplyAsync(Service::fetchValue);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"multi_from_resource",children:"Multi_From_Resource"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package _01_basics;\n\nimport io.smallrye.mutiny.Multi;\n\npublic class _18_Multi_From_Resource {\n\n    public static void main(String[] args) {\n        System.out.println("Multi from resource");\n\n        Multi.createFrom()\n                .resource(MyResource::new, MyResource::stream)\n                .withFinalizer(MyResource::close)\n                .subscribe().with(System.out::println);\n    }\n\n    static class MyResource {\n\n        public Multi<Integer> stream() {\n            System.out.println("stream()");\n            return Multi.createFrom().range(0, 10);\n        }\n\n        public void close() {\n            System.out.println("close()");\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"output-4",children:"Output:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Multi from resource\nstream()\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nclose()\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"go-further-with-the-mutiny-workshop",children:"Go further with the Mutiny workshop!"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/smallrye/smallrye-mutiny/tree/main/workshop-examples",children:"https://github.com/smallrye/smallrye-mutiny/tree/main/workshop-examples"})})]})}function m(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var i=t(6540);const r={},l=i.createContext(r);function s(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);