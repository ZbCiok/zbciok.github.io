"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1405],{8682:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var i=a(4848),t=a(8453);const n={slug:"/aws/reactive-systems-on-aws"},r="Reactive Systems on AWS",o={id:"aws/reactive-systems-on-aws/index",title:"Reactive Systems on AWS",description:"Reactive Systems on AWS",source:"@site/docs/aws/reactive-systems-on-aws/index.mdx",sourceDirName:"aws/reactive-systems-on-aws",slug:"/aws/reactive-systems-on-aws",permalink:"/docs/aws/reactive-systems-on-aws",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/aws/reactive-systems-on-aws"},sidebar:"tutorialSidebar",previous:{title:"AWS",permalink:"/docs/aws"},next:{title:"AWS Lambda",permalink:"/docs/aws/aws-lambda"}},c={},l=[{value:"Introduction",id:"introduction",level:3},{value:"Characteristics of reactive systems",id:"characteristics-of-reactive-systems",level:2},{value:"Responsive",id:"responsive",level:3},{value:"Resilient",id:"resilient",level:3},{value:"Elastic",id:"elastic",level:3},{value:"Message driven",id:"message-driven",level:3},{value:"Observability and tracing",id:"observability-and-tracing",level:3},{value:"Reactive programming and reactive streams",id:"reactive-programming-and-reactive-streams",level:3},{value:"Typical use-cases for reactive systems",id:"typical-use-cases-for-reactive-systems",level:2},{value:"Example architecture",id:"example-architecture",level:2},{value:"The reactive manifesto and AWS services",id:"the-reactive-manifesto-and-aws-services",level:2},{value:"Service introduction",id:"service-introduction",level:2},{value:"Amazon ECS",id:"amazon-ecs",level:3},{value:"Amazon EKS",id:"amazon-eks",level:3},{value:"AWS Lambda",id:"aws-lambda",level:3},{value:"Amazon Kinesis Data Streams",id:"amazon-kinesis-data-streams",level:3},{value:"Amazon ElastiCache",id:"amazon-elasticache",level:3},{value:"Amazon DynamoDB",id:"amazon-dynamodb",level:3}];function d(e){const s={a:"a",blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"reactive-systems-on-aws",children:"Reactive Systems on AWS"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/service-introduction.html",children:(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"Reactive Systems on AWS"})})}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/pdfs/whitepapers/latest/reactive-systems-on-aws/reactive-systems-on-aws.pdf",children:(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"AWS Whitepaper"})})}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.h3,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(s.p,{children:"Microservice application requirements have changed dramatically in recent years. Many modern applications are expected to handle petabytes of data, require close to 100% uptime, and deliver sub-second response time to users. Typical N-tier applications can\u2019t deliver on these requirements. Today reactive architectures and reactive systems have been adopted by a growing number of enterprises, because it is necessary to design applications in a highly scalable and responsive way. But what exactly is a reactive system?"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.a,{href:"https://www.reactivemanifesto.org/",children:(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"Reactive Manifesto"})})}),", describes the essential characteristics of reactive systems including: responsiveness, resiliency, elasticity, and being message driven."]}),"\n",(0,i.jsx)(s.p,{children:"Being message driven is perhaps the most important characteristic of reactive systems. Asynchronous messaging helps in the design of loosely coupled systems, which is a key factor for scalability. In order to build highly resilient systems, it is important to isolate services from each other. Microservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams. Isolation and decoupling are an important aspect of the microservices pattern as well. This makes reactive systems and microservices a natural fit."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"characteristics-of-reactive-systems",children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/characteristics-of-reactive-systems.html",children:"Characteristics of reactive systems"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.h3,{id:"responsive",children:"Responsive"}),"\n",(0,i.jsx)(s.h3,{id:"resilient",children:"Resilient"}),"\n",(0,i.jsx)(s.h3,{id:"elastic",children:"Elastic"}),"\n",(0,i.jsx)(s.h3,{id:"message-driven",children:"Message driven"}),"\n",(0,i.jsx)(s.h3,{id:"observability-and-tracing",children:"Observability and tracing"}),"\n",(0,i.jsx)(s.h3,{id:"reactive-programming-and-reactive-streams",children:"Reactive programming and reactive streams"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"typical-use-cases-for-reactive-systems",children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/typical-use-cases-for-reactive-systems.html",children:"Typical use-cases for reactive systems"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"In the previous section, the essential characteristics of reactive systems was outlined. What do typical use cases for reactive systems have in common? Potentially millions of messages flow into the backend system. The impact of this requirement is a backend system that is able to quickly scale out and is resilient."}),"\n",(0,i.jsx)(s.p,{children:"Advertising technology (Ad tech) face an interesting challenge to collect or track a lot of information. Usually this is a tracking pixel on a website that ingests data into a system. Depending on the campaign and its success, the amount of data that needs to be collected and transformed may significantly vary and is not always predictable. The following sections take a closer look at an example implementation for a tracking system for ads."}),"\n",(0,i.jsxs)(s.p,{children:["For ",(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"eCommerce"})}),", it\u2019s a similar situation: if a product goes viral on social media or an advertising campaign is surprisingly successful, a lot of people will visit the eCommerce website and order products."]}),"\n",(0,i.jsxs)(s.p,{children:["For ",(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"IoT"})}),", you need to be able to manage millions of connected devices that produce a huge amount of sensor data. This data needs to be collected, stored, and analyzed. Often it is necessary to send additional data back to the connected devices to update the status. The complete system has to be responsive in order to deliver feedback to users or trigger changes in the devices or machines within a short span of time."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"example-architecture",children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/example-architecture.html",children:"Example architecture"})}),"\n",(0,i.jsx)(s.h2,{id:"the-reactive-manifesto-and-aws-services",children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/the-reactive-manifesto-and-aws-services.html",children:"The reactive manifesto and AWS services"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"The following section focuses on how to map compute and messaging services to the four principles of the reactive manifesto. This section only focuses on a limited set of services which are also used in the example implementation examined in the last chapter."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"Topics"})})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/service-introduction.html",children:(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"Service introduction"})})})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/principles-and-services.html",children:(0,i.jsx)(s.em,{children:(0,i.jsx)(s.strong,{children:"Principles and services"})})})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"service-introduction",children:(0,i.jsx)(s.a,{href:"https://docs.aws.amazon.com/whitepapers/latest/reactive-systems-on-aws/service-introduction.html",children:"Service introduction"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.h3,{id:"amazon-ecs",children:"Amazon ECS"}),"\n",(0,i.jsx)(s.p,{children:"Amazon Elastic Container Service (Amazon ECS) is a fully managed container orchestration service. It is a shared state, optimistic concurrency system that provides flexible scheduling capabilities for your tasks and containers. In the reference architecture, Amazon ECS with AWS Fargate is used to run the main application which is implemented using Java. One of the objectives in the development of the application was to keep the latency as low as possible, because in this part increased latency has a negative impact on the conversion rate. For this particular use case, it\u2019s recommended to use Amazon ECS instead of AWS Lambda. If the different components of the application were split into individual Lambda functions and these were orchestrated with AWS Step Functions, this would have a negative impact on latency, which is not a problem for many use cases, but in this particular case, keeping latency as low as possible is a very important aspect of the overall application."}),"\n",(0,i.jsx)(s.h3,{id:"amazon-eks",children:"Amazon EKS"}),"\n",(0,i.jsx)(s.p,{children:"Amazon Elastic Kubernetes Service (Amazon EKS) gives you the flexibility to start, run, and scale Kubernetes applications in the AWS Cloud or on-premises. Amazon EKS helps you provide highly-available and secure clusters and automates key tasks such as patching, node provisioning, and updates. Amazon EKS was not used for the implementation of the sample architecture; however, it is possible to use Amazon EKS instead of Amazon ECS."}),"\n",(0,i.jsx)(s.h3,{id:"aws-lambda",children:"AWS Lambda"}),"\n",(0,i.jsx)(s.p,{children:"AWS Lambda is a serverless compute service that lets you run code without provisioning or managing servers, creating workload-aware cluster scaling logic, maintaining event integrations, or managing runtimes. With Lambda, you can run code for virtually any type of application or backend service - all with zero administration. AWS Lambda's role in the example architecture is to receive messages from the Amazon Kinesis Data Stream, which is very low implementation overhead. Lambda integrates natively with Kinesis Data Streams. The polling, checkpointing, and error handling complexities are abstracted when using this integration. This allows the Lambda function code to focus on business logic processing."}),"\n",(0,i.jsx)(s.h3,{id:"amazon-kinesis-data-streams",children:"Amazon Kinesis Data Streams"}),"\n",(0,i.jsx)(s.p,{children:"Amazon Kinesis Data Streams is a massively scalable and durable real-time data streaming service. In this architecture, Kinesis Data Streams is used to decouple key application components, such as processing incoming data and persisting the enriched data in Amazon DynamoDB. This split is possible because the writing of the data can be done asynchronously, while the response to the requesting client should happen as quickly as possible."}),"\n",(0,i.jsx)(s.h3,{id:"amazon-elasticache",children:"Amazon ElastiCache"}),"\n",(0,i.jsx)(s.p,{children:"Amazon ElastiCache offers a fully managed in-memory data store, compatible with Redis or Memcached that enables you to power real-time applications with sub-millisecond latency. The service can scale-out, scale-in, and scale-up to meet fluctuating application demands. Write and memory scaling is supported with sharding. In this architecture, Redis is used in two different ways: source for core data, and pub/sub implementation to actively update the L1-cache in the main application."}),"\n",(0,i.jsx)(s.h3,{id:"amazon-dynamodb",children:"Amazon DynamoDB"}),"\n",(0,i.jsx)(s.p,{children:"Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It is a fully managed database with scalability and high availability built in. DynamoDB is used in this architecture as the central repository for the result data, since DynamoDB is fully managed, multi-region, multi-active, durable database for internet-scale applications."}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>o});var i=a(6540);const t={},n=i.createContext(t);function r(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);