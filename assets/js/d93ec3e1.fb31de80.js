"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1330],{6261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"smallrye-mutiny/observing-events","title":"Observing Events","description":"Observing the events emitted by **Uni** and **Multi** instances.","source":"@site/docs/smallrye-mutiny/observing-events.mdx","sourceDirName":"smallrye-mutiny","slug":"/smallrye-mutiny/observing-events","permalink":"/docs/smallrye-mutiny/observing-events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20},"sidebar":"tutorialSidebar","previous":{"title":"Smallrye Mutiny Zero","permalink":"/docs/smallrye-mutiny/smallrye-mutiny-zero"},"next":{"title":"Uni","permalink":"/docs/smallrye-mutiny/uni"}}');var i=n(4848),r=n(8453);const l={sidebar_position:20},c="Observing Events",o={},d=[{value:"Events",id:"events",level:2},{value:"The <em><strong>invoke</strong></em> method",id:"the-invoke-method",level:2},{value:"The <em><strong>call</strong></em> method",id:"the-call-method",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"observing-events",children:"Observing Events"})}),"\n",(0,i.jsxs)(t.p,{children:["Observing the events emitted by ",(0,i.jsx)(t.a,{href:"https://javadoc.io/doc/io.smallrye.reactive/mutiny/latest/io.smallrye.mutiny/io/smallrye/mutiny/Uni.html",children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.strong,{children:"Uni"})})})})," and ",(0,i.jsx)(t.a,{href:"https://javadoc.io/doc/io.smallrye.reactive/mutiny/latest/io.smallrye.mutiny/io/smallrye/mutiny/Multi.html",children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.strong,{children:"Multi"})})})})," instances."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://javadoc.io/doc/io.smallrye.reactive/mutiny/latest/io.smallrye.mutiny/io/smallrye/mutiny/Uni.html",children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.strong,{children:"Uni"})})})})," and ",(0,i.jsx)(t.a,{href:"https://javadoc.io/doc/io.smallrye.reactive/mutiny/latest/io.smallrye.mutiny/io/smallrye/mutiny/Multi.html",children:(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.strong,{children:"Multi"})})})})," emit events. Your code is going to observe and process these events:"]}),"\n",(0,i.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Event"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Uni / Multi"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Direction"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Note"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"item"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Uni + Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"upstream -> downstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"The upstream sent an item."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"failure"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Uni + Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"upstream -> downstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"The upstream failed."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"completion"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"upstream -> downstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"The upstream completed."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"subscribe"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Uni and Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"downstream -> upstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"A downstream subscriber is interested in the data."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"subscription"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Uni and Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"upstream -> downstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Event happening after a subscribe event to indicate that the upstream acknowledged the subscription."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"cancellation"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Uni and Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"downstream -> upstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"A downstream subscriber does not want any more events."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"overflow"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"upstream -> downstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"The upstream has emitted more than the downstream can handle."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"request"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Multi"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"downstream -> upstream"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"The downstream indicates its capacity to handle n items."})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["For each kind of event, there is an associated group providing the methods to handle that specific event:\n",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"onItem()"})}),", ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"onFailure()"})}),", ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"onCompletion()"})})," and so on.\nThese groups provide two methods to peek at the various events without impacting its distribution:\n",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"invoke(...)"})})," and ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"call(...)"})}),".\nIt does not transform the received event; it notifies you that something happened and let you react.\nOnce this reaction completes, the event is propagated downstream or upstream depending on the direction of the event."]}),"\n",(0,i.jsxs)(t.h2,{id:"the-invoke-method",children:["The ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"invoke"})})," method"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"invoke"})})," method is synchronous and the passed callback does not return anything. Mutiny invokes the configured callback when the observed stream dispatches the event:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javadoc",children:'Uni<String> u = uni.onItem()\n    .invoke(i -> System.out.println("Received item: " + i));\n\nMulti<String> m = multi.onItem()\n    .invoke(i -> System.out.println("Received item: " + i));\n'})}),"\n",(0,i.jsx)(t.p,{children:"As said above, invoke is synchronous. Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."}),"\n",(0,i.jsx)("img",{src:"/img/smallrye-mutiny/invoke-method-01.png",alt:"invoke-method-01.png"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Of course, we highly recommend you not to block."}),"\n",(0,i.jsx)(t.p,{children:"The following snippets show how you can log the different types of events."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'multi\n    .onSubscription()\n        .invoke(() -> System.out.println("\u2b07\ufe0f Subscribed"))\n    .onItem()\n        .invoke(i -> System.out.println("\u2b07\ufe0f Received item: " + i))\n    .onFailure()\n        .invoke(f -> System.out.println("\u2b07\ufe0f Failed with " + f))\n    .onCompletion()\n        .invoke(() -> System.out.println("\u2b07\ufe0f Completed"))\n    .onCancellation()\n        .invoke(() -> System.out.println("\u2b06\ufe0f Cancelled"))\n    .onRequest()\n        .invoke(l -> System.out.println("\u2b06\ufe0f Requested: " + l));\n'})}),"\n",(0,i.jsxs)(t.h2,{id:"the-call-method",children:["The ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"call"})})," method"]}),"\n",(0,i.jsxs)(t.p,{children:["Unlike invoke, ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"call"})})," is asynchronous, and the callback returns a Uni<?> object."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"call"})})," is often used when you need to implement asynchronous side-effects, such as closing resources."]}),"\n",(0,i.jsx)("img",{src:"/img/smallrye-mutiny/call-method-01.png",alt:"call-method-01.png"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"multi\n    .onItem().call(i ->\n        Uni.createFrom().voidItem()\n            .onItem().delayIt().by(Duration.ofSeconds(1)\n    )\n);\n"})}),"\n",(0,i.jsx)(t.p,{children:"As shown in the previous snippet, you can use this approach to delay items. But, the primary use case is about completing asynchronous actions such as calling an asynchronous close method on a resource:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"multi\n    .onCompletion().call(() -> resource.close());\n"})}),"\n",(0,i.jsx)(t.p,{children:"Under the hood, Mutiny gets the Uni (by invoking the callback) and subscribes to it. It observes the item or failure event from that Uni. It discards the item value as only the emission matters in this case."}),"\n",(0,i.jsx)(t.p,{children:"If the callback throws an exception or the produced Uni produces a failure, Mutiny propagates that failure (or a CompositeException) downstream, replacing the original event."}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The invoke and call methods are handy when you need to observe a Uni or a Multi without changing the transiting events."}),"\n",(0,i.jsx)(t.li,{children:"Use invoke for implementing synchronous side-effects or logging events."}),"\n",(0,i.jsx)(t.li,{children:"The asynchronous nature of call makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The following table highlights the key differences:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"}}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"invoke"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"call"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Nature"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"synchronous"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"asynchronous"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Return type"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"void"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Uni<T>"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Main use cases"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"logging, synchronous side-effects"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"I/O operations, closing resources, flushing data"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var s=n(6540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);