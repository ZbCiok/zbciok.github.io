"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[765],{2151:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"messaging/rabbitmq/examples/hello-world","title":"Hello World","description":"Description","source":"@site/docs/messaging/rabbitmq/examples/hello-world.mdx","sourceDirName":"messaging/rabbitmq/examples","slug":"/messaging/rabbitmq/examples/hello-world","permalink":"/docs/messaging/rabbitmq/examples/hello-world","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":120,"frontMatter":{"sidebar_position":120},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/messaging/rabbitmq/examples/getting-started"},"next":{"title":"Direct Exchange in AMQP","permalink":"/docs/messaging/rabbitmq/examples/direct-exchange-in-amqp"}}');var i=t(4848),o=t(8453);const a={sidebar_position:120},l="Hello World",s={},c=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Install RabbitMQ on Docker",id:"install-rabbitmq-on-docker",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"Reciever.java",id:"recieverjava",level:3},{value:"Sender.java",id:"senderjava",level:3},{value:"Running",id:"running",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"hello-world",children:"Hello World"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"In this simple HelloWorld example, We will create a Sender program that sends messages to a queue and we will create a Reciever program that picks the messages from a queue and consumes it."}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JDK 17+"}),"\n",(0,i.jsx)(n.li,{children:"RabbitMQ on Docker"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"install-rabbitmq-on-docker",children:"Install RabbitMQ on Docker"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"docker-compose.yml:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'version: \'3\'\n\nservices:\n  rabbitmq:\n    image: rabbitmq:management\n    container_name: rabbitmq\n    environment:\n      - RABBITMQ_DEFAULT_USER=admin\n      - RABBITMQ_DEFAULT_PASS=admin\n    ports:\n      - "5672:5672"\n      - "15672:15672"\n\nnetworks:\n  default:\n    driver: bridge\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Open the URL:"})," ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"http://localhost:15672/",children:"http://localhost:15672/"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["username: admin ",(0,i.jsx)("br",{}),"\npassword: admin"]}),"\n",(0,i.jsx)("img",{src:"/img/messaging/rabbitmq/rabbitmq-localhost-405.png",alt:"rabbitmq-localhost-405.png"}),"\n",(0,i.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:".\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u2514\u2500\u2500 java\n            \u2514\u2500\u2500 com\n                \u2514\u2500\u2500 jreact\n                    \u2514\u2500\u2500 rabbitmq\n                        \u251c\u2500\u2500 Reciever.java\n                        \u2514\u2500\u2500 Sender.java\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>rabbitmq-hello-world</groupId>\n    <artifactId>rabbitmq-hello-world</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <properties>\n        <main.class>com.jreact.rabbitmq.${mc}</main.class>\n    </properties>\n\n    <dependencies>\n        \x3c!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --\x3e\n        <dependency>\n            <groupId>com.rabbitmq</groupId>\n            <artifactId>amqp-client</artifactId>\n            <version>5.20.0</version>\n        </dependency>\n        \x3c!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --\x3e\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>2.0.13</version>\n        </dependency>\n        \x3c!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple --\x3e\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>2.0.13</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <defaultGoal>install</defaultGoal>\n        <finalName>${mc}</finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>2.5.1</version>\n                <inherited>true</inherited>\n                <configuration>\n                    <source>17</source>\n                    <target>17</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <version>3.6.0</version>\n                <configuration>\n                    <descriptorRefs>\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\n                    </descriptorRefs>\n                    <archive>\n                        <manifest>\n                            <mainClass>${main.class}</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"recieverjava",children:"Reciever.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.jreact.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class Reciever {\n\tprivate final static String QUEUE_NAME = "hello";\n\n\tpublic static void main(String[] argv) throws Exception {\n\t\tConnectionFactory factory = new ConnectionFactory();\n\t\tfactory.setHost("localhost");\n\t\tfactory.setUsername("admin");\n\t\tfactory.setPassword("admin");\n\t\tConnection connection = factory.newConnection();\n\t\tChannel channel = connection.createChannel();\n\n\t\tchannel.queueDeclare(QUEUE_NAME, false, false, false, null);\n\t\tSystem.out.println(" [*] Waiting for messages. To exit press CTRL+C");\n\n\t\tDeliverCallback deliverCallback = (consumerTag, delivery) -> {\n\t\t\tString message = new String(delivery.getBody(), "UTF-8");\n\t\t\tSystem.out.println(" [x] Received \'" + message + "\'");\n\t\t};\n\t\tchannel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> {\n\t\t});\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"senderjava",children:"Sender.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.jreact.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\npublic class Sender {\n\tprivate final static String QUEUE_NAME = "hello";\n\n\tpublic static void main(String[] argv) throws Exception {\n\t\tConnectionFactory factory = new ConnectionFactory();\n\t\tfactory.setHost("localhost");\n\t\tfactory.setUsername("admin");\n\t\tfactory.setPassword("admin");\n\t\ttry (Connection connection = factory.newConnection(); Channel channel = connection.createChannel()) {\n\t\t\tchannel.queueDeclare(QUEUE_NAME, false, false, false, null);\n\n\t\t\tfor (int i = 0; i < 10; i++) {\n\t\t\t\tString message = "Hello World! " + i;\n\t\t\t\tchannel.basicPublish("", QUEUE_NAME, null, message.getBytes("UTF-8"));\n\t\t\t\tSystem.out.println(" [x] Sent \'" + message + "\'");\n\t\t\t}\n\t\t}\n\t}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"running",children:"Running"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"mvn package -Dmc=Reciever"})}),(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"mvn package -Dmc=Sender"})})]}),"\n",(0,i.jsxs)(n.p,{children:["goto ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"target"})})]}),"\n",(0,i.jsx)(n.p,{children:"Make new terminal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"java -jar Reciever-jar-with-dependencies.jar\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SLF4J(W): No SLF4J providers were found.\nSLF4J(W): Defaulting to no-operation (NOP) logger implementation\nSLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.\n [*] Waiting for messages. To exit press CTRL+C\n"})}),"\n",(0,i.jsx)(n.p,{children:"Make next terminal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"java -jar Sender-jar-with-dependencies.jar\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SLF4J(W): No SLF4J providers were found.\nSLF4J(W): Defaulting to no-operation (NOP) logger implementation\nSLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.\n [x] Sent 'Hello World! 0'\n [x] Sent 'Hello World! 1'\n [x] Sent 'Hello World! 2'\n [x] Sent 'Hello World! 3'\n [x] Sent 'Hello World! 4'\n [x] Sent 'Hello World! 5'\n [x] Sent 'Hello World! 6'\n [x] Sent 'Hello World! 7'\n [x] Sent 'Hello World! 8'\n [x] Sent 'Hello World! 9'\n"})}),"\n",(0,i.jsx)(n.p,{children:"goto Reciever terminal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SLF4J(W): No SLF4J providers were found.\nSLF4J(W): Defaulting to no-operation (NOP) logger implementation\nSLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.\n [*] Waiting for messages. To exit press CTRL+C\n [x] Received 'Hello World! 0'\n [x] Received 'Hello World! 1'\n [x] Received 'Hello World! 2'\n [x] Received 'Hello World! 3'\n [x] Received 'Hello World! 4'\n [x] Received 'Hello World! 5'\n [x] Received 'Hello World! 6'\n [x] Received 'Hello World! 7'\n [x] Received 'Hello World! 8'\n [x] Received 'Hello World! 9'\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Source Code: ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/rabbitmq/rabbitmq-hello-world",children:"https://github.com/ZbCiok/zjc-examples/tree/main/reactive-messaging/rabbitmq/rabbitmq-hello-world"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);