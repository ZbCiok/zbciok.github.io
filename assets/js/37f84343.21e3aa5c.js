"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[4723],{137:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"streams/apache-flink/Table-API-and-SQL/table-api","title":"Table API","description":"Dynamic tables and continuous queries","source":"@site/docs/streams/apache-flink/Table-API-and-SQL/table-api.mdx","sourceDirName":"streams/apache-flink/Table-API-and-SQL","slug":"/streams/apache-flink/Table-API-and-SQL/table-api","permalink":"/docs/streams/apache-flink/Table-API-and-SQL/table-api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":110,"frontMatter":{"sidebar_position":110},"sidebar":"tutorialSidebar","previous":{"title":"Table API & SQL","permalink":"/docs/apache-flink/table-api-and-sql"},"next":{"title":"SQL","permalink":"/docs/streams/apache-flink/Table-API-and-SQL/sql"}}');var s=n(4848),r=n(8453);const i={sidebar_position:110},c="Table API",l={},o=[{value:"Dynamic tables and continuous queries",id:"dynamic-tables-and-continuous-queries",level:2}];function d(e){const a={a:"a",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"table-api",children:"Table API"})}),"\n",(0,s.jsx)(a.h2,{id:"dynamic-tables-and-continuous-queries",children:"Dynamic tables and continuous queries"}),"\n",(0,s.jsx)(a.p,{children:"In Flink SQL, a table is a structured representation of data that can be queried using SQL syntax. Tables can be created from various sources such as streams, files, or other tables. To create a table, you register metadata to connect to the system you want to use, such as Kafka. Dynamic tables process streaming data and continuously update their results to reflect changes on input tables. The underlying data of a dynamic table is stored in the storage layer, which in this example is Kafka."}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:(0,s.jsx)(a.strong,{children:"Transforming a stream to a dynamic table:"})})}),"\n",(0,s.jsx)("img",{src:"/img/streams/apache-flink/transforming-stream-to-dynamic-table.png",width:"500px",alt:"transforming-stream-to-dynamic-table.png"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:(0,s.jsx)(a.strong,{children:"Querying a dynamic table and sending the result of the continuous query to another dynamic table:"})})}),"\n",(0,s.jsx)("img",{src:"/img/streams/apache-flink/querying-dynamic-table-to-another-dynamic-table.png",alt:"querying-dynamic-table-to-another-dynamic-table.png"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.a,{href:"/docs/streams/apache-flink/Examples/read-write-dynamic-table",children:(0,s.jsx)(a.em,{children:(0,s.jsx)(a.strong,{children:"Example"})})})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.a,{href:"https://www.confluent.io/blog/kafka-streams-tables-part-1-event-streaming/#stream-table-duality",children:(0,s.jsx)(a.em,{children:(0,s.jsx)(a.strong,{children:"Stream-table duality"})})})})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>c});var t=n(6540);const s={},r=t.createContext(s);function i(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);