"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[6195],{8998:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=e(4848),i=e(8453);const o={sidebar_position:1},a="postgresql-crud-02",s={id:"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02",title:"postgresql-crud-02",description:"Description",source:"@site/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02.mdx",sourceDirName:"project-reactor/project-reactor-implemented-in/spring-webflux",slug:"/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02",permalink:"/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"mongodb-crud",permalink:"/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud"},next:{title:"SmallRye Mutiny",permalink:"/docs/smallrye-mutiny"}},l={},p=[{value:"Description",id:"description",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Database",id:"database",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"pom.xml",id:"pomxml",level:3},{value:"application.properties",id:"applicationproperties",level:3},{value:"schema.sql",id:"schemasql",level:3},{value:"Enable r2dbc Repositories",id:"enable-r2dbc-repositories",level:3},{value:"<em><strong><strong>SpringBootR2dbcPostgresqlExampleApplication.java</strong></strong></em>",id:"springbootr2dbcpostgresqlexampleapplicationjava",level:4},{value:"<em><strong><strong>TutorialRepository.java</strong></strong></em>",id:"tutorialrepositoryjava",level:3},{value:"<em><strong><strong>Tutorial.java (Data Model)</strong></strong></em>",id:"tutorialjava-data-model",level:3},{value:"<em><strong><strong>TutorialService.java</strong></strong></em>",id:"tutorialservicejava",level:3},{value:"<em><strong><strong>TutorialController.java (Spring WebFlux Rest API Controller)</strong></strong></em>",id:"tutorialcontrollerjava-spring-webflux-rest-api-controller",level:3},{value:"Running",id:"running",level:2},{value:"Run Spring Boot application: <em><strong><strong>mvn spring-boot</strong></strong></em>",id:"run-spring-boot-application-mvn-spring-boot",level:4},{value:"Postman. Create Tutorials:",id:"postman-create-tutorials",level:4},{value:"Analogously:",id:"analogously",level:4},{value:"Source code:",id:"source-code",level:3}];function c(t){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"postgresql-crud-02",children:"postgresql-crud-02"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"We\u2019re gonna build a Spring Boot WebFlux Rest API example \u2013 CRUD application that uses Spring Data Reactive (R2DBC) to interact with embedded database."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Java 17+"}),"\n",(0,r.jsx)(n.li,{children:"Spring Boot 3.0.2"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL"}),"\n",(0,r.jsx)(n.li,{children:"Maven 3.6+"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"database",children:"Database"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"docker run -it --rm \\\n    -p 5432:5432 \\\n    -e POSTGRES_USER=dbuser \\\n    -e POSTGRES_PASSWORD=theSecretPassword \\\n    -e POSTGRES_DB=micronaut \\\n    postgres:11.5-alpine\n"})}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)("img",{src:"/img/project-reactor/spring-webflux/spring-webflux-postgresql-crud-2-proj-struct.png",alt:"spring-webflux-postgresql-crud-2-proj-struct.png"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h3,{id:"pomxml",children:"pom.xml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n\txmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n\txsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.0.2</version>\n\t\t<relativePath /> \x3c!-- lookup parent from repository --\x3e\n\t</parent>\n\n\t<groupId>zjc.examples</groupId>\n\t<artifactId>spring-webflux-postgresql-crud-02</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>spring-webflux-postgresql-crud-02</name>\n\t<description>spring-webflux-postgresql-crud-02</description>\n\n\t<properties>\n\t\t<java.version>17</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-r2dbc</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-webflux</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>postgresql</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>r2dbc-postgresql</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>io.projectreactor</groupId>\n\t\t\t<artifactId>reactor-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"applicationproperties",children:"application.properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\nspring.r2dbc.url=r2dbc:postgresql://localhost:5432/micronaut\nspring.r2dbc.username=dbuser\nspring.r2dbc.password=theSecretPassword\n"})}),"\n",(0,r.jsx)(n.h3,{id:"schemasql",children:"schema.sql"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\nCREATE TABLE IF NOT EXISTS tutorial (id SERIAL PRIMARY KEY, title VARCHAR(255), description VARCHAR(255), published BOOLEAN);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"enable-r2dbc-repositories",children:"Enable r2dbc Repositories"}),"\n",(0,r.jsx)(n.p,{children:"@EnableR2dbcRepositories is a Spring annotation that is used to enable R2DBC repositories in a Spring Boot application. It provides a convenient way to create a repository layer in a Spring Boot application that uses R2DBC to interact with a database."}),"\n",(0,r.jsx)(n.p,{children:"Because R2DBC repository support is enabled in our Spring Boot application by default (spring.data.r2dbc.repositories.enabled=true), so that the @EnableR2dbcRepositories is not necessary."}),"\n",(0,r.jsx)(n.p,{children:"The @EnableR2dbcRepositories annotation could be added to a configuration class in your application, typically the main class that is annotated with @SpringBootApplication:"}),"\n",(0,r.jsx)(n.h4,{id:"springbootr2dbcpostgresqlexampleapplicationjava",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"SpringBootR2dbcPostgresqlExampleApplication.java"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package zjc.examples.spring.r2dbc.postgresql;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.ClassPathResource;\n//import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\nimport org.springframework.r2dbc.connection.init.ConnectionFactoryInitializer;\nimport org.springframework.r2dbc.connection.init.ResourceDatabasePopulator;\nimport org.springframework.web.reactive.config.EnableWebFlux;\n\nimport io.r2dbc.spi.ConnectionFactory;\n\n@EnableWebFlux\n//@EnableR2dbcRepositories\n@SpringBootApplication\npublic class SpringBootR2dbcPostgresqlExampleApplication {\n\n  @Bean\n  ConnectionFactoryInitializer initializer(ConnectionFactory connectionFactory) {\n\n    ConnectionFactoryInitializer initializer = new ConnectionFactoryInitializer();\n    initializer.setConnectionFactory(connectionFactory);\n    initializer.setDatabasePopulator(new ResourceDatabasePopulator(new ClassPathResource("schema.sql")));\n\n    return initializer;\n  }\n\n  public static void main(String[] args) {\n    SpringApplication.run(SpringBootR2dbcPostgresqlExampleApplication.class, args);\n  }\n\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tutorialrepositoryjava",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"TutorialRepository.java"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package zjc.examples.spring.r2dbc.postgresql.repository;\n\nimport org.springframework.data.r2dbc.repository.R2dbcRepository;\nimport org.springframework.stereotype.Repository;\n\nimport zjc.examples.spring.r2dbc.postgresql.model.Tutorial;\n\nimport reactor.core.publisher.Flux;\n\n@Repository\npublic interface TutorialRepository extends R2dbcRepository<Tutorial, Integer>{\n  Flux<Tutorial> findByTitleContaining(String title);\n\n  Flux<Tutorial> findByPublished(boolean isPublished);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tutorialjava-data-model",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"Tutorial.java (Data Model)"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package zjc.examples.spring.r2dbc.postgresql.model;\n\nimport org.springframework.data.annotation.Id;\n\npublic class Tutorial {\n\n  @Id\n  private int id;\n\n  private String title;\n\n  private String description;\n\n  private boolean published;\n\n  public Tutorial() {\n\n  }\n\n  public Tutorial(String title, String description, boolean published) {\n    this.title = title;\n    this.description = description;\n    this.published = published;\n  }\n\n  public void setId(int id) {\n    this.id = id;\n  }\n\n  public long getId() {\n    return id;\n  }\n\n  public String getTitle() {\n    return title;\n  }\n\n  public void setTitle(String title) {\n    this.title = title;\n  }\n\n  public String getDescription() {\n    return description;\n  }\n\n  public void setDescription(String description) {\n    this.description = description;\n  }\n\n  public boolean getPublished() {\n    return published;\n  }\n\n  public void setPublished(boolean isPublished) {\n    this.published = isPublished;\n  }\n\n  @Override\n  public String toString() {\n    return "Tutorial [id=" + id + ", title=" + title + ", desc=" + description + ", published=" + published + "]";\n  }\n\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tutorialservicejava",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"TutorialService.java"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package zjc.examples.spring.r2dbc.postgresql.service;\n\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport zjc.examples.spring.r2dbc.postgresql.model.Tutorial;\nimport zjc.examples.spring.r2dbc.postgresql.repository.TutorialRepository;\n\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Service\npublic class TutorialService {\n\n  @Autowired\n  TutorialRepository tutorialRepository;\n\n  public Flux<Tutorial> findAll() {\n    return tutorialRepository.findAll();\n  }\n\n  public Flux<Tutorial> findByTitleContaining(String title) {\n    return tutorialRepository.findByTitleContaining(title);\n  }\n\n  public Mono<Tutorial> findById(int id) {\n    return tutorialRepository.findById(id);\n  }\n\n  public Mono<Tutorial> save(Tutorial tutorial) {\n    return tutorialRepository.save(tutorial);\n  }\n\n  public Mono<Tutorial> update(int id, Tutorial tutorial) {\n    return tutorialRepository.findById(id).map(Optional::of).defaultIfEmpty(Optional.empty())\n        .flatMap(optionalTutorial -> {\n          if (optionalTutorial.isPresent()) {\n            tutorial.setId(id);\n            return tutorialRepository.save(tutorial);\n          }\n\n          return Mono.empty();\n        });\n  }\n\n  public Mono<Void> deleteById(int id) {\n    return tutorialRepository.deleteById(id);\n  }\n\n  public Mono<Void> deleteAll() {\n    return tutorialRepository.deleteAll();\n  }\n\n  public Flux<Tutorial> findByPublished(boolean isPublished) {\n    return tutorialRepository.findByPublished(isPublished);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tutorialcontrollerjava-spring-webflux-rest-api-controller",children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.strong,{children:"TutorialController.java (Spring WebFlux Rest API Controller)"})})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package zjc.examples.spring.r2dbc.postgresql.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport zjc.examples.spring.r2dbc.postgresql.model.Tutorial;\nimport zjc.examples.spring.r2dbc.postgresql.service.TutorialService;\n\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@CrossOrigin(origins = "http://localhost:8081")\n@RestController\n@RequestMapping("/api")\npublic class TutorialController {\n  @Autowired\n  TutorialService tutorialService;\n\n  @GetMapping("/tutorials")\n  @ResponseStatus(HttpStatus.OK)\n  public Flux<Tutorial> getAllTutorials(@RequestParam(required = false) String title) {\n    if (title == null)\n      return tutorialService.findAll();\n    else\n      return tutorialService.findByTitleContaining(title);\n  }\n\n  @GetMapping("/tutorials/{id}")\n  @ResponseStatus(HttpStatus.OK)\n  public Mono<Tutorial> getTutorialById(@PathVariable("id") int id) {\n    return tutorialService.findById(id);\n  }\n\n  @PostMapping("/tutorials")\n  @ResponseStatus(HttpStatus.CREATED)\n  public Mono<Tutorial> createTutorial(@RequestBody Tutorial tutorial) {\n    return tutorialService.save(new Tutorial(tutorial.getTitle(), tutorial.getDescription(), false));\n  }\n\n  @PutMapping("/tutorials/{id}")\n  @ResponseStatus(HttpStatus.OK)\n  public Mono<Tutorial> updateTutorial(@PathVariable("id") int id, @RequestBody Tutorial tutorial) {\n    return tutorialService.update(id, tutorial);\n  }\n\n  @DeleteMapping("/tutorials/{id}")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public Mono<Void> deleteTutorial(@PathVariable("id") int id) {\n    return tutorialService.deleteById(id);\n  }\n\n  @DeleteMapping("/tutorials")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public Mono<Void> deleteAllTutorials() {\n    return tutorialService.deleteAll();\n  }\n\n  @GetMapping("/tutorials/published")\n  @ResponseStatus(HttpStatus.OK)\n  public Flux<Tutorial> findByPublished() {\n    return tutorialService.findByPublished(true);\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"running",children:"Running"}),"\n",(0,r.jsxs)(n.h4,{id:"run-spring-boot-application-mvn-spring-boot",children:["Run Spring Boot application: ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:(0,r.jsxs)(n.strong,{children:["mvn spring-boot",":run"]})})})]}),"\n",(0,r.jsx)(n.h4,{id:"postman-create-tutorials",children:"Postman. Create Tutorials:"}),"\n",(0,r.jsx)("img",{src:"/img/project-reactor/spring-webflux/spring-webflux-postgresql-crud-1-create-product.png",alt:"spring-webflux-postgresql-crud-1-create-product.png"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h4,{id:"analogously",children:"Analogously:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Read Operation,"}),"\n",(0,r.jsx)(n.li,{children:"Update Operation,"}),"\n",(0,r.jsx)(n.li,{children:"Delete Operation."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"source-code",children:"Source code:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/spring/webflux/spring-webflux-postgresql-crud-02",children:"https://github.com/ZbCiok/zjc-examples/tree/main/spring/webflux/spring-webflux-postgresql-crud-02"})})]})}function d(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>a,x:()=>s});var r=e(6540);const i={},o=r.createContext(i);function a(t){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),r.createElement(o.Provider,{value:n},t.children)}}}]);