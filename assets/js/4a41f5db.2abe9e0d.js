"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[5570],{9241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(4848),r=n(8453);const i={sidebar_position:30},s="Fraud Detector",o={id:"streams/apache-flink/Examples/fraud-detector",title:"Fraud Detector",description:"Description",source:"@site/docs/streams/apache-flink/Examples/fraud-detector.mdx",sourceDirName:"streams/apache-flink/Examples",slug:"/streams/apache-flink/Examples/fraud-detector",permalink:"/docs/streams/apache-flink/Examples/fraud-detector",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Average Sensor Readings",permalink:"/docs/streams/apache-flink/Examples/AverageSensorReadings"},next:{title:"Read-Write Dynamic Table",permalink:"/docs/streams/apache-flink/Examples/read-write-dynamic-table"}},c={},l=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"FraudDetectionJob.java",id:"frauddetectionjobjava",level:3},{value:"FraudDetector.java",id:"frauddetectorjava",level:3},{value:"Run &amp; Output",id:"run--output",level:2},{value:"Source Code: <br></br> <em><strong>https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/frauddetection</strong></em>",id:"source-code--httpsgithubcomzbciokzjc-examplestreemainstreamsflinkfrauddetection",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"fraud-detector",children:"Fraud Detector"})}),"\n",(0,a.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(t.p,{children:["Fraud detection is critical for financial institutions, online marketplaces, and e-commerce platforms. A financial institution wants to develop a real-time fraud detection system that analyzes thousands of transactions per second to detect potential fraud. Flink can process each transaction as an individual event with millisecond latency. It doesn\u2019t rely on micro-batching, allowing it to provide real-time results.",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.a,{href:"https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/try-flink/datastream/",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"Fraud Detection with the DataStream API"})})})]}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"JDK 11"}),"\n",(0,a.jsx)(t.li,{children:"Maven"}),"\n",(0,a.jsx)(t.li,{children:"IDE (IntelliJ IDEA, Eclipse)"}),"\n",(0,a.jsx)(t.li,{children:"Flink 1.20.0"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:".\n\u251c\u2500\u2500 dependency-reduced-pom.xml\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main\n        \u251c\u2500\u2500 java\n        \u2502\xa0\xa0 \u2514\u2500\u2500 spendreport\n        \u2502\xa0\xa0     \u251c\u2500\u2500 FraudDetectionJob.java\n        \u2502\xa0\xa0     \u2514\u2500\u2500 FraudDetector.java\n        \u2514\u2500\u2500 resources\n            \u2514\u2500\u2500 log4j2.properties\n"})}),"\n",(0,a.jsx)(t.h3,{id:"frauddetectionjobjava",children:"FraudDetectionJob.java"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public class FraudDetectionJob {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Transaction> transactions = env\n\t\t\t\t.addSource(new TransactionSource())\n\t\t\t\t.name("transactions");\n\n\t\tDataStream<Alert> alerts = transactions\n\t\t\t\t.keyBy(Transaction::getAccountId)\n\t\t\t\t.process(new FraudDetector())\n\t\t\t\t.name("fraud-detector");\n\n\t\talerts\n\t\t\t\t.addSink(new AlertSink())\n\t\t\t\t.name("send-alerts");\n\n\t\tenv.execute("Fraud Detection");\n\t}\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"FraudDetectionJob"})})," class defines the data flow of the application."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"The Execution Environment"}),(0,a.jsx)("br",{}),"\nThe ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"StreamExecutionEnvironment"})})," is how you set properties for your Job, create your sources, and finally trigger the execution of the Job."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Creating a Source"}),(0,a.jsx)("br",{}),"\nSources ingest data from external systems. This walkthrough uses a source that generates an infinite stream of credit card transactions for you to process. Each transaction contains an account ID (accountId), timestamp (timestamp) of when the transaction occurred, and US$ amount (amount). The name attached to the source is just for debugging purposes, so if something goes wrong, we will know where the error originated."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'DataStream<Transaction> transactions = env\n    .addSource(new TransactionSource())\n    .name("transactions");\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/apache/flink/blob/master/flink-walkthroughs/flink-walkthrough-common/src/main/java/org/apache/flink/walkthrough/common/source/TransactionSource.java",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"TransactionSource"})})})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Partitioning Events & Detecting Fraud"}),(0,a.jsx)("br",{}),"\nThe transactions stream contains a lot of transactions from a large number of users, such that it needs to be processed in parallel by multiple fraud detection tasks. Since fraud occurs on a per-account basis, you must ensure that all transactions for the same account are processed by the same parallel task of the fraud detector operator.",(0,a.jsx)("br",{}),"\nTo ensure that the same physical task processes all records for a particular key, you can partition a stream using DataStream#keyBy. The process() call adds an operator that applies a function to each partitioned element in the stream. It is common to say the operator immediately after a keyBy, in this case FraudDetector, is executed within a keyed context."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'DataStream<Alert> alerts = transactions\n    .keyBy(Transaction::getAccountId)\n    .process(new FraudDetector())\n    .name("fraud-detector");\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Outputting Results"}),(0,a.jsx)("br",{}),"\nA sink writes a DataStream to an external system; such as Apache Kafka, Cassandra, and AWS Kinesis. The AlertSink logs each Alert record with log level INFO, instead of writing it to persistent storage, so you can easily see your results."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"alerts.addSink(new AlertSink());\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/apache/flink/blob/master/flink-walkthroughs/flink-walkthrough-common/src/main/java/org/apache/flink/walkthrough/common/sink/AlertSink.java",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"AlertSink"})})})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"frauddetectorjava",children:"FraudDetector.java"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public class FraudDetector extends KeyedProcessFunction<Long, Transaction, Alert> {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate static final double SMALL_AMOUNT = 1.00;\n\tprivate static final double LARGE_AMOUNT = 500.00;\n\tprivate static final long ONE_MINUTE = 60 * 1000;\n\n\tprivate transient ValueState<Boolean> flagState;\n\tprivate transient ValueState<Long> timerState;\n\n\t@Override\n\tpublic void open(OpenContext openContext) {\n\t\tValueStateDescriptor<Boolean> flagDescriptor = new ValueStateDescriptor<>(\n\t\t\t\t"flag",\n\t\t\t\tTypes.BOOLEAN);\n\t\tflagState = getRuntimeContext().getState(flagDescriptor);\n\n\t\tValueStateDescriptor<Long> timerDescriptor = new ValueStateDescriptor<>(\n\t\t\t\t"timer-state",\n\t\t\t\tTypes.LONG);\n\t\ttimerState = getRuntimeContext().getState(timerDescriptor);\n\t}\n\n\t@Override\n\tpublic void processElement(\n\t\t\tTransaction transaction,\n\t\t\tContext context,\n\t\t\tCollector<Alert> collector) throws Exception {\n\n\t\t// Get the current state for the current key\n\t\tBoolean lastTransactionWasSmall = flagState.value();\n\n\t\t// Check if the flag is set\n\t\tif (lastTransactionWasSmall != null) {\n\t\t\tif (transaction.getAmount() > LARGE_AMOUNT) {\n\t\t\t\t//Output an alert downstream\n\t\t\t\tAlert alert = new Alert();\n\t\t\t\talert.setId(transaction.getAccountId());\n\n\t\t\t\tcollector.collect(alert);\n\t\t\t}\n\t\t\t// Clean up our state\n\t\t\tcleanUp(context);\n\t\t}\n\n\t\tif (transaction.getAmount() < SMALL_AMOUNT) {\n\t\t\t// set the flag to true\n\t\t\tflagState.update(true);\n\n\t\t\tlong timer = context.timerService().currentProcessingTime() + ONE_MINUTE;\n\t\t\tcontext.timerService().registerProcessingTimeTimer(timer);\n\n\t\t\ttimerState.update(timer);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onTimer(long timestamp, OnTimerContext ctx, Collector<Alert> out) {\n\t\t// remove flag after 1 minute\n\t\ttimerState.clear();\n\t\tflagState.clear();\n\t}\n\n\tprivate void cleanUp(Context ctx) throws Exception {\n\t\t// delete timer\n\t\tLong timer = timerState.value();\n\t\tctx.timerService().deleteProcessingTimeTimer(timer);\n\n\t\t// clean up all state\n\t\ttimerState.clear();\n\t\tflagState.clear();\n\t}\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"FraudDetector"})})," class defines the business logic of the function that detects fraudulent transactions."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"open(OpenContext openContext)"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"{\n    // initialize the value of searchString\n }\n"})}),"\n","in\n",(0,a.jsx)(t.a,{href:"https://github.com/apache/flink/blob/master/flink-core/src/main/java/org/apache/flink/api/common/functions/RichFunction.java",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"RichFunction"})})}),".",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n","To cancel a timer, you have to remember what time it is set for, and remembering implies state, so you will begin by creating a timer state along with your flag state.","\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Override\npublic void open(OpenContext openContext) {\n\tValueStateDescriptor<Boolean> flagDescriptor = new ValueStateDescriptor<>(\n\t\t\t"flag",\n\t\t\tTypes.BOOLEAN);\n\tflagState = getRuntimeContext().getState(flagDescriptor);\n\n\tValueStateDescriptor<Long> timerDescriptor = new ValueStateDescriptor<>(\n\t\t\t"timer-state",\n\t\t\tTypes.LONG);\n\ttimerState = getRuntimeContext().getState(timerDescriptor);\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"processElement"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"\nprocessElement(I var1, KeyedProcessFunction<K, I, O>.Context var2, Collector<O> var3)<br />\n"})}),"\n","The fraud detector is implemented as a KeyedProcessFunction. Its method ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"KeyedProcessFunction#processElement"})})," is called for every transaction event. This version produces an alert on every transaction.","\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"if (lastTransactionWasSmall != null) {\n\tif (transaction.getAmount() > LARGE_AMOUNT) {\n\t\t//Output an alert downstream\n\t\tAlert alert = new Alert();\n\t\talert.setId(transaction.getAccountId());\n\t\tcollector.collect(alert);\n\t}\n\t// Clean up our state\n\tcleanUp(context);\n}\n"})}),"\n",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"KeyedProcessFunction#processElement"})})," is called with a Context that contains a timer service. The timer service can be used to query the current time, register timers, and delete timers. With this, you can set a timer for 1 minute in the future every time the flag is set and store the timestamp in timerState.","\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"if (lastTransactionWasSmall != null) {\n\tif (transaction.getAmount() > LARGE_AMOUNT) {\n\t\t//Output an alert downstream\n\t\tAlert alert = new Alert();\n\t\talert.setId(transaction.getAccountId());\n\t\tcollector.collect(alert);\n\t}\n\t// Clean up our state\n\tcleanUp(context);\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"onTimer"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"onTimer(long timestamp, OnTimerContext ctx, Collector<Alert> out)\n"})}),"\n","When a timer fires, it calls ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"KeyedProcessFunction#onTimer"})}),". Overriding this method is how you can implement your callback to reset the flag.","\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Override\npublic void onTimer(long timestamp, OnTimerContext ctx, Collector<Alert> out) {\n\t// remove flag after 1 minute\n\ttimerState.clear();\n\tflagState.clear();\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"cleanUp"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"cleanUp(Context ctx)\n"})}),"\n","Finally, to cancel the timer, you need to delete the registered timer and delete the timer state. You can wrap this in a helper method and call this method instead of flagState.clear().","\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"private void cleanUp(Context ctx) throws Exception {\n\t// delete timer\n\tLong timer = timerState.value();\n\tctx.timerService().deleteProcessingTimeTimer(timer);\n\n\t// clean up all state\n\ttimerState.clear();\n\tflagState.clear();\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"run--output",children:"Run & Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"\n12:42:51,996 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:42:57,014 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:43:02,031 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:43:07,048 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:43:12,065 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:43:17,081 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:43:22,096 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n12:43:27,109 INFO  org.apache.flink.walkthrough.common.sink.AlertSink           [] - Alert{id=3}\n"})}),"\n",(0,a.jsxs)(t.h4,{id:"source-code--httpsgithubcomzbciokzjc-examplestreemainstreamsflinkfrauddetection",children:["Source Code: ",(0,a.jsx)("br",{})," ",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.a,{href:"https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/frauddetection",children:"https://github.com/ZbCiok/zjc-examples/tree/main/streams/flink/frauddetection"})})})]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(6540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);