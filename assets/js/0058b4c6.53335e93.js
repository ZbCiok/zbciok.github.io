"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Streams","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Java 8 Streams","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating Streams","href":"/docs/streams/java-8-streams/CreatingStreams","docId":"streams/java-8-streams/CreatingStreams","unlisted":false},{"type":"category","label":"Operations on Streams","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Intermediate Operations","href":"/docs/streams/java-8-streams/operations-on-streams/IntermediateOperations","docId":"streams/java-8-streams/operations-on-streams/IntermediateOperations","unlisted":false},{"type":"link","label":"Terminate Operations","href":"/docs/streams/java-8-streams/operations-on-streams/TerminateOperations","docId":"streams/java-8-streams/operations-on-streams/TerminateOperations","unlisted":false}],"href":"/docs/streams/java-8-streams/operations-on-streams"},{"type":"category","label":"Collectors","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"groupingBy","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"groupingBy classifier","href":"/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier","docId":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier","unlisted":false},{"type":"link","label":"groupingBy classifier collector","href":"/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-collector","docId":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-collector","unlisted":false},{"type":"link","label":"groupingBy classifier supplier collector","href":"/docs/streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-supplier-collector","docId":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-supplier-collector","unlisted":false}],"href":"/docs/streams/java-8-streams/collectors/grouping-by"},{"type":"link","label":"joining","href":"/docs/streams/java-8-streams/collectors/joining","docId":"streams/java-8-streams/collectors/joining","unlisted":false},{"type":"link","label":"partitioningBy","href":"/docs/streams/java-8-streams/collectors/partitioning","docId":"streams/java-8-streams/collectors/partitioning","unlisted":false},{"type":"link","label":"reducing","href":"/docs/streams/java-8-streams/collectors/reducing","docId":"streams/java-8-streams/collectors/reducing","unlisted":false},{"type":"link","label":"summarizing","href":"/docs/streams/java-8-streams/collectors/summarizing","docId":"streams/java-8-streams/collectors/summarizing","unlisted":false},{"type":"link","label":"summing","href":"/docs/streams/java-8-streams/collectors/summing","docId":"streams/java-8-streams/collectors/summing","unlisted":false}],"href":"/docs/streams/java-8-streams/collectors"},{"type":"link","label":"Running Examples","href":"/docs/streams/java-8-streams/RunningExamples","docId":"streams/java-8-streams/RunningExamples","unlisted":false}],"href":"/docs/java-8-streams"},{"type":"category","label":"Reactive Streams","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Callbacks in Java","href":"/docs/streams/reactive-streams/callbacks-in-java","docId":"streams/reactive-streams/callbacks-in-java","unlisted":false},{"type":"link","label":"Asynchronicity","href":"/docs/streams/reactive-streams/asynchronicity","docId":"streams/reactive-streams/asynchronicity","unlisted":false},{"type":"link","label":"Backpressure","href":"/docs/streams/reactive-streams/backpressure","docId":"streams/reactive-streams/backpressure","unlisted":false},{"type":"category","label":"java.util.concurrent.Flow","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Publisher One Subscriber","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherOneSubscriber","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherOneSubscriber","unlisted":false},{"type":"link","label":"Publisher Multi Subscriber","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherMultiSubscriber","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherMultiSubscriber","unlisted":false},{"type":"link","label":"Subscriber","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriber","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriber","unlisted":false},{"type":"link","label":"Subscription","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscription","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscription","unlisted":false},{"type":"link","label":"Subscription Cancel","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriptionCancel","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriptionCancel","unlisted":false},{"type":"link","label":"Subscription Request","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubcriptionRequest","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubcriptionRequest","unlisted":false},{"type":"link","label":"SubmissionPublisher","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubmissionPublisher","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubmissionPublisher","unlisted":false},{"type":"link","label":"Getting Started with the Flow","href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples/Getting-Started-with-Flow","docId":"streams/reactive-streams/java-util-concurrent-Flow/examples/Getting-Started-with-Flow","unlisted":false}],"href":"/docs/streams/reactive-streams/java-util-concurrent-Flow/examples"}],"href":"/docs/streams/reactive-streams/java-util-concurrent-Flow"}],"href":"/docs/reactive-streams"}],"href":"/docs/streams"},{"type":"category","label":"Project Reactor","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mono and Flux","href":"/docs/project-reactor/mono-and-flux","docId":"project-reactor/mono-and-flux","unlisted":false},{"type":"category","label":"Implementations","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"spring-webflux","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"mongodb-crud","href":"/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud","docId":"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud","unlisted":false},{"type":"link","label":"postgresql-crud-02","href":"/docs/project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02","docId":"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02","unlisted":false}],"href":"/docs/project-reactor/project-reactor-implemented-in/spring-webflux"}],"href":"/docs/project-reactor/project-reactor-implemented-in"}],"href":"/docs/project-reactor"},{"type":"category","label":"SmallRye Mutiny","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Observing Events","href":"/docs/SmallRye Mutiny/observing-events","docId":"SmallRye Mutiny/observing-events","unlisted":false}],"href":"/docs/smallrye-mutiny"},{"type":"link","label":"Auxiliary Software","href":"/docs/auxiliary-software","docId":"auxiliary-software","unlisted":false}]},"docs":{"auxiliary-software":{"id":"auxiliary-software","title":"Auxiliary Software","description":"Docker Containers","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro","description":"Reactive programming is an important programming paradigm that is becoming increasingly popular in Java development. Reactive programming is based on the use of asynchronous and non-blocking data streams to handle data and events.","sidebar":"tutorialSidebar"},"project-reactor/index":{"id":"project-reactor/index","title":"Project Reactor","description":"Create Efficient Reactive Systems","sidebar":"tutorialSidebar"},"project-reactor/mono-and-flux":{"id":"project-reactor/mono-and-flux","title":"Mono and Flux","description":"Mono represents a publisher **(Project Reactor)** of zero or one object of type T.","sidebar":"tutorialSidebar"},"project-reactor/project-reactor-implemented-in/index":{"id":"project-reactor/project-reactor-implemented-in/index","title":"Implementations","description":"","sidebar":"tutorialSidebar"},"project-reactor/project-reactor-implemented-in/spring-webflux/index":{"id":"project-reactor/project-reactor-implemented-in/spring-webflux/index","title":"spring-webflux","description":"","sidebar":"tutorialSidebar"},"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud":{"id":"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-mongodb-crud","title":"mongodb-crud","description":"Description","sidebar":"tutorialSidebar"},"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02":{"id":"project-reactor/project-reactor-implemented-in/spring-webflux/spring-webflux-postgresql-crud-02","title":"postgresql-crud-02","description":"Description","sidebar":"tutorialSidebar"},"SmallRye Mutiny/index":{"id":"SmallRye Mutiny/index","title":"SmallRye Mutiny","description":"https://smallrye.io/","sidebar":"tutorialSidebar"},"SmallRye Mutiny/observing-events":{"id":"SmallRye Mutiny/observing-events","title":"Observing Events","description":"Observing the events emitted by **Uni** and **Multi** instances.","sidebar":"tutorialSidebar"},"streams/index":{"id":"streams/index","title":"Streams","description":"","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier":{"id":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier","title":"groupingBy classifier","description":"Data","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-collector":{"id":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-collector","title":"groupingBy classifier collector","description":"Data","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-supplier-collector":{"id":"streams/java-8-streams/collectors/grouping-by/grouping-by-classifier-supplier-collector","title":"groupingBy classifier supplier collector","description":"Data","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/grouping-by/index":{"id":"streams/java-8-streams/collectors/grouping-by/index","title":"groupingBy","description":"","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/index":{"id":"streams/java-8-streams/collectors/index","title":"Collectors","description":"Class Collectors","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/joining":{"id":"streams/java-8-streams/collectors/joining","title":"joining","description":"joining()","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/partitioning":{"id":"streams/java-8-streams/collectors/partitioning","title":"partitioningBy","description":"Collectors **partitioningBy()** method is a predefined method of java.util.stream. Collectors class which is used to partition a stream of objects(or a set of elements) based on a given predicate. There are two overloaded variants of the method that are present. One takes only a predicate as a parameter whereas the other takes both predicate and a collector instance as parameters.","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/reducing":{"id":"streams/java-8-streams/collectors/reducing","title":"reducing","description":"The overloaded static methods, Collectors.**reducing()** return a Collector which perform a reduction on the input stream elements according to the provided binary operator.","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/summarizing":{"id":"streams/java-8-streams/collectors/summarizing","title":"summarizing","description":"**summarizingDouble()**","sidebar":"tutorialSidebar"},"streams/java-8-streams/collectors/summing":{"id":"streams/java-8-streams/collectors/summing","title":"summing","description":"**summingDouble()**","sidebar":"tutorialSidebar"},"streams/java-8-streams/CreatingStreams":{"id":"streams/java-8-streams/CreatingStreams","title":"Creating Streams","description":"Create Java Stream","sidebar":"tutorialSidebar"},"streams/java-8-streams/index":{"id":"streams/java-8-streams/index","title":"Java 8 Streams","description":"Stream In Java","sidebar":"tutorialSidebar"},"streams/java-8-streams/operations-on-streams/index":{"id":"streams/java-8-streams/operations-on-streams/index","title":"Operations on Streams","description":"Running Examples","sidebar":"tutorialSidebar"},"streams/java-8-streams/operations-on-streams/IntermediateOperations":{"id":"streams/java-8-streams/operations-on-streams/IntermediateOperations","title":"Intermediate Operations","description":"Stream intermediate operations return another Stream which allows you to call multiple operations in the form of a query.","sidebar":"tutorialSidebar"},"streams/java-8-streams/operations-on-streams/TerminateOperations":{"id":"streams/java-8-streams/operations-on-streams/TerminateOperations","title":"Terminate Operations","description":"The terminal operations of the Java Stream interface typically return a single value.","sidebar":"tutorialSidebar"},"streams/java-8-streams/RunningExamples":{"id":"streams/java-8-streams/RunningExamples","title":"Running Examples","description":"- Java-8 Streams Creating Streams","sidebar":"tutorialSidebar"},"streams/reactive-streams/asynchronicity":{"id":"streams/reactive-streams/asynchronicity","title":"Asynchronicity","description":"Approaches for Asynchronous Programming","sidebar":"tutorialSidebar"},"streams/reactive-streams/backpressure":{"id":"streams/reactive-streams/backpressure","title":"Backpressure","description":"Backpressure is the ability of a Consumer/Subscriber to signal the Producer that the rate of emission is higher than what it can handle. So using this mechanism, the Consumer/Subscriber gets control over the speed at which data is emitted.","sidebar":"tutorialSidebar"},"streams/reactive-streams/callbacks-in-java":{"id":"streams/reactive-streams/callbacks-in-java","title":"Callbacks in Java","description":"Using synchronous and asynchronous callbacks in Java - including callbacks with lambda expressions, CompletableFuture, and more.","sidebar":"tutorialSidebar"},"streams/reactive-streams/index":{"id":"streams/reactive-streams/index","title":"Reactive Streams","description":"Reactive Streams is a specification for asynchronous stream processing.","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherMultiSubscriber":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherMultiSubscriber","title":"Publisher Multi Subscriber","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherOneSubscriber":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowPublisherOneSubscriber","title":"Publisher One Subscriber","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubcriptionRequest":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubcriptionRequest","title":"Subscription Request","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubmissionPublisher":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubmissionPublisher","title":"SubmissionPublisher","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriber":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriber","title":"Subscriber","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscription":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscription","title":"Subscription","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriptionCancel":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/FlowSubscriptionCancel","title":"Subscription Cancel","description":"Description","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/Getting-Started-with-Flow":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/Getting-Started-with-Flow","title":"Getting Started with the Flow","description":"[//]//www.linkedin.com/pulse/getting-started-java-flow-api-uraz-pokharel&#41;...)","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/examples/index":{"id":"streams/reactive-streams/java-util-concurrent-Flow/examples/index","title":"Examples","description":"","sidebar":"tutorialSidebar"},"streams/reactive-streams/java-util-concurrent-Flow/index":{"id":"streams/reactive-streams/java-util-concurrent-Flow/index","title":"java.util.concurrent.Flow","description":"The Java Flow API, introduced in Java 9,","sidebar":"tutorialSidebar"}}}}')}}]);