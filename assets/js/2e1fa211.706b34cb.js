"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1130],{4597:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=t(4848),a=t(8453);const i={slug:"/vertx"},n="VERT.X",o={id:"vertx/index",title:"VERT.X",description:"VERT.X",source:"@site/docs/vertx/index.mdx",sourceDirName:"vertx",slug:"/vertx",permalink:"/docs/vertx",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/vertx"},sidebar:"tutorialSidebar",previous:{title:"Hibernate Reactive",permalink:"/docs/smallrye-mutiny/implementations/hibernate-reactive"},next:{title:"Quarkus",permalink:"/docs/quarkus"}},c={},d=[{value:"Vert.x Reactive Streams Integration",id:"vertx-reactive-streams-integration",level:2},{value:"Using Vert.x Reactive Streams",id:"using-vertx-reactive-streams",level:2},{value:"Reactive Read Stream",id:"reactive-read-stream",level:2},{value:"Reactive Write Stream",id:"reactive-write-stream",level:2}];function l(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"vertx",children:"VERT.X"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://vertx.io",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"VERT.X"})})})}),"\n",(0,s.jsx)(r.h2,{id:"vertx-reactive-streams-integration",children:"Vert.x Reactive Streams Integration"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://vertx.io/docs/vertx-reactive-streams/java/",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"Vert.x Reactive Streams"})})})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"http://www.reactive-streams.org/",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"Reactive Streams"})})})," is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure on the JVM."]}),"\n",(0,s.jsxs)(r.p,{children:["Vert.x provides its own mechanisms for handling streams of data and pumping them with back pressure from one to another using the ",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/core/streams/class-use/ReadStream.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"io.vertx.core.streams.ReadStream"})})}),", ",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/core/streams/WriteStream.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"io.vertx.core.streams.WriteStream"})})})," and ",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/core/streams/Pump.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"io.vertx.core.streams.Pump"})})}),". Please see the ",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/vertx-core/java/",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"Vert.x core"})})})," manual for more information on Vert.x streams."]}),"\n",(0,s.jsx)(r.p,{children:"This library provides implementations of read stream and write stream which also act as reactive streams publishers and subscribers. This allows us to treat any reactive streams publisher or subscriber and deal with it like any other Vert.x read or write stream."}),"\n",(0,s.jsx)(r.h2,{id:"using-vertx-reactive-streams",children:"Using Vert.x Reactive Streams"}),"\n",(0,s.jsx)(r.p,{children:"To use Vert.x Reactive Streams, add the following dependency to the dependencies section of your build descriptor:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:"<dependency>\n <groupId>io.vertx</groupId>\n <artifactId>vertx-reactive-streams</artifactId>\n <version>4.5.8</version>\n</dependency>\n"})}),"\n",(0,s.jsx)(r.h2,{id:"reactive-read-stream",children:"Reactive Read Stream"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["We provide an implementation of the ",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/core/streams/ReadStream.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"Vert.x ReadStream"})})})," interface with\n",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/ext/reactivestreams/ReactiveReadStream.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"ReactiveReadStream"})})}),"\nwhich also implements a reactive streams Subscriber."]}),"\n",(0,s.jsx)(r.p,{children:"You can pass an instance of this to any reactive streams Publisher (e.g. a Publisher from Akka) and then you will be able to read from that just like any other Vert.x ReadStream (e.g. use a Pump to pump it to a WriteStream."}),"\n",(0,s.jsx)(r.p,{children:"Here\u2019s an example of taking a publisher from some other reactive streams implementation (e.g. Akka) and pumping that stream to the body of a server side HTTP response. This will handle back pressure automatically."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:"ReactiveReadStream<Buffer> rrs = ReactiveReadStream.readStream();\n\n// Subscribe the read stream to the publisher\notherPublisher.subscribe(rrs);\n\n// Pipe from the read stream to the http response\nrrs.pipeTo(response);\n"})}),"\n",(0,s.jsx)(r.h2,{id:"reactive-write-stream",children:"Reactive Write Stream"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["We also provide an implementation of the ",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/core/streams/WriteStream.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"Vert.x WriteStream"})})})," interface with\n",(0,s.jsx)(r.a,{href:"https://vertx.io/docs/apidocs/io/vertx/ext/reactivestreams/ReactiveWriteStream.html",children:(0,s.jsx)(r.em,{children:(0,s.jsx)(r.strong,{children:"ReactiveWriteStream"})})}),"\nwhich also implements a reactive streams Publisher. You can take any reactive streams Subscriber (e.g. a Subscriber from Akka) and then you will be able* to write to it like any other Vert.x WriteStream. (e.g. use a Pump to pump it from a ReadStream)."]}),"\n",(0,s.jsx)(r.p,{children:"You use pause, resume, and writeQueueFull, as you would with any Vert.x read stream to handle your back pressure. This is automatically translated internally into the reactive streams method of propagating back pressure (requesting more items)."}),"\n",(0,s.jsx)(r.p,{children:"Here\u2019s an example of taking a subscriber from some other reactive streams implementation and pumping the body of a server side HTTP request to that subscriber. This will handle back pressure automatically."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-java",children:"ReactiveWriteStream<Buffer> rws = ReactiveWriteStream.writeStream(vertx);\n\n// Subscribe the other subscriber to the write stream\nrws.subscribe(otherSubscriber);\n\n// Pipe the http request to the write stream\nrequest.pipeTo(rws);\n"})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>n,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function n(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);