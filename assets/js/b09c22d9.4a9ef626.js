"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[1260],{2315:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>C,contentTitle:()=>N,default:()=>W,frontMatter:()=>B,metadata:()=>a,toc:()=>z});const a=JSON.parse('{"id":"aws/dynamodb/dynamodb-start","title":"DynamoDB Start","description":"- What is Amazon DynamoDB?","source":"@site/docs/aws/dynamodb/dynamodb-start.mdx","sourceDirName":"aws/dynamodb","slug":"/aws/dynamodb/dynamodb-start","permalink":"/docs/aws/dynamodb/dynamodb-start","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"DynamodDB","permalink":"/docs/aws/dynamodb"},"next":{"title":"DynamodDB Streams","permalink":"/docs/aws/dynamodb/ddb-streams"}}');var s=t(4848),i=t(8453),l=t(6540),r=t(4164),o=t(52),d=t(6347),c=t(5793),m=t(9025),u=t(4430),h=t(4148);function b(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return b(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function y(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const a=(0,d.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,m.aZ)(s),(0,l.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function j(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=p(e),[i,r]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!y({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[o,d]=x({queryString:t,groupId:a}),[m,u]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,h.Dv)(t);return[a,(0,l.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),b=(()=>{const e=o??m;return y({value:e,tabValues:s})?e:null})();(0,c.A)((()=>{b&&r(b)}),[b]);return{selectedValue:i,selectValue:(0,l.useCallback)((e=>{if(!y({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),u(e)}),[d,u,s]),tabValues:s}}var g=t(5251);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function S(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),m=e=>{const n=e.currentTarget,t=d.indexOf(n),s=l[t].value;s!==a&&(c(n),i(s))},u=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{d.push(e)},onKeyDown:u,onClick:m,...i,className:(0,r.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function D(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,l.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=j(e);return(0,s.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,s.jsx)(S,{...n,...e}),(0,s.jsx)(D,{...n,...e})]})}function A(e){const n=(0,g.A)();return(0,s.jsx)(w,{...e,children:b(e.children)},String(n))}const v={tabItem:"tabItem_Ymn6"};function k(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(v.tabItem,a),hidden:t,children:n})}var T=t(7170),I=t(3304);const B={sidebar_position:10},N="DynamoDB Start",C={},z=[{value:"DynamoDB use cases",id:"dynamodb-use-cases",level:2},{value:"Setting up DynamoDB",id:"setting-up-dynamodb",level:2},{value:"Attribute Data Types",id:"attribute-data-types",level:2},{value:"Partitions",id:"partitions",level:2},{value:"Table, Items, Attributes, Keys, Indexes",id:"table-items-attributes-keys-indexes",level:2},{value:"DynamoDB Streams",id:"dynamodb-streams",level:2},{value:"PartiQL statements for DynamoDB",id:"partiql-statements-for-dynamodb",level:2},{value:"Basic operations on DynamoDB tables",id:"basic-operations-on-dynamodb-tables",level:2},{value:"1. LocalStack",id:"1-localstack",level:3},{value:"awslocal configure <em><strong>(sample)</strong></em>",id:"awslocal-configure-sample",level:4},{value:"2. <em><strong>dynamodb-admin</strong></em>",id:"2-dynamodb-admin",level:3},{value:"<em><strong>Get started with the AWS SDK for Java 2.x</strong></em>",id:"get-started-with-the-aws-sdk-for-java-2x",level:4},{value:"Create a table",id:"create-a-table",level:2},{value:"AWS Management Console",id:"aws-management-console",level:3},{value:"AWS CLI",id:"aws-cli",level:3},{value:"AWS SDK",id:"aws-sdk",level:3},{value:"LocalStack",id:"localstack",level:3},{value:"Write data to a table",id:"write-data-to-a-table",level:2},{value:"AWS Management Console",id:"aws-management-console-1",level:3},{value:"AWS CLI",id:"aws-cli-1",level:3},{value:"AWS SDK",id:"aws-sdk-1",level:3},{value:"LocalStack",id:"localstack-1",level:3},{value:"Read data from a table",id:"read-data-from-a-table",level:2},{value:"AWS Management Console",id:"aws-management-console-2",level:3},{value:"AWS CLI",id:"aws-cli-2",level:3},{value:"DynamoDB API",id:"dynamodb-api",level:3},{value:"PartiQL for DynamoDB",id:"partiql-for-dynamodb",level:3},{value:"AWS SDK",id:"aws-sdk-2",level:3},{value:"LocalStack",id:"localstack-2",level:3},{value:"DynamoDB API",id:"dynamodb-api-1",level:3},{value:"PartiQL for DynamoDB",id:"partiql-for-dynamodb-1",level:3},{value:"Update data in a table",id:"update-data-in-a-table",level:2},{value:"AWS Management Console",id:"aws-management-console-3",level:3},{value:"AWS CLI",id:"aws-cli-3",level:3},{value:"DynamoDB API",id:"dynamodb-api-2",level:3},{value:"PartiQL for DynamoDB",id:"partiql-for-dynamodb-2",level:3},{value:"AWS SDK",id:"aws-sdk-3",level:3},{value:"LocalStack",id:"localstack-3",level:3},{value:"DynamoDB API",id:"dynamodb-api-3",level:3},{value:"PartiQL for DynamoDB",id:"partiql-for-dynamodb-3",level:3},{value:"Delete table",id:"delete-table",level:2},{value:"AWS Management Console",id:"aws-management-console-4",level:3},{value:"AWS CLI",id:"aws-cli-4",level:3},{value:"AWS SDK",id:"aws-sdk-4",level:3},{value:"LocalStack",id:"localstack-4",level:3},{value:"Query data in a table",id:"query-data-in-a-table",level:2},{value:"AWS Management Console",id:"aws-management-console-5",level:3},{value:"AWS CLI",id:"aws-cli-5",level:3},{value:"DynamoDB API",id:"dynamodb-api-4",level:3},{value:"PartiQL for DynamoDB",id:"partiql-for-dynamodb-4",level:3},{value:"AWS SDK",id:"aws-sdk-5",level:3},{value:"LocalStack",id:"localstack-5",level:3},{value:"DynamoDB API",id:"dynamodb-api-5",level:3},{value:"PartiQL for DynamoDB",id:"partiql-for-dynamodb-5",level:3}];function L(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dynamodb-start",children:"DynamoDB Start"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"What is Amazon DynamoDB?"})})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/dynamodb/",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Amazon DynamoDB Documentation"})})})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"DynamoDB is a fully managed NoSQL database service provided by Amazon. It requires only a primary key and doesn\u2019t require a schema to create a table. It can store any amount of data and serve any amount of traffic. With DyanmoDB, you can expect a good performance even when it scales up. It is a very simple and small API that follows key-value method to store, access and perform advanced data retrieval."}),"\n",(0,s.jsx)(n.p,{children:"DynamoDB comprises of three fundamental units known as table, attribute, and items. A table holds a set of items, an attribute is the simplest element that stores data without any further division and item holds a set of attributes."}),"\n",(0,s.jsx)(n.h2,{id:"dynamodb-use-cases",children:"DynamoDB use cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Financial service applications"}),"\n",(0,s.jsx)(n.li,{children:"Gaming applications"}),"\n",(0,s.jsx)(n.li,{children:"Streaming applications"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-dynamodb",children:"Setting up DynamoDB"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"web service"}),"\n",(0,s.jsx)(n.li,{children:"downloadable version"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"attribute-data-types",children:"Attribute Data Types"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"DynamoDB supports a large set of data types for table attributes. Each data type falls into one of the three following categories:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scalar \u2212 These types represent a single value, and include number, string, binary, Boolean, and null."}),"\n",(0,s.jsx)(n.li,{children:"Document \u2212 These types represent a complex structure possessing nested attributes, and include lists and maps."}),"\n",(0,s.jsx)(n.li,{children:"Set \u2212 These types represent multiple scalars, and include string sets, number sets, and binary sets."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.tutorialspoint.com/dynamodb/dynamodb_data_types.htm",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Data Types"})})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"partitions",children:"Partitions"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Amazon DynamoDB stores data in partitions. A partition is an allocation of storage for a table, backed by solid state drives (SSDs) and automatically replicated across multiple Availability Zones within an AWS Region. Partition management is handled entirely by DynamoDB\u2014you never have to manage partitions yourself."}),"\n",(0,s.jsxs)(n.p,{children:["When you create a table, the initial status of the table is ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"CREATING"})}),". During this phase, DynamoDB allocates sufficient partitions to the table so that it can handle your provisioned throughput requirements. You can begin writing and reading table data after the table status changes to ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"ACTIVE"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.Partitions.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Partitions and data distribution"})})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"table-items-attributes-keys-indexes",children:"Table, Items, Attributes, Keys, Indexes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A table can be visualized as a group of items. Taking an example of Employee records, you will have Employee Name, Employee ID, Address and Phone Number all such items will be stored in a table."}),"\n",(0,s.jsx)(n.li,{children:"An item is a set of attributes in a table. You can also understand an item as a set of attributes that can uniquely define your entry in a table. For example, an item in Employee records will identify a single employee."}),"\n",(0,s.jsx)(n.li,{children:"An attribute is a single field that is attached to an item. E.g. Employee Name."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://repost.aws/knowledge-center/primary-key-dynamodb-table",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Primary Keys"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Partition key"})}),": This is a simple primary key. If the table has only a partition key, then no two items can have the same partition key value. The primary key must be unique for each item in the table irrespective of the type of primary key that you choose."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Composite primary key"})}),": This is a combination of partition key and sort key. If the table has a composite primary key, then two items might have the same partition key value. However, those items must have different sort key values."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Indexes","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Global Secondary Indexes (GSI)"})})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Local Secondary Indexes (LSI)"})})})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DeclarativeTagsList.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDB attributes"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In Amazon DynamoDB, an item is a collection of attributes. Each attribute has a name and a value. An attribute value can be a scalar, a set, or a document type. For more information, see Amazon DynamoDB: How it works. DynamoDB provides four operations for basic create, read, update, and delete (CRUD) functionality."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Working with items and attributes"})})}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"dynamodb-streams",children:"DynamoDB Streams"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/streamsmain.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Working with streams"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Kinesis Data Streams"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can use Amazon Kinesis Data Streams to capture changes to Amazon DynamoDB."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDB Streams"})})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://aws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns/",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDB Streams Use Cases and Design Patterns"})})})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"partiql-statements-for-dynamodb",children:"PartiQL statements for DynamoDB"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.statements.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL Statements"})})}),(0,s.jsx)("br",{}),"\nAmazon DynamoDB supports the following PartiQL statements."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"DynamoDB does not support all PartiQL statements."}),(0,s.jsx)(n.p,{children:"This reference provides basic syntax and usage examples of PartiQL statements that you manually run using the AWS CLI or APIs."})]}),"\n",(0,s.jsx)(n.p,{children:"Data manipulation language (DML) is the set of PartiQL statements that you use to manage data in DynamoDB tables. You use DML statements to add, modify, or delete data in a table."}),"\n",(0,s.jsx)(n.p,{children:"The following DML and query language statements are supported:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.select.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL select statements for DynamoDB"})})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.update.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL update statements for DynamoDB"})})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.insert.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL insert statements for DynamoDB"})})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.delete.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL delete statements for DynamoDB"})})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"basic-operations-on-dynamodb-tables",children:"Basic operations on DynamoDB tables"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create a table"}),"\n",(0,s.jsx)(n.li,{children:"Write data to a table"}),"\n",(0,s.jsx)(n.li,{children:"Read data from a table"}),"\n",(0,s.jsx)(n.li,{children:"Update data in a table"}),"\n",(0,s.jsx)(n.li,{children:"Delete table"}),"\n",(0,s.jsx)(n.li,{children:"Query data in a table"}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.h3,{id:"1-localstack",children:"1. LocalStack"}),(0,s.jsxs)(n.h4,{id:"awslocal-configure-sample",children:["awslocal configure ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"(sample)"})})]}),(0,s.jsx)(n.p,{children:"Run:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal configure\n"})}),(0,s.jsxs)(n.p,{children:["AWS Access Key ID [****************test]:",(0,s.jsx)("br",{}),"\nAWS Secret Access Key [****************test]:",(0,s.jsx)("br",{}),"\nDefault region name [test]:",(0,s.jsx)("br",{}),"\nDefault output format [json]:"]}),(0,s.jsxs)(n.h3,{id:"2-dynamodb-admin",children:["2. ",(0,s.jsx)(n.a,{href:"/docs/auxiliary-software/dynamodb-admin",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"dynamodb-admin"})})})]})]}),"\n",(0,s.jsx)(n.h4,{id:"get-started-with-the-aws-sdk-for-java-2x",children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Get started with the AWS SDK for Java 2.x"})})})}),"\n",(0,s.jsx)(n.h2,{id:"create-a-table",children:"Create a table"}),"\n",(0,s.jsxs)(A,{children:[(0,s.jsxs)(k,{value:"console",label:"AWS Management Console",default:!0,children:[(0,s.jsx)(n.h3,{id:"aws-management-console",children:"AWS Management Console"}),(0,s.jsx)(n.p,{children:"To create a new Music table using the DynamoDB console:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Sign in to the AWS Management Console and open the DynamoDB console at ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/dynamodb/",children:"https://console.aws.amazon.com/dynamodb/"})})}),"."]}),"\n",(0,s.jsx)(n.li,{children:"In the left navigation pane, choose Tables."}),"\n",(0,s.jsx)(n.li,{children:"Choose Create table."}),"\n",(0,s.jsxs)(n.li,{children:["Enter the Table details as follows:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For Table name, enter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Music"})}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["For Partition key, enter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Artist"})}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["For Sort key, enter ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"SongTitle"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Once the table is in ACTIVE status, we recommend that you enable Point-in-time backups for DynamoDB on the table."}),"\n"]})]}),(0,s.jsxs)(k,{value:"cli",label:"AWS CLI",children:[(0,s.jsx)(n.h3,{id:"aws-cli",children:"AWS CLI"}),(0,s.jsx)(n.p,{children:"The following AWS CLI example creates a new Music table using create-table (Linux)."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws dynamodb create-table \\\n    --table-name Music \\\n    --attribute-definitions \\\n        AttributeName=Artist,AttributeType=S \\\n        AttributeName=SongTitle,AttributeType=S \\\n    --key-schema \\\n        AttributeName=Artist,KeyType=HASH \\\n        AttributeName=SongTitle,KeyType=RANGE \\\n    --provisioned-throughput \\\n        ReadCapacityUnits=5,WriteCapacityUnits=5 \\\n    --table-class STANDARD\n"})})]}),(0,s.jsxs)(k,{value:"sdk",label:"AWS SDK",children:[(0,s.jsx)(n.h3,{id:"aws-sdk",children:"AWS SDK"}),(0,s.jsx)(n.p,{children:"The following code examples show how to create a DynamoDB table using an AWS SDK (Java)."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import software.amazon.awssdk.core.waiters.WaiterResponse;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeDefinition;\nimport software.amazon.awssdk.services.dynamodb.model.CreateTableRequest;\nimport software.amazon.awssdk.services.dynamodb.model.CreateTableResponse;\nimport software.amazon.awssdk.services.dynamodb.model.DescribeTableRequest;\nimport software.amazon.awssdk.services.dynamodb.model.DescribeTableResponse;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport software.amazon.awssdk.services.dynamodb.model.KeySchemaElement;\nimport software.amazon.awssdk.services.dynamodb.model.KeyType;\nimport software.amazon.awssdk.services.dynamodb.model.ProvisionedThroughput;\nimport software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType;\nimport software.amazon.awssdk.services.dynamodb.waiters.DynamoDbWaiter;\n\n/**\n * Before running this Java V2 code example, set up your development\n * environment, including your credentials.\n *\n * For more information, see the following documentation topic:\n *\n * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n */\npublic class CreateTable {\n    public static void main(String[] args) {\n        final String usage = """\n\n                Usage:\n                    <tableName> <key>\n\n                Where:\n                    tableName - The Amazon DynamoDB table to create (for example, Music3).\n                    key - The key for the Amazon DynamoDB table (for example, Artist).\n                """;\n\n        if (args.length != 2) {\n            System.out.println(usage);\n            System.exit(1);\n        }\n\n        String tableName = args[0];\n        String key = args[1];\n        System.out.println("Creating an Amazon DynamoDB table " + tableName + " with a simple primary key: " + key);\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n\n        String result = createTable(ddb, tableName, key);\n        System.out.println("New table is " + result);\n        ddb.close();\n    }\n\n    public static String createTable(DynamoDbClient ddb, String tableName, String key) {\n        DynamoDbWaiter dbWaiter = ddb.waiter();\n        CreateTableRequest request = CreateTableRequest.builder()\n                .attributeDefinitions(AttributeDefinition.builder()\n                        .attributeName(key)\n                        .attributeType(ScalarAttributeType.S)\n                        .build())\n                .keySchema(KeySchemaElement.builder()\n                        .attributeName(key)\n                        .keyType(KeyType.HASH)\n                        .build())\n                .provisionedThroughput(ProvisionedThroughput.builder()\n                        .readCapacityUnits(10L)\n                        .writeCapacityUnits(10L)\n                        .build())\n                .tableName(tableName)\n                .build();\n\n        String newTable;\n        try {\n            CreateTableResponse response = ddb.createTable(request);\n            DescribeTableRequest tableRequest = DescribeTableRequest.builder()\n                    .tableName(tableName)\n                    .build();\n\n            // Wait until the Amazon DynamoDB table is created.\n            WaiterResponse<DescribeTableResponse> waiterResponse = dbWaiter.waitUntilTableExists(tableRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            newTable = response.tableDescription().tableName();\n            return newTable;\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return "";\n    }\n}\n'})})]}),(0,s.jsxs)(k,{value:"localltack",label:"LocalStack",children:[(0,s.jsx)(n.h3,{id:"localstack",children:"LocalStack"}),(0,s.jsx)(n.p,{children:"You can create a DynamoDB table using the CreateTable API. Execute the following command to create a table named Music with a primary key id:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb create-table \\\n    --table-name Music \\\n    --attribute-definitions \\\n        AttributeName=Artist,AttributeType=S \\\n        AttributeName=SongTitle,AttributeType=S \\\n    --key-schema \\\n        AttributeName=Artist,KeyType=HASH \\\n        AttributeName=SongTitle,KeyType=RANGE \\\n    --provisioned-throughput \\\n        ReadCapacityUnits=5,WriteCapacityUnits=5 \\\n    --table-class STANDARD\n"})}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"When"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker run -p 8000:8000 amazon/dynamodb-local\n"})}),"\n",(0,s.jsx)(n.p,{children:"run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb create-table \\\n    --endpoint-url http://localhost:8000 \\\n    --table-name Music \\\n    --attribute-definitions \\\n        AttributeName=Artist,AttributeType=S \\\n        AttributeName=SongTitle,AttributeType=S \\\n    --key-schema \\\n        AttributeName=Artist,KeyType=HASH \\\n        AttributeName=SongTitle,KeyType=RANGE \\\n    --provisioned-throughput \\\n        ReadCapacityUnits=5,WriteCapacityUnits=5 \\\n    --table-class STANDARD\n"})}),"\n"]}),(0,s.jsx)(n.p,{children:"list-tables:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb list-tables     --region us-east-1\n"})}),(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb list-tables  \\\n   --endpoint-url http://localhost:8000 \\\n   --region us-east-1\n"})}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n    "TableNames": [\n        "Music"\n    ]\n}\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"write-data-to-a-table",children:"Write data to a table"}),"\n",(0,s.jsxs)(n.p,{children:["In this step, you insert several items into the table that you created in: ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Create a table"})}),"."]}),"\n",(0,s.jsxs)(A,{children:[(0,s.jsxs)(k,{value:"console",label:"AWS Management Console",default:!0,children:[(0,s.jsx)(n.h3,{id:"aws-management-console-1",children:"AWS Management Console"}),(0,s.jsx)(n.p,{children:"Follow these steps to write data to the Music table using the DynamoDB console."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Open the DynamoDB console at ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/dynamodb/",children:"https://console.aws.amazon.com/dynamodb/"})})}),"."]}),"\n",(0,s.jsx)(n.li,{children:"In the left navigation pane, choose Tables."}),"\n",(0,s.jsx)(n.li,{children:"On the Tables page, choose the Music table."}),"\n",(0,s.jsx)(n.li,{children:"Choose Explore table items."}),"\n",(0,s.jsx)(n.li,{children:"In the Items returned section, choose Create item."}),"\n",(0,s.jsxs)(n.li,{children:["On the Create item page, do the following to add items to your table:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Choose Add new attribute, and then choose Number."}),"\n",(0,s.jsx)(n.li,{children:"For Attribute name, enter Awards."}),"\n",(0,s.jsx)(n.li,{children:"Repeat this process to create an AlbumTitle of type String."}),"\n",(0,s.jsxs)(n.li,{children:["Enter the following values for your item:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For Artist, enter No One You Know."}),"\n",(0,s.jsx)(n.li,{children:"For SongTitle, enter Call Me Today."}),"\n",(0,s.jsx)(n.li,{children:"For AlbumTitle, enter Somewhat Famous."}),"\n",(0,s.jsx)(n.li,{children:"For Awards, enter 1."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Choose Create item."}),"\n",(0,s.jsxs)(n.li,{children:["Repeat this process and create another item with the following values:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For Artist, enter Acme Band."}),"\n",(0,s.jsx)(n.li,{children:"For SongTitle enter Happy Day."}),"\n",(0,s.jsx)(n.li,{children:"For AlbumTitle, enter Songs About Life."}),"\n",(0,s.jsx)(n.li,{children:"For Awards, enter 10."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Do this one more time to create another item with the same Artist as the previous step, but different values for the other attributes:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For Artist, enter Acme Band."}),"\n",(0,s.jsx)(n.li,{children:"For SongTitle enter PartiQL Rocks.\nFor AlbumTitle, enter Another Album Title.\nFor Awards, enter 8."}),"\n"]}),"\n"]}),"\n"]})]}),(0,s.jsxs)(k,{value:"cli",label:"AWS CLI",children:[(0,s.jsx)(n.h3,{id:"aws-cli-1",children:"AWS CLI"}),(0,s.jsx)(n.p,{children:"Linux"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'aws dynamodb put-item \\\n    --table-name Music  \\\n    --item \\\n        \'{"Artist": {"S": "No One You Know"}, "SongTitle": {"S": "Call Me Today"}, "AlbumTitle": {"S": "Somewhat Famous"}, "Awards": {"N": "1"}}\'\n\naws dynamodb put-item \\\n    --table-name Music  \\\n    --item \\\n        \'{"Artist": {"S": "No One You Know"}, "SongTitle": {"S": "Howdy"}, "AlbumTitle": {"S": "Somewhat Famous"}, "Awards": {"N": "2"}}\'\n\naws dynamodb put-item \\\n    --table-name Music \\\n    --item \\\n        \'{"Artist": {"S": "Acme Band"}, "SongTitle": {"S": "Happy Day"}, "AlbumTitle": {"S": "Songs About Life"}, "Awards": {"N": "10"}}\'\n\naws dynamodb put-item \\\n    --table-name Music \\\n    --item \\\n        \'{"Artist": {"S": "Acme Band"}, "SongTitle": {"S": "PartiQL Rocks"}, "AlbumTitle": {"S": "Another Album Title"}, "Awards": {"N": "8"}}\'\n'})})]}),(0,s.jsxs)(k,{value:"sdk",label:"AWS SDK",children:[(0,s.jsx)(n.h3,{id:"aws-sdk-1",children:"AWS SDK"}),(0,s.jsxs)(n.p,{children:["Puts an item into a table using ",(0,s.jsx)(n.a,{href:"http://docs.aws.amazon.com/sdk-for-java/latest/reference/software/amazon/awssdk/services/dynamodb/DynamoDbClient.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDbClient"})})}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\nimport software.amazon.awssdk.services.dynamodb.model.PutItemResponse;\nimport software.amazon.awssdk.services.dynamodb.model.ResourceNotFoundException;\nimport java.util.HashMap;\n\n/**\n * Before running this Java V2 code example, set up your development\n * environment, including your credentials.\n *\n * For more information, see the following documentation topic:\n *\n * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n *\n * To place items into an Amazon DynamoDB table using the AWS SDK for Java V2,\n * its better practice to use the\n * Enhanced Client. See the EnhancedPutItem example.\n */\npublic class PutItem {\n    public static void main(String[] args) {\n        final String usage = """\n\n                Usage:\n                    <tableName> <key> <keyVal> <albumtitle> <albumtitleval> <awards> <awardsval> <Songtitle> <songtitleval>\n\n                Where:\n                    tableName - The Amazon DynamoDB table in which an item is placed (for example, Music3).\n                    key - The key used in the Amazon DynamoDB table (for example, Artist).\n                    keyval - The key value that represents the item to get (for example, Famous Band).\n                    albumTitle - The Album title (for example, AlbumTitle).\n                    AlbumTitleValue - The name of the album (for example, Songs About Life ).\n                    Awards - The awards column (for example, Awards).\n                    AwardVal - The value of the awards (for example, 10).\n                    SongTitle - The song title (for example, SongTitle).\n                    SongTitleVal - The value of the song title (for example, Happy Day).\n                **Warning** This program will  place an item that you specify into a table!\n                """;\n\n        if (args.length != 9) {\n            System.out.println(usage);\n            System.exit(1);\n        }\n\n        String tableName = args[0];\n        String key = args[1];\n        String keyVal = args[2];\n        String albumTitle = args[3];\n        String albumTitleValue = args[4];\n        String awards = args[5];\n        String awardVal = args[6];\n        String songTitle = args[7];\n        String songTitleVal = args[8];\n\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n\n        putItemInTable(ddb, tableName, key, keyVal, albumTitle, albumTitleValue, awards, awardVal, songTitle,\n                songTitleVal);\n        System.out.println("Done!");\n        ddb.close();\n    }\n\n    public static void putItemInTable(DynamoDbClient ddb,\n            String tableName,\n            String key,\n            String keyVal,\n            String albumTitle,\n            String albumTitleValue,\n            String awards,\n            String awardVal,\n            String songTitle,\n            String songTitleVal) {\n\n        HashMap<String, AttributeValue> itemValues = new HashMap<>();\n        itemValues.put(key, AttributeValue.builder().s(keyVal).build());\n        itemValues.put(songTitle, AttributeValue.builder().s(songTitleVal).build());\n        itemValues.put(albumTitle, AttributeValue.builder().s(albumTitleValue).build());\n        itemValues.put(awards, AttributeValue.builder().s(awardVal).build());\n\n        PutItemRequest request = PutItemRequest.builder()\n                .tableName(tableName)\n                .item(itemValues)\n                .build();\n\n        try {\n            PutItemResponse response = ddb.putItem(request);\n            System.out.println(tableName + " was successfully updated. The request id is "\n                    + response.responseMetadata().requestId());\n\n        } catch (ResourceNotFoundException e) {\n            System.err.format("Error: The Amazon DynamoDB table \\"%s\\" can\'t be found.\\n", tableName);\n            System.err.println("Be sure that it exists and that you\'ve typed its name correctly!");\n            System.exit(1);\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n'})})]}),(0,s.jsxs)(k,{value:"localltack",label:"LocalStack",children:[(0,s.jsx)(n.h3,{id:"localstack-1",children:"LocalStack"}),(0,s.jsxs)(n.p,{children:["You can insert an item into a DynamoDB table using the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PutItem"})})})," API. Execute the following command to insert an item into the Music table:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    awslocal dynamodb put-item \\\n        --table-name Music  \\\n        --item \\\n            \'{"Artist": {"S": "No One You Know"}, "SongTitle": {"S": "Call Me Today"}, "AlbumTitle": {"S": "Somewhat Famous"}, "Awards": {"N": "1"}}\'\n\n    awslocal dynamodb put-item \\\n        --table-name Music  \\\n        --item \\\n            \'{"Artist": {"S": "No One You Know"}, "SongTitle": {"S": "Howdy"}, "AlbumTitle": {"S": "Somewhat Famous"}, "Awards": {"N": "2"}}\'\n\n    awslocal dynamodb put-item \\\n        --table-name Music \\\n        --item \\\n            \'{"Artist": {"S": "Acme Band"}, "SongTitle": {"S": "Happy Day"}, "AlbumTitle": {"S": "Songs About Life"}, "Awards": {"N": "10"}}\'\n\n    awslocal dynamodb put-item \\\n        --table-name Music \\\n        --item \\\n            \'{"Artist": {"S": "Acme Band"}, "SongTitle": {"S": "PartiQL Rocks"}, "AlbumTitle": {"S": "Another Album Title"}, "Awards": {"N": "8"}}\'\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"read-data-from-a-table",children:"Read data from a table"}),"\n",(0,s.jsxs)(n.p,{children:["In this step, you'll read back one of the items that you created in ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Write data to a table"})}),"."]}),"\n",(0,s.jsxs)(A,{children:[(0,s.jsxs)(k,{value:"console",label:"AWS Management Console",default:!0,children:[(0,s.jsx)(n.h3,{id:"aws-management-console-2",children:"AWS Management Console"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Open the DynamoDB console at ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/dynamodb/",children:"https://console.aws.amazon.com/dynamodb/"})})}),"."]}),"\n",(0,s.jsx)(n.li,{children:"In the left navigation pane, choose Tables."}),"\n",(0,s.jsx)(n.li,{children:"On the Tables page, choose the Music table."}),"\n",(0,s.jsx)(n.li,{children:"Choose Explore table items."}),"\n",(0,s.jsx)(n.li,{children:"On the Items returned section, view the list of items stored in the table, sorted by Artist and SongTitle. The first item in the list is the one with the Artist named Acme Band and the SongTitle PartiQL Rocks."}),"\n"]})]}),(0,s.jsxs)(k,{value:"cli",label:"AWS CLI",children:[(0,s.jsx)(n.h3,{id:"aws-cli-2",children:"AWS CLI"}),(0,s.jsxs)(n.p,{children:["The following AWS CLI example reads an item from the Music. You can do this either through the ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDB API"})})," or ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL"})})}),", a SQL-compatible query language for DynamoDB."]}),(0,s.jsxs)(A,{children:[(0,s.jsx)(k,{value:"dynamodb-api",label:"DynamoDB API",default:!0,children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"dynamodb-api",children:"DynamoDB API"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'aws dynamodb get-item --consistent-read \\\n    --table-name Music \\\n    --key \'{ "Artist": {"S": "Acme Band"}, "SongTitle": {"S": "Happy Day"}}\'\n'})}),"\n"]})}),(0,s.jsx)(k,{value:"partiql",label:"PartiQL for DynamoDB",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"partiql-for-dynamodb",children:"PartiQL for DynamoDB"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws dynamodb execute-statement --statement \"SELECT * FROM Music   \\\nWHERE Artist='Acme Band' AND SongTitle='Happy Day'\"\n"})}),"\n"]})})]})]}),(0,s.jsxs)(k,{value:"sdk",label:"AWS SDK",children:[(0,s.jsx)(n.h3,{id:"aws-sdk-2",children:"AWS SDK"}),(0,s.jsx)(n.p,{children:"Java"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Before running this Java V2 code example, set up your development\n * environment, including your credentials.\n *\n * For more information, see the following documentation topic:\n *\n * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n *\n * To get an item from an Amazon DynamoDB table using the AWS SDK for Java V2,\n * its better practice to use the\n * Enhanced Client, see the EnhancedGetItem example.\n */\npublic class GetItem {\n    public static void main(String[] args) {\n        final String usage = """\n\n                Usage:\n                    <tableName> <key> <keyVal>\n\n                Where:\n                    tableName - The Amazon DynamoDB table from which an item is retrieved (for example, Music3).\\s\n                    key - The key used in the Amazon DynamoDB table (for example, Artist).\\s\n                    keyval - The key value that represents the item to get (for example, Famous Band).\n                """;\n\n        if (args.length != 3) {\n            System.out.println(usage);\n            System.exit(1);\n        }\n\n        String tableName = args[0];\n        String key = args[1];\n        String keyVal = args[2];\n        System.out.format("Retrieving item \\"%s\\" from \\"%s\\"\\n", keyVal, tableName);\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n\n        getDynamoDBItem(ddb, tableName, key, keyVal);\n        ddb.close();\n    }\n\n    public static void getDynamoDBItem(DynamoDbClient ddb, String tableName, String key, String keyVal) {\n        HashMap<String, AttributeValue> keyToGet = new HashMap<>();\n        keyToGet.put(key, AttributeValue.builder()\n                .s(keyVal)\n                .build());\n\n        GetItemRequest request = GetItemRequest.builder()\n                .key(keyToGet)\n                .tableName(tableName)\n                .build();\n\n        try {\n            // If there is no matching item, GetItem does not return any data.\n            Map<String, AttributeValue> returnedItem = ddb.getItem(request).item();\n            if (returnedItem.isEmpty())\n                System.out.format("No item found with the key %s!\\n", key);\n            else {\n                Set<String> keys = returnedItem.keySet();\n                System.out.println("Amazon DynamoDB table attributes: \\n");\n                for (String key1 : keys) {\n                    System.out.format("%s: %s\\n", key1, returnedItem.get(key1).toString());\n                }\n            }\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n\n\n'})})]}),(0,s.jsxs)(k,{value:"localltack",label:"LocalStack",children:[(0,s.jsx)(n.h3,{id:"localstack-2",children:"LocalStack"}),(0,s.jsxs)(A,{children:[(0,s.jsx)(k,{value:"dynamodb-api",label:"DynamoDB API",default:!0,children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"dynamodb-api-1",children:"DynamoDB API"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'awslocal dynamodb get-item --consistent-read \\\n    --table-name Music \\\n    --key \'{ "Artist": {"S": "Acme Band"}, "SongTitle": {"S": "Happy Day"}}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n    "Item": {\n        "Artist": {\n            "S": "Acme Band"\n        },\n        "AlbumTitle": {\n            "S": "Songs About Life"\n        },\n        "Awards": {\n            "N": "10"\n        },\n        "SongTitle": {\n            "S": "Happy Day"\n        }\n    }\n}\n'})}),"\n"]})}),(0,s.jsx)(k,{value:"partiql",label:"PartiQL for DynamoDB",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"partiql-for-dynamodb-1",children:"PartiQL for DynamoDB"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\nawslocal dynamodb execute-statement --statement \"SELECT * FROM Music   \\\nWHERE Artist='Acme Band' AND SongTitle='Happy Day'\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n    "Item": {\n        "Artist": {\n            "S": "Acme Band"\n        },\n        "AlbumTitle": {\n            "S": "Songs About Life"\n        },\n        "Awards": {\n            "N": "10"\n        },\n        "SongTitle": {\n            "S": "Happy Day"\n        }\n    }\n}\n'})}),"\n"]})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"update-data-in-a-table",children:"Update data in a table"}),"\n",(0,s.jsxs)(n.p,{children:["In this step, you update an item that you created in ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Write data to a table"})}),"."]}),"\n",(0,s.jsxs)(A,{children:[(0,s.jsxs)(k,{value:"console",label:"AWS Management Console",default:!0,children:[(0,s.jsx)(n.h3,{id:"aws-management-console-3",children:"AWS Management Console"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Open the DynamoDB console at ",(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/dynamodb/",children:"https://console.aws.amazon.com/dynamodb/"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"In the left navigation pane, choose Tables."}),"\n",(0,s.jsx)(n.li,{children:"Choose the Music table from the table list."}),"\n",(0,s.jsx)(n.li,{children:"Choose Explore table items."}),"\n",(0,s.jsxs)(n.li,{children:["In Items returned, for the item row with Acme Band Artist and Happy Day SongTitle, do the following:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Place your cursor on the AlbumTitle named Songs About Life."}),"\n",(0,s.jsx)(n.li,{children:"Choose the Edit icon."}),"\n",(0,s.jsx)(n.li,{children:"In the Edit String popup window, enter Songs of Twilight."}),"\n",(0,s.jsx)(n.li,{children:"Choose Save."}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"Alternatively, to update an item, do the following in the Items returned section:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Choose the item row with Artist named Acme Band and SongTitle named Happy Day."}),"\n",(0,s.jsx)(n.li,{children:"From the Actions dropdown list, choose Edit item."}),"\n",(0,s.jsx)(n.li,{children:"For enter AlbumTitle, enter Songs of Twilight."}),"\n",(0,s.jsx)(n.li,{children:"Choose Save and close."}),"\n"]})]}),"\n"]}),"\n"]})]}),(0,s.jsxs)(k,{value:"cli",label:"AWS CLI",children:[(0,s.jsx)(n.h3,{id:"aws-cli-3",children:"AWS CLI"}),(0,s.jsxs)(n.p,{children:["The following AWS CLI example reads an item from the Music. You can do this either through the ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDB API"})})," or ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"PartiQL"})})}),", a SQL-compatible query language for DynamoDB."]}),(0,s.jsxs)(A,{children:[(0,s.jsx)(k,{value:"dynamodb-api",label:"DynamoDB API",default:!0,children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"dynamodb-api-2",children:"DynamoDB API"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'aws dynamodb update-item \\\n    --table-name Music \\\n    --key \'{ "Artist": {"S": "Acme Band"}, "SongTitle": {"S": "Happy Day"}}\' \\\n    --update-expression "SET AlbumTitle = :newval" \\\n    --expression-attribute-values \'{":newval":{"S":"Updated Album Title"}}\' \\\n    --return-values ALL_NEW\n'})}),"\n"]})}),(0,s.jsx)(k,{value:"partiql",label:"PartiQL for DynamoDB",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"partiql-for-dynamodb-2",children:"PartiQL for DynamoDB"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws dynamodb execute-statement --statement \"UPDATE Music  \\\n     SET AlbumTitle='Updated Album Title'  \\\n     WHERE Artist='Acme Band' AND SongTitle='Happy Day' \\\n     RETURNING ALL NEW *\"\n"})}),"\n"]})})]})]}),(0,s.jsxs)(k,{value:"sdk",label:"AWS SDK",children:[(0,s.jsx)(n.h3,{id:"aws-sdk-3",children:"AWS SDK"}),(0,s.jsx)(n.p,{children:"Java"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    /// <summary>\n    /// Updates an existing item in the movies table.\n    /// </summary>\n    /// <param name="client">An initialized Amazon DynamoDB client object.</param>\n    /// <param name="newMovie">A Movie object containing information for\n    /// the movie to update.</param>\n    /// <param name="newInfo">A MovieInfo object that contains the\n    /// information that will be changed.</param>\n    /// <param name="tableName">The name of the table that contains the movie.</param>\n    /// <returns>A Boolean value that indicates the success of the operation.</returns>\n    public static async Task<bool> UpdateItemAsync(\n        AmazonDynamoDBClient client,\n        Movie newMovie,\n        MovieInfo newInfo,\n        string tableName)\n    {\n        var key = new Dictionary<string, AttributeValue>\n        {\n            ["title"] = new AttributeValue { S = newMovie.Title },\n            ["year"] = new AttributeValue { N = newMovie.Year.ToString() },\n        };\n        var updates = new Dictionary<string, AttributeValueUpdate>\n        {\n            ["info.plot"] = new AttributeValueUpdate\n            {\n                Action = AttributeAction.PUT,\n                Value = new AttributeValue { S = newInfo.Plot },\n            },\n\n            ["info.rating"] = new AttributeValueUpdate\n            {\n                Action = AttributeAction.PUT,\n                Value = new AttributeValue { N = newInfo.Rank.ToString() },\n            },\n        };\n\n        var request = new UpdateItemRequest\n        {\n            AttributeUpdates = updates,\n            Key = key,\n            TableName = tableName,\n        };\n\n        var response = await client.UpdateItemAsync(request);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n'})})]}),(0,s.jsxs)(k,{value:"localltack",label:"LocalStack",children:[(0,s.jsx)(n.h3,{id:"localstack-3",children:"LocalStack"}),(0,s.jsxs)(A,{children:[(0,s.jsx)(k,{value:"dynamodb-api",label:"DynamoDB API",default:!0,children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"dynamodb-api-3",children:"DynamoDB API"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'awslocal dynamodb update-item \\\n    --table-name Music \\\n    --key \'{ "Artist": {"S": "Acme Band"}, "SongTitle": {"S": "Happy Day"}}\' \\\n    --update-expression "SET AlbumTitle = :newval" \\\n    --expression-attribute-values \'{":newval":{"S":"Updated Album Title"}}\' \\\n   --return-values ALL_NEW\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:' {\n     "Items": [\n         {\n             "Artist": {\n                 "S": "Acme Band"\n             },\n             "Awards": {\n                 "N": "10"\n             },\n             "AlbumTitle": {\n                 "S": "Updated Album Title"\n             },\n             "SongTitle": {\n                 "S": "Happy Day"\n             }\n         }\n     ]\n }\n'})}),"\n"]})}),(0,s.jsx)(k,{value:"partiql",label:"PartiQL for DynamoDB",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"partiql-for-dynamodb-3",children:"PartiQL for DynamoDB"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb execute-statement --statement \"UPDATE Music  \\\n          SET AlbumTitle='Updated Album Title'  \\\n          WHERE Artist='Acme Band' AND SongTitle='Happy Day' \\\n          RETURNING ALL NEW *\"\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:' {\n     "Items": [\n         {\n             "Artist": {\n                 "S": "Acme Band"\n             },\n             "Awards": {\n                 "N": "10"\n             },\n             "AlbumTitle": {\n                 "S": "Updated Album Title"\n             },\n             "SongTitle": {\n                 "S": "Happy Day"\n             }\n         }\n     ]\n }\n'})}),"\n"]})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"delete-table",children:"Delete table"}),"\n",(0,s.jsxs)(A,{children:[(0,s.jsxs)(k,{value:"console",label:"AWS Management Console",default:!0,children:[(0,s.jsx)(n.h3,{id:"aws-management-console-4",children:"AWS Management Console"}),(0,s.jsx)(n.p,{children:"To delete the Music table using the console:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Open the DynamoDB console at ",(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/dynamodb/",children:"https://console.aws.amazon.com/dynamodb/"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"In the left navigation pane, choose Tables."}),"\n",(0,s.jsx)(n.li,{children:"Choose the checkbox beside the Music table in the table list."}),"\n",(0,s.jsx)(n.li,{children:"Choose Delete."}),"\n"]})]}),(0,s.jsxs)(k,{value:"cli",label:"AWS CLI",children:[(0,s.jsx)(n.h3,{id:"aws-cli-4",children:"AWS CLI"}),(0,s.jsx)(n.p,{children:"The following AWS CLI example deletes the Music table using delete-table."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws dynamodb delete-table --table-name Music\n"})})]}),(0,s.jsxs)(k,{value:"sdk",label:"AWS SDK",children:[(0,s.jsx)(n.h3,{id:"aws-sdk-4",children:"AWS SDK"}),(0,s.jsx)(n.p,{children:"Java"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n\n/**\n * Before running this Java V2 code example, set up your development\n * environment, including your credentials.\n *\n * For more information, see the following documentation topic:\n *\n * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n */\n\npublic class DeleteTable {\n    public static void main(String[] args) {\n        final String usage = """\n\n                Usage:\n                    <tableName>\n\n                Where:\n                    tableName - The Amazon DynamoDB table to delete (for example, Music3).\n\n                **Warning** This program will delete the table that you specify!\n                """;\n\n        if (args.length != 1) {\n            System.out.println(usage);\n            System.exit(1);\n        }\n\n        String tableName = args[0];\n        System.out.format("Deleting the Amazon DynamoDB table %s...\\n", tableName);\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n\n        deleteDynamoDBTable(ddb, tableName);\n        ddb.close();\n    }\n\n    public static void deleteDynamoDBTable(DynamoDbClient ddb, String tableName) {\n        DeleteTableRequest request = DeleteTableRequest.builder()\n                .tableName(tableName)\n                .build();\n\n        try {\n            ddb.deleteTable(request);\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        System.out.println(tableName + " was successfully deleted!");\n    }\n}\n'})})]}),(0,s.jsxs)(k,{value:"localltack",label:"LocalStack",children:[(0,s.jsx)(n.h3,{id:"localstack-4",children:"LocalStack"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb delete-table --table-name Music\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb list-tables     --region us-east-1\n"})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"query-data-in-a-table",children:"Query data in a table"}),"\n",(0,s.jsxs)(n.p,{children:["In this step, you query the data that you wrote to the Music table in ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Write data to a table"})})," by specifying Artist. This will display all songs that are associated with the partition key: Artist."]}),"\n",(0,s.jsxs)(A,{children:[(0,s.jsxs)(k,{value:"console",label:"AWS Management Console",default:!0,children:[(0,s.jsx)(n.h3,{id:"aws-management-console-5",children:"AWS Management Console"}),(0,s.jsx)(n.p,{children:"Follow these steps to use the DynamoDB console to query data in the Music table."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Open the DynamoDB console at ",(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/dynamodb/",children:"https://console.aws.amazon.com/dynamodb/"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"In the left navigation pane, choose Tables."}),"\n",(0,s.jsx)(n.li,{children:"Choose the Music table from the table list."}),"\n",(0,s.jsx)(n.li,{children:"Choose Explore table items."}),"\n",(0,s.jsx)(n.li,{children:"In Scan or query items, make sure that Query is selected."}),"\n",(0,s.jsx)(n.li,{children:"For Partition key, enter Acme Band, and then choose Run."}),"\n"]})]}),(0,s.jsxs)(k,{value:"cli",label:"AWS CLI",children:[(0,s.jsx)(n.h3,{id:"aws-cli-5",children:"AWS CLI"}),(0,s.jsxs)(A,{children:[(0,s.jsx)(k,{value:"dynamodb-api",label:"DynamoDB API",default:!0,children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"dynamodb-api-4",children:"DynamoDB API"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:' aws dynamodb query \\\n     --table-name Music \\\n     --key-condition-expression "Artist = :name" \\\n     --expression-attribute-values  \'{":name":{"S":"Acme Band"}}\'\n'})}),"\n"]})}),(0,s.jsx)(k,{value:"partiql",label:"PartiQL for DynamoDB",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"partiql-for-dynamodb-4",children:"PartiQL for DynamoDB"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"aws dynamodb execute-statement --statement \"SELECT * FROM Music   \\\n                                             WHERE Artist='Acme Band'\"\n"})}),"\n"]})})]})]}),(0,s.jsxs)(k,{value:"sdk",label:"AWS SDK",children:[(0,s.jsx)(n.h3,{id:"aws-sdk-5",children:"AWS SDK"}),(0,s.jsxs)(n.p,{children:["Java",(0,s.jsx)("br",{}),"\nQueries a table by using ",(0,s.jsx)(n.a,{href:"http://docs.aws.amazon.com/sdk-for-java/latest/reference/software/amazon/awssdk/services/dynamodb/DynamoDbClient.html",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"DynamoDbClient"})})}),"."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'import software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport software.amazon.awssdk.services.dynamodb.model.QueryRequest;\nimport software.amazon.awssdk.services.dynamodb.model.QueryResponse;\nimport java.util.HashMap;\n\n/**\n * Before running this Java V2 code example, set up your development\n * environment, including your credentials.\n *\n * For more information, see the following documentation topic:\n *\n * https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n *\n * To query items from an Amazon DynamoDB table using the AWS SDK for Java V2,\n * its better practice to use the\n * Enhanced Client. See the EnhancedQueryRecords example.\n */\npublic class Query {\n    public static void main(String[] args) {\n        final String usage = """\n\n                Usage:\n                    <tableName> <partitionKeyName> <partitionKeyVal>\n\n                Where:\n                    tableName - The Amazon DynamoDB table to put the item in (for example, Music3).\n                    partitionKeyName - The partition key name of the Amazon DynamoDB table (for example, Artist).\n                    partitionKeyVal - The value of the partition key that should match (for example, Famous Band).\n                """;\n\n        if (args.length != 3) {\n            System.out.println(usage);\n            System.exit(1);\n        }\n\n        String tableName = args[0];\n        String partitionKeyName = args[1];\n        String partitionKeyVal = args[2];\n\n        // For more information about an alias, see:\n        // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeNames.html\n        String partitionAlias = "#a";\n\n        System.out.format("Querying %s", tableName);\n        System.out.println("");\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n\n        int count = queryTable(ddb, tableName, partitionKeyName, partitionKeyVal, partitionAlias);\n        System.out.println("There were " + count + "  record(s) returned");\n        ddb.close();\n    }\n\n    public static int queryTable(DynamoDbClient ddb, String tableName, String partitionKeyName, String partitionKeyVal,\n            String partitionAlias) {\n        // Set up an alias for the partition key name in case it\'s a reserved word.\n        HashMap<String, String> attrNameAlias = new HashMap<String, String>();\n        attrNameAlias.put(partitionAlias, partitionKeyName);\n\n        // Set up mapping of the partition name with the value.\n        HashMap<String, AttributeValue> attrValues = new HashMap<>();\n        attrValues.put(":" + partitionKeyName, AttributeValue.builder()\n                .s(partitionKeyVal)\n                .build());\n\n        QueryRequest queryReq = QueryRequest.builder()\n                .tableName(tableName)\n                .keyConditionExpression(partitionAlias + " = :" + partitionKeyName)\n                .expressionAttributeNames(attrNameAlias)\n                .expressionAttributeValues(attrValues)\n                .build();\n\n        try {\n            QueryResponse response = ddb.query(queryReq);\n            return response.count();\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return -1;\n    }\n}\n'})})]}),(0,s.jsxs)(k,{value:"localltack",label:"LocalStack",children:[(0,s.jsx)(n.h3,{id:"localstack-5",children:"LocalStack"}),(0,s.jsxs)(A,{children:[(0,s.jsx)(k,{value:"dynamodb-api",label:"DynamoDB API",default:!0,children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"dynamodb-api-5",children:"DynamoDB API"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:' awslocal dynamodb query \\\n     --table-name Music \\\n     --key-condition-expression "Artist = :name" \\\n     --expression-attribute-values  \'{":name":{"S":"Acme Band"}}\'\n'})}),"\n"]})}),(0,s.jsx)(k,{value:"partiql",label:"PartiQL for DynamoDB",children:(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.h3,{id:"partiql-for-dynamodb-5",children:"PartiQL for DynamoDB"}),"\n",(0,s.jsx)(n.p,{children:"Linux"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"awslocal dynamodb execute-statement --statement \"SELECT * FROM Music   \\\n                                             WHERE Artist='Acme Band'\"\n"})}),"\n"]})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("br",{}),"\n","\n",(0,s.jsx)(T.A,{items:(0,I.$S)().items})]})}function W(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(L,{...e})}):L(e)}},4365:(e,n,t)=>{t.d(n,{W:()=>d});var a=t(6540),s=t(502);const i=["zero","one","two","few","many","other"];function l(e){return i.filter((n=>e.includes(n)))}const r={locale:"en",pluralForms:l(["one","other"]),select:e=>1===e?"one":"other"};function o(){const{i18n:{currentLocale:e}}=(0,s.A)();return(0,a.useMemo)((()=>{try{return function(e){const n=new Intl.PluralRules(e);return{locale:e,pluralForms:l(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${n.message}\n`),r}}),[e])}function d(){const e=o();return{selectMessage:(n,t)=>function(e,n,t){const a=e.split("|");if(1===a.length)return a[0];a.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${a.length}: ${e}`);const s=t.select(n),i=t.pluralForms.indexOf(s);return a[Math.min(i,a.length-1)]}(t,n,e)}}},7170:(e,n,t)=>{t.d(n,{A:()=>j});t(6540);var a=t(4164),s=t(7936),i=t(7634),l=t(4365),r=t(5242),o=t(9979),d=t(4861);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var m=t(4848);function u(e){let{href:n,children:t}=e;return(0,m.jsx)(i.A,{href:n,className:(0,a.A)("card padding--lg",c.cardContainer),children:t})}function h(e){let{href:n,icon:t,title:s,description:i}=e;return(0,m.jsxs)(u,{href:n,children:[(0,m.jsxs)(d.A,{as:"h2",className:(0,a.A)("text--truncate",c.cardTitle),title:s,children:[t," ",s]}),i&&(0,m.jsx)("p",{className:(0,a.A)("text--truncate",c.cardDescription),title:i,children:i})]})}function b(e){let{item:n}=e;const t=(0,s.Nr)(n),a=function(){const{selectMessage:e}=(0,l.W)();return n=>e(n,(0,o.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return t?(0,m.jsx)(h,{href:t,icon:"\ud83d\uddc3\ufe0f",title:n.label,description:n.description??a(n.items.length)}):null}function p(e){let{item:n}=e;const t=(0,r.A)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",a=(0,s.cC)(n.docId??void 0);return(0,m.jsx)(h,{href:n.href,icon:t,title:n.label,description:n.description??a?.description})}function y(e){let{item:n}=e;switch(n.type){case"link":return(0,m.jsx)(p,{item:n});case"category":return(0,m.jsx)(b,{item:n});default:throw new Error(`unknown item type ${JSON.stringify(n)}`)}}function x(e){let{className:n}=e;const t=(0,s.$S)();return(0,m.jsx)(j,{items:t.items,className:n})}function j(e){const{items:n,className:t}=e;if(!n)return(0,m.jsx)(x,{...e});const i=(0,s.d1)(n);return(0,m.jsx)("section",{className:(0,a.A)("row",t),children:i.map(((e,n)=>(0,m.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,m.jsx)(y,{item:e})},n)))})}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var a=t(6540);const s={},i=a.createContext(s);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);