"use strict";(self.webpackChunkjreact_com_docsaurus_01=self.webpackChunkjreact_com_docsaurus_01||[]).push([[5019],{4736:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"artificial-intelligence/machine-learning/examples/stock-price-prediction/tesla-stock-price-prediction","title":"Tesla Stock Price Prediction","description":"Objective and Overview","source":"@site/docs/artificial-intelligence/machine-learning/examples/stock-price-prediction/tesla-stock-price-prediction.mdx","sourceDirName":"artificial-intelligence/machine-learning/examples/stock-price-prediction","slug":"/artificial-intelligence/machine-learning/examples/stock-price-prediction/tesla-stock-price-prediction","permalink":"/docs/artificial-intelligence/machine-learning/examples/stock-price-prediction/tesla-stock-price-prediction","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":110,"frontMatter":{"sidebar_position":110},"sidebar":"tutorialSidebar","previous":{"title":"Stock Price Prediction","permalink":"/docs/artificial-intelligence/machine-learning/examples/stock-price-prediction/"},"next":{"title":"Fraud Detection","permalink":"/docs/artificial-intelligence/machine-learning/examples/fraud-detection/"}}');var a=n(4848),s=n(8453);const r={sidebar_position:110},l="Tesla Stock Price Prediction",o={},d=[{value:"Objective and Overview",id:"objective-and-overview",level:2},{value:"Steps Taken",id:"steps-taken",level:3},{value:"Data Collection and Processing:",id:"data-collection-and-processing",level:4},{value:"Model Training:",id:"model-training",level:4},{value:"Hyperparameter Tuning:",id:"hyperparameter-tuning",level:4},{value:"Feature Importance Analysis:",id:"feature-importance-analysis",level:4},{value:"Model Visualization:",id:"model-visualization",level:4},{value:"Technologies Used",id:"technologies-used",level:2},{value:"Jupyter Notebook",id:"jupyter-notebook",level:2},{value:"Data Collection and Processing:",id:"data-collection-and-processing-1",level:4},{value:"Output",id:"output",level:4},{value:"Output",id:"output-1",level:4},{value:"Output",id:"output-2",level:4},{value:"Model Training:",id:"model-training-1",level:3},{value:"Output",id:"output-3",level:4},{value:"Output",id:"output-4",level:4},{value:"Output",id:"output-5",level:4},{value:"Output",id:"output-6",level:4},{value:"Feature Importance Analysis",id:"feature-importance-analysis-1",level:3},{value:"Output",id:"output-7",level:4},{value:"Output",id:"output-8",level:4},{value:"Output",id:"output-9",level:4},{value:"Output",id:"output-10",level:4},{value:"Output",id:"output-11",level:4}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"tesla-stock-price-prediction",children:"Tesla Stock Price Prediction"})}),"\n",(0,a.jsx)(t.h2,{id:"objective-and-overview",children:"Objective and Overview"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/pictures/stocks-pics-01.png",alt:"stocks-pics-01.png"}),"\n",(0,a.jsx)(t.p,{children:"The primary objective of this analysis was to predict Tesla\u2019s stock closing prices based on historical data. Using machine learning techniques, the goal was to evaluate the model's performance and make accurate predictions while identifying key drivers of stock price movements."}),"\n",(0,a.jsx)(t.h3,{id:"steps-taken",children:"Steps Taken"}),"\n",(0,a.jsx)(t.h4,{id:"data-collection-and-processing",children:"Data Collection and Processing:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Loaded historical Tesla stock price data."}),"\n",(0,a.jsx)(t.li,{children:"Preprocessed the data by cleaning columns (e.g., removing special characters like $) and converting them into numeric format."}),"\n",(0,a.jsx)(t.li,{children:"Checked for and handled missing values to ensure data integrity."}),"\n",(0,a.jsx)(t.li,{children:"Visualized Past Trend data before making my model to better grasp the volatility and trend visually"}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"model-training",children:"Model Training:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"Created lagging features (Close_t-1, Close_t-2, etc.), moving averages (e.g., 7_day_avg, 30_day_avg), and volatility metrics (e.g., 7_day_volatility) to capture trends and patterns in stock prices."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Split the dataset into training and testing sets using an 80-20 split."}),"\n",(0,a.jsx)(t.li,{children:"Trained a Random Forest Regressor as the predictive model."}),"\n",(0,a.jsx)(t.li,{children:"Evaluated the model on the test set using Mean Squared Error (MSE), achieving an MSE of 16.44, which translates to a Root Mean Squared Error (RMSE) of approximately $4.05."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"hyperparameter-tuning",children:"Hyperparameter Tuning:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Optimized the model by tuning key hyperparameters using RandomizedSearchCV to find the best configuration (e.g., number of trees, depth of trees, and minimum samples per split)."}),"\n",(0,a.jsx)(t.li,{children:"Improved the model\u2019s performance based on optimized parameters."}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"feature-importance-analysis",children:"Feature Importance Analysis:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Evaluated feature importance using the trained Random Forest model to understand which factors contributed most to predictions."}),"\n",(0,a.jsx)(t.li,{children:"Identified key features, such as previous day\u2019s closing price (Close_t-1) and moving averages, as the most influential drivers of the model."}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"model-visualization",children:"Model Visualization:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Created visualizations to evaluate model performance: Actual vs. Predicted Stock Prices Over Time: Showed that the model accurately captures trends and movements in Tesla\u2019s stock price."}),"\n",(0,a.jsx)(t.li,{children:"Residual Plot: Confirmed that residuals were mostly randomly distributed around zero, indicating a lack of significant bias."}),"\n",(0,a.jsx)(t.li,{children:"Feature Importance Plot: Highlighted the relative importance of various features in predicting stock prices."}),"\n",(0,a.jsx)(t.li,{children:"Prediction for Future Dates: Used the trained model to predict Tesla's stock closing prices for specific future dates in this objective being December 31st 2024.ssary"}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"technologies-used",children:"Technologies Used"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Python"}),"\n",(0,a.jsx)(t.li,{children:"Scikit-learn"}),"\n",(0,a.jsx)(t.li,{children:"Pandas"}),"\n",(0,a.jsx)(t.li,{children:"NumPy"}),"\n"]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"jupyter-notebook",children:"Jupyter Notebook"}),"\n",(0,a.jsx)(t.h4,{id:"data-collection-and-processing-1",children:"Data Collection and Processing:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Loaded historical Tesla stock price data."}),"\n",(0,a.jsx)(t.li,{children:"Preprocessed the data by cleaning columns (e.g., removing special characters like $) and converting them into numeric format."}),"\n",(0,a.jsx)(t.li,{children:"Checked for and handled missing values to ensure data integrity."}),"\n",(0,a.jsx)(t.li,{children:"Visualized historic data based on the values given"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load data\ndata = pd.read_csv('Tesla_StockPrice_Historical.csv')\n\n# Convert date column to datetime\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# Sort data by date\ndata = data.sort_values('Date')\n\n# Check for missing values\nprint(data.isnull().sum())\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output",children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Date      0\nClose     0\nVolume    0\nOpen      0\nHigh      0\nLow       0\ndtype: int64\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"print(data.describe())\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-1",children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"                                Date        Volume\ncount                           1258  1.258000e+03\nmean   2022-06-08 09:58:39.872814080  1.264734e+08\nmin              2019-12-09 00:00:00  2.940168e+07\n25%              2021-03-10 06:00:00  7.611178e+07\n50%              2022-06-07 12:00:00  1.030910e+08\n75%              2023-09-07 18:00:00  1.469126e+08\nmax              2024-12-06 00:00:00  9.140809e+08\nstd                              NaN  8.239543e+07\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"#Format the Date to DateTime\ndata['Date'] = pd.to_datetime(data['Date'])\n\n# Remove any symbols (like $ or commas) and convert to numeric\ndata['Close'] = data['Close'].replace('[\\$,]', '', regex=True).astype(float)\n\nplt.figure(figsize=(12, 6))\nplt.plot(data['Date'], data['Close'], label='Close Price')\nplt.title('Tesla Stock Closing Prices Over Time')\nplt.xlabel('Date')\nplt.ylabel('Close Price')\n\n# Set y-axis limits\nplt.ylim(data['Close'].min() * 0.9, data['Close'].max() * 1.1)  # Adjust the range slightly\nplt.legend()\nplt.show()\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-2",children:"Output"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/tesla/01-tesla-stock-closing-prices-over-time.png",alt:"01-tesla-stock-closing-prices-over-time.png"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"model-training-1",children:"Model Training:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Created lagging features (Close_t-1, Close_t-2, etc.), moving averages (e.g., 7_day_avg, 30_day_avg), and volatility metrics (e.g., 7_day_volatility) to capture trends and patterns in stock prices."}),"\n",(0,a.jsx)(t.li,{children:"Split the dataset into training and testing sets using by splitting."}),"\n",(0,a.jsx)(t.li,{children:"Trained a Random Forest Regressor as the predictive model."}),"\n",(0,a.jsx)(t.li,{children:"Evaluated the model on the test set using Mean Squared Error (MSE), achieving an MSE of 16.44, which translates to a Root Mean Squared Error (RMSE) of approximately $4.05."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"#Addition of Lagging Features\n\n\n#Add columns for previous days closing prices\ndata['Close_t-1'] = data['Close'].shift(1)\ndata['Close_t-2'] = data['Close'].shift(2)\n\n#Calculate Moving Averages to Capture trends\ndata['7_day_avg'] = data['Close'].rolling(window=7).mean()\ndata['30_day_avg'] = data['Close'].rolling(window=30).mean()\n\n#Measure Volatility (e.g standard deviation over 7 days)\ndata['7_day_volatility'] = data['Close'].rolling(window=7).std()\n\n#Measure percent change to track momentum\ndata['pct_change'] = data['Close'].pct_change()\n\n#Removal of missing values due to moving averages\ndata = data.dropna()\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"#Preparing the data for Modelling\n\n#Define X and Y features\nX = data[['Open', 'High', 'Low', 'Volume', 'Close_t-1', '7_day_avg', '30_day_avg', '7_day_volatility']]\ny = data['Close']\n\n#Train and Test Split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"print(X[['Open', 'High', 'Low']].head())\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-3",children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"         Open     High      Low\n1228  $38.13   $39.63   $37.27\n1227  $37.62   $38.80   $37.04\n1226  $38.04   $38.26   $36.95\n1225  $36.13   $37.63   $35.95\n1224  $37.90   $38.45   $37.21\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# Remove symbols and convert to float\nfor col in ['Open', 'High', 'Low']:\n    X.loc[:, col] = X[col].replace('[\\$,]', '', regex=True).astype(float)\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"#Check for Missing Values: After converting the columns check for any NaN values\nprint(X.isnull().sum())\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-4",children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Open                0\nHigh                0\nLow                 0\nVolume              0\nClose_t-1           0\n7_day_avg           0\n30_day_avg          0\n7_day_volatility    0\ndtype: int64\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nprint(f"Mean Squared Error: {mse}")\n'})}),"\n",(0,a.jsx)(t.h4,{id:"output-5",children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Mean Squared Error: 16.441745205325304\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"MSE represents the average squared error between predicted and actual stock prices. In this case, it\u2019s 16.44 (in squared units,dollars\xb2 for stock prices).\n\nExample: Compare the RMSE to the range of the target variable (y). If Tesla\u2019s stock prices range from, say, 300 to 500, then an error of $4.05 may be acceptable.\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'import matplotlib.pyplot as plt\n\nresiduals = y_test - y_pred\nplt.figure(figsize=(10, 6))\nplt.scatter(y_test, residuals)\nplt.axhline(0, color=\'red\', linestyle=\'--\')\nplt.xlabel("Actual Values")\nplt.ylabel("Residuals")\nplt.title("Residual Analysis")\nplt.show()\n'})}),"\n",(0,a.jsx)(t.h4,{id:"output-6",children:"Output"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/tesla/02-residual-analysis.png",alt:"02-residual-analysis.png"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"feature-importance-analysis-1",children:"Feature Importance Analysis"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Evaluated feature importance using the trained Random Forest model to understand which factors contributed most to predictions."}),"\n",(0,a.jsx)(t.li,{children:"Identified key features, such as previous day\u2019s closing price (Close_t-1) and moving averages, as the most influential drivers of the model."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"importances = model.feature_importances_\nfeatures = X.columns\nsorted_indices = importances.argsort()\n\nplt.figure(figsize=(10, 6))\nplt.barh(features[sorted_indices], importances[sorted_indices])\nplt.xlabel('Feature Importance')\nplt.title('Feature Importance for Random Forest Model')\nplt.show()\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-7",children:"Output"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/tesla/03-feature-importance-for.png",alt:"03-feature-importance-for.png"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# Example feature values for the final prediction\nfinal_features = {\n    'Open': 400.0,\n    'High': 405.0,\n    'Low': 395.0,\n    'Volume': 1200000,\n    'Close_t-1': 398.0,\n    '7_day_avg': 399.5,\n    '30_day_avg': 396.0,\n    '7_day_volatility': 3.2,\n    'Date': '2024-12-31'  # Add the date you wish to predict (datetime)\n}\n\n# Convert to a DataFrame\nimport pandas as pd\nfinal_features_df = pd.DataFrame([final_features])\n\n# Ensure the feature names match those used during training\nfinal_features_df = final_features_df[model.feature_names_in_]\n\n# Make the prediction\nfinal_prediction = model.predict(final_features_df)\nprint(f\"Predicted Closing Price on December 31, 2024: ${final_prediction[0]:.2f}\")\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-8",children:"Output"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Predicted Closing Price on December 31, 2024: $394.25\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# Add predictions to a DataFrame for visualization\ntest_results = X_test.copy()\ntest_results['Actual'] = y_test.values\ntest_results['Predicted'] = y_pred\ntest_results['Date'] = data.loc[y_test.index, 'Date']  # Ensure the Date column matches\n\n# Sort by date for visualization\ntest_results = test_results.sort_values(by='Date')\n\n# Plot\nplt.figure(figsize=(14, 8))\nplt.plot(test_results['Date'], test_results['Actual'], label='Actual', marker='o')\nplt.plot(test_results['Date'], test_results['Predicted'], label='Predicted', marker='x')\nplt.legend()\nplt.title('Actual vs. Predicted Stock Prices Over Time')\nplt.xlabel('Date')\nplt.ylabel('Stock Price')\nplt.xticks(rotation=45)\nplt.show()\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-9",children:"Output"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/tesla/04-actual-vs-predicted-stock.png",alt:"04-actual-vs-predicted-stock.png"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"import seaborn as sns\n\n# Plot the distribution of residuals\nplt.figure(figsize=(10, 6))\nsns.histplot(residuals, kde=True, bins=30)\nplt.title('Distribution of Residuals')\nplt.xlabel('Residual')\nplt.ylabel('Frequency')\nplt.show()\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-10",children:"Output"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/tesla/05-distribution-of-residual.png",alt:"05-distribution-of-residual.png"}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# Filter for specific dates\nspecific_dates = test_results[test_results['Date'].between('2024-01-01', '2024-12-31')]\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(specific_dates['Date'], specific_dates['Actual'], label='Actual', marker='o')\nplt.plot(specific_dates['Date'], specific_dates['Predicted'], label='Predicted', marker='x')\nplt.legend()\nplt.title('Actual vs. Predicted Stock Prices (Specific Dates)')\nplt.xlabel('Date')\nplt.ylabel('Stock Price')\nplt.xticks(rotation=45)\nplt.show()\n"})}),"\n",(0,a.jsx)(t.h4,{id:"output-11",children:"Output"}),"\n",(0,a.jsx)("img",{src:"/img/ai/machine-learning/stock-price-prediction/tesla/06-actual-vs-predicted-stock.png",alt:"06-actual-vs-predicted-stock.png"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"On the base + sources"})}),":",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.a,{href:"https://www.kaggle.com/code/baileighgriese/tesla-stock-price-prediction",children:(0,a.jsx)(t.em,{children:(0,a.jsx)(t.strong,{children:"Tesla Stock Price Prediction"})})})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);